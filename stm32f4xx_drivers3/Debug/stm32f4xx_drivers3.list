
stm32f4xx_drivers3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d74  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000efc  08000efc  00001efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f14  08000f14  00001f24  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000f14  08000f14  00001f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000f1c  08000f24  00001f24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f1c  08000f1c  00001f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f20  08000f20  00001f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001f24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001f24  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001f24  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001280  00000000  00000000  00001f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000471  00000000  00000000  000031ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000140  00000000  00000000  00003640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000e4  00000000  00000000  00003780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000021ac  00000000  00000000  00003864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000190d  00000000  00000000  00005a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000946f  00000000  00000000  0000731d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001078c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000450  00000000  00000000  000107d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00010c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000ee4 	.word	0x08000ee4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000ee4 	.word	0x08000ee4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <SPI2_GPIOInit>:
#define LED_PIN				9




void SPI2_GPIOInit(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 80001de:	4b14      	ldr	r3, [pc, #80]	@ (8000230 <SPI2_GPIOInit+0x58>)
 80001e0:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001e2:	2302      	movs	r3, #2
 80001e4:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80001e6:	2305      	movs	r3, #5
 80001e8:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001ea:	2300      	movs	r3, #0
 80001ec:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;
 80001ee:	2301      	movs	r3, #1
 80001f0:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001f2:	2302      	movs	r3, #2
 80001f4:	72bb      	strb	r3, [r7, #10]
	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_13;
 80001f6:	230d      	movs	r3, #13
 80001f8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 fa51 	bl	80006a4 <GPIO_Init>
	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_15;
 8000202:	230f      	movs	r3, #15
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 fa4b 	bl	80006a4 <GPIO_Init>
	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_14;
 800020e:	230e      	movs	r3, #14
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 fa45 	bl	80006a4 <GPIO_Init>
	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_12;
 800021a:	230c      	movs	r3, #12
 800021c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f000 fa3f 	bl	80006a4 <GPIO_Init>

}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40020400 	.word	0x40020400

08000234 <SPI2_Init>:
void SPI2_Init(void){
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx = SPI2;
 800023a:	4b0c      	ldr	r3, [pc, #48]	@ (800026c <SPI2_Init+0x38>)
 800023c:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800023e:	2301      	movs	r3, #1
 8000240:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000242:	2301      	movs	r3, #1
 8000244:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 8000246:	2304      	movs	r3, #4
 8000248:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800024a:	2300      	movs	r3, #0
 800024c:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800024e:	2300      	movs	r3, #0
 8000250:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000252:	2300      	movs	r3, #0
 8000254:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI;//Hardware
 8000256:	2300      	movs	r3, #0
 8000258:	73bb      	strb	r3, [r7, #14]
	SPI_Init(&SPI2handle);
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f000 fd0f 	bl	8000c80 <SPI_Init>
}
 8000262:	bf00      	nop
 8000264:	3710      	adds	r7, #16
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40003800 	.word	0x40003800

08000270 <GPIO_ButtonInit>:
void GPIO_ButtonInit(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOButton;
	GPIOButton.pGPIOx = GPIOA;
 8000276:	4b09      	ldr	r3, [pc, #36]	@ (800029c <GPIO_ButtonInit+0x2c>)
 8000278:	607b      	str	r3, [r7, #4]
	GPIOButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_0;
 800027a:	2300      	movs	r3, #0
 800027c:	723b      	strb	r3, [r7, #8]
	GPIOButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800027e:	2300      	movs	r3, #0
 8000280:	727b      	strb	r3, [r7, #9]
	GPIOButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000282:	2302      	movs	r3, #2
 8000284:	72bb      	strb	r3, [r7, #10]
	GPIOButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000286:	2300      	movs	r3, #0
 8000288:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&GPIOButton);
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fa09 	bl	80006a4 <GPIO_Init>
}
 8000292:	bf00      	nop
 8000294:	3710      	adds	r7, #16
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40020000 	.word	0x40020000

080002a0 <delay>:
void delay(void){
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i<500000/2; i++);
 80002a6:	2300      	movs	r3, #0
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	e002      	b.n	80002b2 <delay+0x12>
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3301      	adds	r3, #1
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a04      	ldr	r2, [pc, #16]	@ (80002c8 <delay+0x28>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d9f8      	bls.n	80002ac <delay+0xc>
}
 80002ba:	bf00      	nop
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	0003d08f 	.word	0x0003d08f

080002cc <SPI_verifyresponse>:
uint8_t SPI_verifyresponse(uint8_t ackbyte){
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	71fb      	strb	r3, [r7, #7]
	if (ackbyte == (uint8_t)0xF5){
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	2bf5      	cmp	r3, #245	@ 0xf5
 80002da:	d101      	bne.n	80002e0 <SPI_verifyresponse+0x14>
		//ack
		return 1;
 80002dc:	2301      	movs	r3, #1
 80002de:	e000      	b.n	80002e2 <SPI_verifyresponse+0x16>
	}
	else{
		return 0;
 80002e0:	2300      	movs	r3, #0
	}
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr

080002ec <main>:

int main(void){
 80002ec:	b5b0      	push	{r4, r5, r7, lr}
 80002ee:	b08e      	sub	sp, #56	@ 0x38
 80002f0:	af00      	add	r7, sp, #0
	uint8_t dummy_write = 0xff;
 80002f2:	23ff      	movs	r3, #255	@ 0xff
 80002f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t dummy_read;
	GPIO_ButtonInit();
 80002f8:	f7ff ffba 	bl	8000270 <GPIO_ButtonInit>
	SPI2_GPIOInit();
 80002fc:	f7ff ff6c 	bl	80001d8 <SPI2_GPIOInit>
	SPI2_Init();
 8000300:	f7ff ff98 	bl	8000234 <SPI2_Init>
	//enable SPI2 peripheral
	SPI_SSOEConfig(SPI2, ENABLE);
 8000304:	2101      	movs	r1, #1
 8000306:	48cf      	ldr	r0, [pc, #828]	@ (8000644 <main+0x358>)
 8000308:	f000 fdac 	bl	8000e64 <SPI_SSOEConfig>
	while(1){
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_No_0) );
 800030c:	bf00      	nop
 800030e:	2100      	movs	r1, #0
 8000310:	48cd      	ldr	r0, [pc, #820]	@ (8000648 <main+0x35c>)
 8000312:	f000 fc47 	bl	8000ba4 <GPIO_ReadFromInputPin>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d0f8      	beq.n	800030e <main+0x22>
		delay();
 800031c:	f7ff ffc0 	bl	80002a0 <delay>
		SPI_PeripheralControl(SPI2, ENABLE);
 8000320:	2101      	movs	r1, #1
 8000322:	48c8      	ldr	r0, [pc, #800]	@ (8000644 <main+0x358>)
 8000324:	f000 fd83 	bl	8000e2e <SPI_PeripheralControl>
		//first send command 1 CMD_LED_CTRL
		uint8_t commandcode = COMMAND_LED_CTRL;
 8000328:	2350      	movs	r3, #80	@ 0x50
 800032a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
		uint8_t ackbyte;
		uint8_t args[2];
		SPI_SendData(SPI2, &commandcode, 1);
 800032e:	f107 0331 	add.w	r3, r7, #49	@ 0x31
 8000332:	2201      	movs	r2, #1
 8000334:	4619      	mov	r1, r3
 8000336:	48c3      	ldr	r0, [pc, #780]	@ (8000644 <main+0x358>)
 8000338:	f000 fd0b 	bl	8000d52 <SPI_SendData>
		//do dummy read since everytime master sends one byte it gets one byte back
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 800033c:	f107 0332 	add.w	r3, r7, #50	@ 0x32
 8000340:	2201      	movs	r2, #1
 8000342:	4619      	mov	r1, r3
 8000344:	48bf      	ldr	r0, [pc, #764]	@ (8000644 <main+0x358>)
 8000346:	f000 fd3b 	bl	8000dc0 <SPI_ReceiveData>
		//send some dummy bits (1byte) to fetch response from slave
		SPI_SendData(SPI2, &dummy_write, 1);
 800034a:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 800034e:	2201      	movs	r2, #1
 8000350:	4619      	mov	r1, r3
 8000352:	48bc      	ldr	r0, [pc, #752]	@ (8000644 <main+0x358>)
 8000354:	f000 fcfd 	bl	8000d52 <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000358:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800035c:	2201      	movs	r2, #1
 800035e:	4619      	mov	r1, r3
 8000360:	48b8      	ldr	r0, [pc, #736]	@ (8000644 <main+0x358>)
 8000362:	f000 fd2d 	bl	8000dc0 <SPI_ReceiveData>
		if(SPI_verifyresponse(ackbyte)){
 8000366:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800036a:	4618      	mov	r0, r3
 800036c:	f7ff ffae 	bl	80002cc <SPI_verifyresponse>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d013      	beq.n	800039e <main+0xb2>
			//send arguments(pin num,val)
			args[0] = LED_PIN;
 8000376:	2309      	movs	r3, #9
 8000378:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			args[1] = LED_ON;
 800037c:	2301      	movs	r3, #1
 800037e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
			SPI_SendData(SPI2, args, 2);
 8000382:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000386:	2202      	movs	r2, #2
 8000388:	4619      	mov	r1, r3
 800038a:	48ae      	ldr	r0, [pc, #696]	@ (8000644 <main+0x358>)
 800038c:	f000 fce1 	bl	8000d52 <SPI_SendData>
			SPI_ReceiveData(SPI2, args, 2);
 8000390:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000394:	2202      	movs	r2, #2
 8000396:	4619      	mov	r1, r3
 8000398:	48aa      	ldr	r0, [pc, #680]	@ (8000644 <main+0x358>)
 800039a:	f000 fd11 	bl	8000dc0 <SPI_ReceiveData>

		}
		//Command sensor read
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_No_0) );
 800039e:	bf00      	nop
 80003a0:	2100      	movs	r1, #0
 80003a2:	48a9      	ldr	r0, [pc, #676]	@ (8000648 <main+0x35c>)
 80003a4:	f000 fbfe 	bl	8000ba4 <GPIO_ReadFromInputPin>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d0f8      	beq.n	80003a0 <main+0xb4>
		delay();
 80003ae:	f7ff ff77 	bl	80002a0 <delay>
		commandcode = COMMAND_SENSOR_READ;
 80003b2:	2351      	movs	r3, #81	@ 0x51
 80003b4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
		SPI_SendData(SPI2, &commandcode, 1);
 80003b8:	f107 0331 	add.w	r3, r7, #49	@ 0x31
 80003bc:	2201      	movs	r2, #1
 80003be:	4619      	mov	r1, r3
 80003c0:	48a0      	ldr	r0, [pc, #640]	@ (8000644 <main+0x358>)
 80003c2:	f000 fcc6 	bl	8000d52 <SPI_SendData>
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 80003c6:	f107 0332 	add.w	r3, r7, #50	@ 0x32
 80003ca:	2201      	movs	r2, #1
 80003cc:	4619      	mov	r1, r3
 80003ce:	489d      	ldr	r0, [pc, #628]	@ (8000644 <main+0x358>)
 80003d0:	f000 fcf6 	bl	8000dc0 <SPI_ReceiveData>
		//send some dummy bits (1byte) to fetch response from slave
		SPI_SendData(SPI2, &dummy_write, 1);
 80003d4:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 80003d8:	2201      	movs	r2, #1
 80003da:	4619      	mov	r1, r3
 80003dc:	4899      	ldr	r0, [pc, #612]	@ (8000644 <main+0x358>)
 80003de:	f000 fcb8 	bl	8000d52 <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 80003e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003e6:	2201      	movs	r2, #1
 80003e8:	4619      	mov	r1, r3
 80003ea:	4896      	ldr	r0, [pc, #600]	@ (8000644 <main+0x358>)
 80003ec:	f000 fce8 	bl	8000dc0 <SPI_ReceiveData>
		if(SPI_verifyresponse(ackbyte)){
 80003f0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff ff69 	bl	80002cc <SPI_verifyresponse>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d01f      	beq.n	8000440 <main+0x154>
			//send arguments(pin num,val)
			args[0] = ANALOG_PIN0;
 8000400:	2300      	movs	r3, #0
 8000402:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			SPI_SendData(SPI2, args, 1);
 8000406:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800040a:	2201      	movs	r2, #1
 800040c:	4619      	mov	r1, r3
 800040e:	488d      	ldr	r0, [pc, #564]	@ (8000644 <main+0x358>)
 8000410:	f000 fc9f 	bl	8000d52 <SPI_SendData>
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000414:	f107 0332 	add.w	r3, r7, #50	@ 0x32
 8000418:	2201      	movs	r2, #1
 800041a:	4619      	mov	r1, r3
 800041c:	4889      	ldr	r0, [pc, #548]	@ (8000644 <main+0x358>)
 800041e:	f000 fccf 	bl	8000dc0 <SPI_ReceiveData>
			delay();
 8000422:	f7ff ff3d 	bl	80002a0 <delay>
			SPI_SendData(SPI2, &dummy_write, 1);
 8000426:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 800042a:	2201      	movs	r2, #1
 800042c:	4619      	mov	r1, r3
 800042e:	4885      	ldr	r0, [pc, #532]	@ (8000644 <main+0x358>)
 8000430:	f000 fc8f 	bl	8000d52 <SPI_SendData>
			uint8_t analog_read;
			SPI_ReceiveData(SPI2, &analog_read, 1);
 8000434:	1dfb      	adds	r3, r7, #7
 8000436:	2201      	movs	r2, #1
 8000438:	4619      	mov	r1, r3
 800043a:	4882      	ldr	r0, [pc, #520]	@ (8000644 <main+0x358>)
 800043c:	f000 fcc0 	bl	8000dc0 <SPI_ReceiveData>

		}
		//COMMAND_LED_READ
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_No_0) );
 8000440:	bf00      	nop
 8000442:	2100      	movs	r1, #0
 8000444:	4880      	ldr	r0, [pc, #512]	@ (8000648 <main+0x35c>)
 8000446:	f000 fbad 	bl	8000ba4 <GPIO_ReadFromInputPin>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d0f8      	beq.n	8000442 <main+0x156>
		delay();
 8000450:	f7ff ff26 	bl	80002a0 <delay>
		commandcode = COMMAND_LED_READ;
 8000454:	2352      	movs	r3, #82	@ 0x52
 8000456:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
		SPI_SendData(SPI2, &commandcode, 1);
 800045a:	f107 0331 	add.w	r3, r7, #49	@ 0x31
 800045e:	2201      	movs	r2, #1
 8000460:	4619      	mov	r1, r3
 8000462:	4878      	ldr	r0, [pc, #480]	@ (8000644 <main+0x358>)
 8000464:	f000 fc75 	bl	8000d52 <SPI_SendData>
		//do dummy read since everytime master sends one byte it gets one byte back
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000468:	f107 0332 	add.w	r3, r7, #50	@ 0x32
 800046c:	2201      	movs	r2, #1
 800046e:	4619      	mov	r1, r3
 8000470:	4874      	ldr	r0, [pc, #464]	@ (8000644 <main+0x358>)
 8000472:	f000 fca5 	bl	8000dc0 <SPI_ReceiveData>
		//send some dummy bits (1byte) to fetch response from slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000476:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 800047a:	2201      	movs	r2, #1
 800047c:	4619      	mov	r1, r3
 800047e:	4871      	ldr	r0, [pc, #452]	@ (8000644 <main+0x358>)
 8000480:	f000 fc67 	bl	8000d52 <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000484:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000488:	2201      	movs	r2, #1
 800048a:	4619      	mov	r1, r3
 800048c:	486d      	ldr	r0, [pc, #436]	@ (8000644 <main+0x358>)
 800048e:	f000 fc97 	bl	8000dc0 <SPI_ReceiveData>
		if(SPI_verifyresponse(ackbyte)){
 8000492:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000496:	4618      	mov	r0, r3
 8000498:	f7ff ff18 	bl	80002cc <SPI_verifyresponse>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d01f      	beq.n	80004e2 <main+0x1f6>
			args[0] = LED_PIN;
 80004a2:	2309      	movs	r3, #9
 80004a4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			SPI_SendData(SPI2, args, 1);
 80004a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80004ac:	2201      	movs	r2, #1
 80004ae:	4619      	mov	r1, r3
 80004b0:	4864      	ldr	r0, [pc, #400]	@ (8000644 <main+0x358>)
 80004b2:	f000 fc4e 	bl	8000d52 <SPI_SendData>
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 80004b6:	f107 0332 	add.w	r3, r7, #50	@ 0x32
 80004ba:	2201      	movs	r2, #1
 80004bc:	4619      	mov	r1, r3
 80004be:	4861      	ldr	r0, [pc, #388]	@ (8000644 <main+0x358>)
 80004c0:	f000 fc7e 	bl	8000dc0 <SPI_ReceiveData>
			delay();
 80004c4:	f7ff feec 	bl	80002a0 <delay>
			SPI_SendData(SPI2, &dummy_write, 1);
 80004c8:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 80004cc:	2201      	movs	r2, #1
 80004ce:	4619      	mov	r1, r3
 80004d0:	485c      	ldr	r0, [pc, #368]	@ (8000644 <main+0x358>)
 80004d2:	f000 fc3e 	bl	8000d52 <SPI_SendData>
			uint8_t led_status;
			SPI_ReceiveData(SPI2, &led_status, 1);
 80004d6:	1dbb      	adds	r3, r7, #6
 80004d8:	2201      	movs	r2, #1
 80004da:	4619      	mov	r1, r3
 80004dc:	4859      	ldr	r0, [pc, #356]	@ (8000644 <main+0x358>)
 80004de:	f000 fc6f 	bl	8000dc0 <SPI_ReceiveData>

		}
		//COMMAND_PRINT
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_No_0) );
 80004e2:	bf00      	nop
 80004e4:	2100      	movs	r1, #0
 80004e6:	4858      	ldr	r0, [pc, #352]	@ (8000648 <main+0x35c>)
 80004e8:	f000 fb5c 	bl	8000ba4 <GPIO_ReadFromInputPin>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d0f8      	beq.n	80004e4 <main+0x1f8>
		delay();
 80004f2:	f7ff fed5 	bl	80002a0 <delay>
		commandcode = COMMAND_PRINT;
 80004f6:	2353      	movs	r3, #83	@ 0x53
 80004f8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
		SPI_SendData(SPI2, &commandcode, 1);
 80004fc:	f107 0331 	add.w	r3, r7, #49	@ 0x31
 8000500:	2201      	movs	r2, #1
 8000502:	4619      	mov	r1, r3
 8000504:	484f      	ldr	r0, [pc, #316]	@ (8000644 <main+0x358>)
 8000506:	f000 fc24 	bl	8000d52 <SPI_SendData>
		//do dummy read since everytime master sends one byte it gets one byte back
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 800050a:	f107 0332 	add.w	r3, r7, #50	@ 0x32
 800050e:	2201      	movs	r2, #1
 8000510:	4619      	mov	r1, r3
 8000512:	484c      	ldr	r0, [pc, #304]	@ (8000644 <main+0x358>)
 8000514:	f000 fc54 	bl	8000dc0 <SPI_ReceiveData>
		//send some dummy bits (1byte) to fetch response from slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000518:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 800051c:	2201      	movs	r2, #1
 800051e:	4619      	mov	r1, r3
 8000520:	4848      	ldr	r0, [pc, #288]	@ (8000644 <main+0x358>)
 8000522:	f000 fc16 	bl	8000d52 <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000526:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800052a:	2201      	movs	r2, #1
 800052c:	4619      	mov	r1, r3
 800052e:	4845      	ldr	r0, [pc, #276]	@ (8000644 <main+0x358>)
 8000530:	f000 fc46 	bl	8000dc0 <SPI_ReceiveData>

		uint8_t message[] = "Hello ! How are you??";
 8000534:	4b45      	ldr	r3, [pc, #276]	@ (800064c <main+0x360>)
 8000536:	f107 0414 	add.w	r4, r7, #20
 800053a:	461d      	mov	r5, r3
 800053c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000540:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000544:	6020      	str	r0, [r4, #0]
 8000546:	3404      	adds	r4, #4
 8000548:	8021      	strh	r1, [r4, #0]
		if(SPI_verifyresponse(ackbyte)){
 800054a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff febc 	bl	80002cc <SPI_verifyresponse>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d018      	beq.n	800058c <main+0x2a0>
			args[0] = strlen((char*)message);
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff fe32 	bl	80001c8 <strlen>
 8000564:	4603      	mov	r3, r0
 8000566:	b2db      	uxtb	r3, r3
 8000568:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			SPI_SendData(SPI2, args, 1);
 800056c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000570:	2201      	movs	r2, #1
 8000572:	4619      	mov	r1, r3
 8000574:	4833      	ldr	r0, [pc, #204]	@ (8000644 <main+0x358>)
 8000576:	f000 fbec 	bl	8000d52 <SPI_SendData>
			SPI_SendData(SPI2, message, args[0]);
 800057a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800057e:	461a      	mov	r2, r3
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	4619      	mov	r1, r3
 8000586:	482f      	ldr	r0, [pc, #188]	@ (8000644 <main+0x358>)
 8000588:	f000 fbe3 	bl	8000d52 <SPI_SendData>

		}
		//COMMAND_ID_READ
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_No_0) );
 800058c:	bf00      	nop
 800058e:	2100      	movs	r1, #0
 8000590:	482d      	ldr	r0, [pc, #180]	@ (8000648 <main+0x35c>)
 8000592:	f000 fb07 	bl	8000ba4 <GPIO_ReadFromInputPin>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d0f8      	beq.n	800058e <main+0x2a2>
		delay();
 800059c:	f7ff fe80 	bl	80002a0 <delay>
		commandcode = COMMAND_ID_READ;
 80005a0:	2354      	movs	r3, #84	@ 0x54
 80005a2:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
		SPI_SendData(SPI2, &commandcode, 1);
 80005a6:	f107 0331 	add.w	r3, r7, #49	@ 0x31
 80005aa:	2201      	movs	r2, #1
 80005ac:	4619      	mov	r1, r3
 80005ae:	4825      	ldr	r0, [pc, #148]	@ (8000644 <main+0x358>)
 80005b0:	f000 fbcf 	bl	8000d52 <SPI_SendData>
		//do dummy read since everytime master sends one byte it gets one byte back
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 80005b4:	f107 0332 	add.w	r3, r7, #50	@ 0x32
 80005b8:	2201      	movs	r2, #1
 80005ba:	4619      	mov	r1, r3
 80005bc:	4821      	ldr	r0, [pc, #132]	@ (8000644 <main+0x358>)
 80005be:	f000 fbff 	bl	8000dc0 <SPI_ReceiveData>
		//send some dummy bits (1byte) to fetch response from slave
		SPI_SendData(SPI2, &dummy_write, 1);
 80005c2:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 80005c6:	2201      	movs	r2, #1
 80005c8:	4619      	mov	r1, r3
 80005ca:	481e      	ldr	r0, [pc, #120]	@ (8000644 <main+0x358>)
 80005cc:	f000 fbc1 	bl	8000d52 <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 80005d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80005d4:	2201      	movs	r2, #1
 80005d6:	4619      	mov	r1, r3
 80005d8:	481a      	ldr	r0, [pc, #104]	@ (8000644 <main+0x358>)
 80005da:	f000 fbf1 	bl	8000dc0 <SPI_ReceiveData>

		uint8_t id[10];
		uint32_t i = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	637b      	str	r3, [r7, #52]	@ 0x34
		if(SPI_verifyresponse(ackbyte)){
 80005e2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff fe70 	bl	80002cc <SPI_verifyresponse>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d01a      	beq.n	8000628 <main+0x33c>
			//read 10 bytes of id
			for(i=0;i<10;i++){
 80005f2:	2300      	movs	r3, #0
 80005f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80005f6:	e012      	b.n	800061e <main+0x332>
				SPI_SendData(SPI2, &dummy_read, 1);
 80005f8:	f107 0332 	add.w	r3, r7, #50	@ 0x32
 80005fc:	2201      	movs	r2, #1
 80005fe:	4619      	mov	r1, r3
 8000600:	4810      	ldr	r0, [pc, #64]	@ (8000644 <main+0x358>)
 8000602:	f000 fba6 	bl	8000d52 <SPI_SendData>
				SPI_ReceiveData(SPI2, &id[i], 1);
 8000606:	f107 0208 	add.w	r2, r7, #8
 800060a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800060c:	4413      	add	r3, r2
 800060e:	2201      	movs	r2, #1
 8000610:	4619      	mov	r1, r3
 8000612:	480c      	ldr	r0, [pc, #48]	@ (8000644 <main+0x358>)
 8000614:	f000 fbd4 	bl	8000dc0 <SPI_ReceiveData>
			for(i=0;i<10;i++){
 8000618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800061a:	3301      	adds	r3, #1
 800061c:	637b      	str	r3, [r7, #52]	@ 0x34
 800061e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000620:	2b09      	cmp	r3, #9
 8000622:	d9e9      	bls.n	80005f8 <main+0x30c>
			}
			id[11] = '\0';
 8000624:	2300      	movs	r3, #0
 8000626:	74fb      	strb	r3, [r7, #19]
		}
		//have to check if SPI is busy
		while(SPI_GetFlagStatus(SPI2, SPI_BSY_FLAG));
 8000628:	bf00      	nop
 800062a:	2180      	movs	r1, #128	@ 0x80
 800062c:	4805      	ldr	r0, [pc, #20]	@ (8000644 <main+0x358>)
 800062e:	f000 fb7d 	bl	8000d2c <SPI_GetFlagStatus>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d1f8      	bne.n	800062a <main+0x33e>
		//disbale
		SPI_PeripheralControl(SPI2, DISABLE);
 8000638:	2100      	movs	r1, #0
 800063a:	4802      	ldr	r0, [pc, #8]	@ (8000644 <main+0x358>)
 800063c:	f000 fbf7 	bl	8000e2e <SPI_PeripheralControl>
	while(1){
 8000640:	e664      	b.n	800030c <main+0x20>
 8000642:	bf00      	nop
 8000644:	40003800 	.word	0x40003800
 8000648:	40020000 	.word	0x40020000
 800064c:	08000efc 	.word	0x08000efc

08000650 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000650:	480d      	ldr	r0, [pc, #52]	@ (8000688 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000652:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000654:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000658:	480c      	ldr	r0, [pc, #48]	@ (800068c <LoopForever+0x6>)
  ldr r1, =_edata
 800065a:	490d      	ldr	r1, [pc, #52]	@ (8000690 <LoopForever+0xa>)
  ldr r2, =_sidata
 800065c:	4a0d      	ldr	r2, [pc, #52]	@ (8000694 <LoopForever+0xe>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000660:	e002      	b.n	8000668 <LoopCopyDataInit>

08000662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000666:	3304      	adds	r3, #4

08000668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800066c:	d3f9      	bcc.n	8000662 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066e:	4a0a      	ldr	r2, [pc, #40]	@ (8000698 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000670:	4c0a      	ldr	r4, [pc, #40]	@ (800069c <LoopForever+0x16>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000674:	e001      	b.n	800067a <LoopFillZerobss>

08000676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000678:	3204      	adds	r2, #4

0800067a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800067c:	d3fb      	bcc.n	8000676 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800067e:	f000 fc0d 	bl	8000e9c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000682:	f7ff fe33 	bl	80002ec <main>

08000686 <LoopForever>:

LoopForever:
  b LoopForever
 8000686:	e7fe      	b.n	8000686 <LoopForever>
  ldr   r0, =_estack
 8000688:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800068c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000690:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000694:	08000f24 	.word	0x08000f24
  ldr r2, =_sbss
 8000698:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800069c:	2000001c 	.word	0x2000001c

080006a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a0:	e7fe      	b.n	80006a0 <ADC_IRQHandler>
	...

080006a4 <GPIO_Init>:
	* @param  *pGPIOHandle : pointer to the GPIO handle struct
	* @param
	* @param
	* @return None
	*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	//enable peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2101      	movs	r1, #1
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 f98e 	bl	80009d4 <GPIO_PeriClockControl>
		//1 configure the mode of GPIO pin
	uint32_t temp = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	795b      	ldrb	r3, [r3, #5]
 80006c0:	2b03      	cmp	r3, #3
 80006c2:	d822      	bhi.n	800070a <GPIO_Init+0x66>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	795b      	ldrb	r3, [r3, #5]
 80006c8:	461a      	mov	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	791b      	ldrb	r3, [r3, #4]
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	fa02 f303 	lsl.w	r3, r2, r3
 80006d4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3<<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	791b      	ldrb	r3, [r3, #4]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	2103      	movs	r1, #3
 80006e4:	fa01 f303 	lsl.w	r3, r1, r3
 80006e8:	43db      	mvns	r3, r3
 80006ea:	4619      	mov	r1, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	400a      	ands	r2, r1
 80006f2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	6819      	ldr	r1, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	697a      	ldr	r2, [r7, #20]
 8000700:	430a      	orrs	r2, r1
 8000702:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
 8000708:	e0c1      	b.n	800088e <GPIO_Init+0x1ea>
	}
	else{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	795b      	ldrb	r3, [r3, #5]
 800070e:	2b04      	cmp	r3, #4
 8000710:	d117      	bne.n	8000742 <GPIO_Init+0x9e>
			//1. configure falling edge reg
			EXTI->FTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000712:	4b47      	ldr	r3, [pc, #284]	@ (8000830 <GPIO_Init+0x18c>)
 8000714:	68db      	ldr	r3, [r3, #12]
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	7912      	ldrb	r2, [r2, #4]
 800071a:	4611      	mov	r1, r2
 800071c:	2201      	movs	r2, #1
 800071e:	408a      	lsls	r2, r1
 8000720:	4611      	mov	r1, r2
 8000722:	4a43      	ldr	r2, [pc, #268]	@ (8000830 <GPIO_Init+0x18c>)
 8000724:	430b      	orrs	r3, r1
 8000726:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000728:	4b41      	ldr	r3, [pc, #260]	@ (8000830 <GPIO_Init+0x18c>)
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	7912      	ldrb	r2, [r2, #4]
 8000730:	4611      	mov	r1, r2
 8000732:	2201      	movs	r2, #1
 8000734:	408a      	lsls	r2, r1
 8000736:	43d2      	mvns	r2, r2
 8000738:	4611      	mov	r1, r2
 800073a:	4a3d      	ldr	r2, [pc, #244]	@ (8000830 <GPIO_Init+0x18c>)
 800073c:	400b      	ands	r3, r1
 800073e:	6093      	str	r3, [r2, #8]
 8000740:	e035      	b.n	80007ae <GPIO_Init+0x10a>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	795b      	ldrb	r3, [r3, #5]
 8000746:	2b05      	cmp	r3, #5
 8000748:	d117      	bne.n	800077a <GPIO_Init+0xd6>
			EXTI->FTSR &= ~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800074a:	4b39      	ldr	r3, [pc, #228]	@ (8000830 <GPIO_Init+0x18c>)
 800074c:	68db      	ldr	r3, [r3, #12]
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	7912      	ldrb	r2, [r2, #4]
 8000752:	4611      	mov	r1, r2
 8000754:	2201      	movs	r2, #1
 8000756:	408a      	lsls	r2, r1
 8000758:	43d2      	mvns	r2, r2
 800075a:	4611      	mov	r1, r2
 800075c:	4a34      	ldr	r2, [pc, #208]	@ (8000830 <GPIO_Init+0x18c>)
 800075e:	400b      	ands	r3, r1
 8000760:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000762:	4b33      	ldr	r3, [pc, #204]	@ (8000830 <GPIO_Init+0x18c>)
 8000764:	689b      	ldr	r3, [r3, #8]
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	7912      	ldrb	r2, [r2, #4]
 800076a:	4611      	mov	r1, r2
 800076c:	2201      	movs	r2, #1
 800076e:	408a      	lsls	r2, r1
 8000770:	4611      	mov	r1, r2
 8000772:	4a2f      	ldr	r2, [pc, #188]	@ (8000830 <GPIO_Init+0x18c>)
 8000774:	430b      	orrs	r3, r1
 8000776:	6093      	str	r3, [r2, #8]
 8000778:	e019      	b.n	80007ae <GPIO_Init+0x10a>

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	795b      	ldrb	r3, [r3, #5]
 800077e:	2b06      	cmp	r3, #6
 8000780:	d115      	bne.n	80007ae <GPIO_Init+0x10a>
			EXTI->FTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000782:	4b2b      	ldr	r3, [pc, #172]	@ (8000830 <GPIO_Init+0x18c>)
 8000784:	68db      	ldr	r3, [r3, #12]
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	7912      	ldrb	r2, [r2, #4]
 800078a:	4611      	mov	r1, r2
 800078c:	2201      	movs	r2, #1
 800078e:	408a      	lsls	r2, r1
 8000790:	4611      	mov	r1, r2
 8000792:	4a27      	ldr	r2, [pc, #156]	@ (8000830 <GPIO_Init+0x18c>)
 8000794:	430b      	orrs	r3, r1
 8000796:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000798:	4b25      	ldr	r3, [pc, #148]	@ (8000830 <GPIO_Init+0x18c>)
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	7912      	ldrb	r2, [r2, #4]
 80007a0:	4611      	mov	r1, r2
 80007a2:	2201      	movs	r2, #1
 80007a4:	408a      	lsls	r2, r1
 80007a6:	4611      	mov	r1, r2
 80007a8:	4a21      	ldr	r2, [pc, #132]	@ (8000830 <GPIO_Init+0x18c>)
 80007aa:	430b      	orrs	r3, r1
 80007ac:	6093      	str	r3, [r2, #8]

		}
		//Configure GPIO port slection in SYSCFG
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	791b      	ldrb	r3, [r3, #4]
 80007b2:	089b      	lsrs	r3, r3, #2
 80007b4:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	791b      	ldrb	r3, [r3, #4]
 80007ba:	f003 0303 	and.w	r3, r3, #3
 80007be:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000834 <GPIO_Init+0x190>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d044      	beq.n	8000854 <GPIO_Init+0x1b0>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a1a      	ldr	r2, [pc, #104]	@ (8000838 <GPIO_Init+0x194>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d02b      	beq.n	800082c <GPIO_Init+0x188>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a18      	ldr	r2, [pc, #96]	@ (800083c <GPIO_Init+0x198>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d024      	beq.n	8000828 <GPIO_Init+0x184>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a17      	ldr	r2, [pc, #92]	@ (8000840 <GPIO_Init+0x19c>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d01d      	beq.n	8000824 <GPIO_Init+0x180>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a15      	ldr	r2, [pc, #84]	@ (8000844 <GPIO_Init+0x1a0>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d016      	beq.n	8000820 <GPIO_Init+0x17c>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a14      	ldr	r2, [pc, #80]	@ (8000848 <GPIO_Init+0x1a4>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d00f      	beq.n	800081c <GPIO_Init+0x178>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a12      	ldr	r2, [pc, #72]	@ (800084c <GPIO_Init+0x1a8>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d008      	beq.n	8000818 <GPIO_Init+0x174>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a11      	ldr	r2, [pc, #68]	@ (8000850 <GPIO_Init+0x1ac>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d101      	bne.n	8000814 <GPIO_Init+0x170>
 8000810:	2307      	movs	r3, #7
 8000812:	e020      	b.n	8000856 <GPIO_Init+0x1b2>
 8000814:	2300      	movs	r3, #0
 8000816:	e01e      	b.n	8000856 <GPIO_Init+0x1b2>
 8000818:	2306      	movs	r3, #6
 800081a:	e01c      	b.n	8000856 <GPIO_Init+0x1b2>
 800081c:	2305      	movs	r3, #5
 800081e:	e01a      	b.n	8000856 <GPIO_Init+0x1b2>
 8000820:	2304      	movs	r3, #4
 8000822:	e018      	b.n	8000856 <GPIO_Init+0x1b2>
 8000824:	2303      	movs	r3, #3
 8000826:	e016      	b.n	8000856 <GPIO_Init+0x1b2>
 8000828:	2302      	movs	r3, #2
 800082a:	e014      	b.n	8000856 <GPIO_Init+0x1b2>
 800082c:	2301      	movs	r3, #1
 800082e:	e012      	b.n	8000856 <GPIO_Init+0x1b2>
 8000830:	40013c00 	.word	0x40013c00
 8000834:	40020000 	.word	0x40020000
 8000838:	40020400 	.word	0x40020400
 800083c:	40020800 	.word	0x40020800
 8000840:	40020c00 	.word	0x40020c00
 8000844:	40021000 	.word	0x40021000
 8000848:	40021400 	.word	0x40021400
 800084c:	40021800 	.word	0x40021800
 8000850:	40021c00 	.word	0x40021c00
 8000854:	2300      	movs	r3, #0
 8000856:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000858:	4b5b      	ldr	r3, [pc, #364]	@ (80009c8 <GPIO_Init+0x324>)
 800085a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800085c:	4a5a      	ldr	r2, [pc, #360]	@ (80009c8 <GPIO_Init+0x324>)
 800085e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000862:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode<<(temp2*4);
 8000864:	7c7a      	ldrb	r2, [r7, #17]
 8000866:	7cbb      	ldrb	r3, [r7, #18]
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	fa02 f103 	lsl.w	r1, r2, r3
 800086e:	4a57      	ldr	r2, [pc, #348]	@ (80009cc <GPIO_Init+0x328>)
 8000870:	7cfb      	ldrb	r3, [r7, #19]
 8000872:	3302      	adds	r3, #2
 8000874:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//enable interrupt delievery in IMR
		EXTI->IMR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000878:	4b55      	ldr	r3, [pc, #340]	@ (80009d0 <GPIO_Init+0x32c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	7912      	ldrb	r2, [r2, #4]
 8000880:	4611      	mov	r1, r2
 8000882:	2201      	movs	r2, #1
 8000884:	408a      	lsls	r2, r1
 8000886:	4611      	mov	r1, r2
 8000888:	4a51      	ldr	r2, [pc, #324]	@ (80009d0 <GPIO_Init+0x32c>)
 800088a:	430b      	orrs	r3, r1
 800088c:	6013      	str	r3, [r2, #0]
	}

		//2 configure the speed of GPIO pin
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	799b      	ldrb	r3, [r3, #6]
 8000892:	461a      	mov	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	791b      	ldrb	r3, [r3, #4]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3<<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	689a      	ldr	r2, [r3, #8]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	2103      	movs	r1, #3
 80008ae:	fa01 f303 	lsl.w	r3, r1, r3
 80008b2:	43db      	mvns	r3, r3
 80008b4:	4619      	mov	r1, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	400a      	ands	r2, r1
 80008bc:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	6899      	ldr	r1, [r3, #8]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	697a      	ldr	r2, [r7, #20]
 80008ca:	430a      	orrs	r2, r1
 80008cc:	609a      	str	r2, [r3, #8]
	temp = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]

		//3 configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	79db      	ldrb	r3, [r3, #7]
 80008d6:	461a      	mov	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	791b      	ldrb	r3, [r3, #4]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3<<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	68da      	ldr	r2, [r3, #12]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	791b      	ldrb	r3, [r3, #4]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	2103      	movs	r1, #3
 80008f2:	fa01 f303 	lsl.w	r3, r1, r3
 80008f6:	43db      	mvns	r3, r3
 80008f8:	4619      	mov	r1, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	400a      	ands	r2, r1
 8000900:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	68d9      	ldr	r1, [r3, #12]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	430a      	orrs	r2, r1
 8000910:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
		//4 configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	7a1b      	ldrb	r3, [r3, #8]
 800091a:	461a      	mov	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	791b      	ldrb	r3, [r3, #4]
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1<<(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	685a      	ldr	r2, [r3, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	791b      	ldrb	r3, [r3, #4]
 8000930:	4619      	mov	r1, r3
 8000932:	2301      	movs	r3, #1
 8000934:	408b      	lsls	r3, r1
 8000936:	43db      	mvns	r3, r3
 8000938:	4619      	mov	r1, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	400a      	ands	r2, r1
 8000940:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	6859      	ldr	r1, [r3, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	430a      	orrs	r2, r1
 8000950:	605a      	str	r2, [r3, #4]
		//5 configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	795b      	ldrb	r3, [r3, #5]
 8000956:	2b02      	cmp	r3, #2
 8000958:	d131      	bne.n	80009be <GPIO_Init+0x31a>
		uint8_t temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)/8;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	791b      	ldrb	r3, [r3, #4]
 800095e:	08db      	lsrs	r3, r3, #3
 8000960:	743b      	strb	r3, [r7, #16]
		uint8_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%8;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	791b      	ldrb	r3, [r3, #4]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~((0xF << (4 * temp2)));
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	7c3a      	ldrb	r2, [r7, #16]
 8000972:	3208      	adds	r2, #8
 8000974:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	220f      	movs	r2, #15
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	4618      	mov	r0, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	7c3a      	ldrb	r2, [r7, #16]
 800098c:	4001      	ands	r1, r0
 800098e:	3208      	adds	r2, #8
 8000990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	7c3a      	ldrb	r2, [r7, #16]
 800099a:	3208      	adds	r2, #8
 800099c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	7a5b      	ldrb	r3, [r3, #9]
 80009a4:	461a      	mov	r2, r3
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	7c3a      	ldrb	r2, [r7, #16]
 80009b6:	4301      	orrs	r1, r0
 80009b8:	3208      	adds	r2, #8
 80009ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80009be:	bf00      	nop
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40013800 	.word	0x40013800
 80009d0:	40013c00 	.word	0x40013c00

080009d4 <GPIO_PeriClockControl>:
	* @param  *pGPIOx : GPIO peripheral base address
	* @param  EnorDi  : ENABLE(1) or DISABLE(0) macros
	* @param
	* @return None
	*/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	70fb      	strb	r3, [r7, #3]
	if(EnorDi== ENABLE){
 80009e0:	78fb      	ldrb	r3, [r7, #3]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d162      	bne.n	8000aac <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA){
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a64      	ldr	r2, [pc, #400]	@ (8000b7c <GPIO_PeriClockControl+0x1a8>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d106      	bne.n	80009fc <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80009ee:	4b64      	ldr	r3, [pc, #400]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a63      	ldr	r2, [pc, #396]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
		else if (pGPIOx == GPIOI){
			GPIOI_PCLK_DI();
		}
	}

}
 80009fa:	e0b9      	b.n	8000b70 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB){
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a61      	ldr	r2, [pc, #388]	@ (8000b84 <GPIO_PeriClockControl+0x1b0>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d106      	bne.n	8000a12 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000a04:	4b5e      	ldr	r3, [pc, #376]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a08:	4a5d      	ldr	r2, [pc, #372]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000a0a:	f043 0302 	orr.w	r3, r3, #2
 8000a0e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a10:	e0ae      	b.n	8000b70 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC){
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a5c      	ldr	r2, [pc, #368]	@ (8000b88 <GPIO_PeriClockControl+0x1b4>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d106      	bne.n	8000a28 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000a1a:	4b59      	ldr	r3, [pc, #356]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a58      	ldr	r2, [pc, #352]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a26:	e0a3      	b.n	8000b70 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD){
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a58      	ldr	r2, [pc, #352]	@ (8000b8c <GPIO_PeriClockControl+0x1b8>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d106      	bne.n	8000a3e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000a30:	4b53      	ldr	r3, [pc, #332]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a34:	4a52      	ldr	r2, [pc, #328]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000a36:	f043 0308 	orr.w	r3, r3, #8
 8000a3a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a3c:	e098      	b.n	8000b70 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE){
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a53      	ldr	r2, [pc, #332]	@ (8000b90 <GPIO_PeriClockControl+0x1bc>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d106      	bne.n	8000a54 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000a46:	4b4e      	ldr	r3, [pc, #312]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a4d      	ldr	r2, [pc, #308]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000a4c:	f043 0310 	orr.w	r3, r3, #16
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a52:	e08d      	b.n	8000b70 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF){
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a4f      	ldr	r2, [pc, #316]	@ (8000b94 <GPIO_PeriClockControl+0x1c0>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d106      	bne.n	8000a6a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000a5c:	4b48      	ldr	r3, [pc, #288]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a60:	4a47      	ldr	r2, [pc, #284]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000a62:	f043 0320 	orr.w	r3, r3, #32
 8000a66:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a68:	e082      	b.n	8000b70 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG){
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a4a      	ldr	r2, [pc, #296]	@ (8000b98 <GPIO_PeriClockControl+0x1c4>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d106      	bne.n	8000a80 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000a72:	4b43      	ldr	r3, [pc, #268]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a42      	ldr	r2, [pc, #264]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000a78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a7e:	e077      	b.n	8000b70 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH){
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a46      	ldr	r2, [pc, #280]	@ (8000b9c <GPIO_PeriClockControl+0x1c8>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d106      	bne.n	8000a96 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000a88:	4b3d      	ldr	r3, [pc, #244]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8c:	4a3c      	ldr	r2, [pc, #240]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a92:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a94:	e06c      	b.n	8000b70 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI){
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a41      	ldr	r2, [pc, #260]	@ (8000ba0 <GPIO_PeriClockControl+0x1cc>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d168      	bne.n	8000b70 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000a9e:	4b38      	ldr	r3, [pc, #224]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a37      	ldr	r2, [pc, #220]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000aa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000aaa:	e061      	b.n	8000b70 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA){
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a33      	ldr	r2, [pc, #204]	@ (8000b7c <GPIO_PeriClockControl+0x1a8>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d106      	bne.n	8000ac2 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000ab4:	4b32      	ldr	r3, [pc, #200]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab8:	4a31      	ldr	r2, [pc, #196]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000aba:	f023 0301 	bic.w	r3, r3, #1
 8000abe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ac0:	e056      	b.n	8000b70 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB){
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a2f      	ldr	r2, [pc, #188]	@ (8000b84 <GPIO_PeriClockControl+0x1b0>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d106      	bne.n	8000ad8 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000aca:	4b2d      	ldr	r3, [pc, #180]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	4a2c      	ldr	r2, [pc, #176]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000ad0:	f023 0302 	bic.w	r3, r3, #2
 8000ad4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ad6:	e04b      	b.n	8000b70 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC){
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a2b      	ldr	r2, [pc, #172]	@ (8000b88 <GPIO_PeriClockControl+0x1b4>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d106      	bne.n	8000aee <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000ae0:	4b27      	ldr	r3, [pc, #156]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae4:	4a26      	ldr	r2, [pc, #152]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000ae6:	f023 0304 	bic.w	r3, r3, #4
 8000aea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000aec:	e040      	b.n	8000b70 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD){
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a26      	ldr	r2, [pc, #152]	@ (8000b8c <GPIO_PeriClockControl+0x1b8>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d106      	bne.n	8000b04 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000af6:	4b22      	ldr	r3, [pc, #136]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a21      	ldr	r2, [pc, #132]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000afc:	f023 0308 	bic.w	r3, r3, #8
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b02:	e035      	b.n	8000b70 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE){
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a22      	ldr	r2, [pc, #136]	@ (8000b90 <GPIO_PeriClockControl+0x1bc>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d106      	bne.n	8000b1a <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b10:	4a1b      	ldr	r2, [pc, #108]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000b12:	f023 0310 	bic.w	r3, r3, #16
 8000b16:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b18:	e02a      	b.n	8000b70 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF){
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8000b94 <GPIO_PeriClockControl+0x1c0>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d106      	bne.n	8000b30 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000b22:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a16      	ldr	r2, [pc, #88]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000b28:	f023 0320 	bic.w	r3, r3, #32
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b2e:	e01f      	b.n	8000b70 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG){
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a19      	ldr	r2, [pc, #100]	@ (8000b98 <GPIO_PeriClockControl+0x1c4>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d106      	bne.n	8000b46 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000b38:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3c:	4a10      	ldr	r2, [pc, #64]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000b3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000b42:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b44:	e014      	b.n	8000b70 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH){
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a14      	ldr	r2, [pc, #80]	@ (8000b9c <GPIO_PeriClockControl+0x1c8>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d106      	bne.n	8000b5c <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	4a0b      	ldr	r2, [pc, #44]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000b54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000b58:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b5a:	e009      	b.n	8000b70 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI){
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a10      	ldr	r2, [pc, #64]	@ (8000ba0 <GPIO_PeriClockControl+0x1cc>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d105      	bne.n	8000b70 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b68:	4a05      	ldr	r2, [pc, #20]	@ (8000b80 <GPIO_PeriClockControl+0x1ac>)
 8000b6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000b6e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40020000 	.word	0x40020000
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020400 	.word	0x40020400
 8000b88:	40020800 	.word	0x40020800
 8000b8c:	40020c00 	.word	0x40020c00
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40021400 	.word	0x40021400
 8000b98:	40021800 	.word	0x40021800
 8000b9c:	40021c00 	.word	0x40021c00
 8000ba0:	40022000 	.word	0x40022000

08000ba4 <GPIO_ReadFromInputPin>:
	* @param  *pGPIOx : GPIO peripheral base address
	* @param  PinNum  : pin number that you want to read from
	* @param
	* @return : uint8_t data from GPIO pin (0 if low, 1 if high)
	*/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNum){
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNum) & 0x00000001);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	691a      	ldr	r2, [r3, #16]
 8000bb4:	78fb      	ldrb	r3, [r7, #3]
 8000bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]
	return value;
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]

}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
	...

08000bd0 <SPI_PeriClockControl>:
	* @param  *pSPIx : pointer to the SPI base address
	* @param  EnorDi : takes either ENABLE(1) or DISABLE(0)to enable or disable clock
	* @param
	* @return None
	*/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	70fb      	strb	r3, [r7, #3]
	if(EnorDi== ENABLE){
 8000bdc:	78fb      	ldrb	r3, [r7, #3]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d120      	bne.n	8000c24 <SPI_PeriClockControl+0x54>
			if(pSPIx == SPI1){
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a22      	ldr	r2, [pc, #136]	@ (8000c70 <SPI_PeriClockControl+0xa0>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d106      	bne.n	8000bf8 <SPI_PeriClockControl+0x28>
				SPI1_PCLK_EN();
 8000bea:	4b22      	ldr	r3, [pc, #136]	@ (8000c74 <SPI_PeriClockControl+0xa4>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	4a21      	ldr	r2, [pc, #132]	@ (8000c74 <SPI_PeriClockControl+0xa4>)
 8000bf0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bf4:	6453      	str	r3, [r2, #68]	@ 0x44
						else if (pSPIx == SPI3){
							SPI3_PCLK_DI();
						}
		}

}
 8000bf6:	e035      	b.n	8000c64 <SPI_PeriClockControl+0x94>
			else if(pSPIx == SPI2){
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a1f      	ldr	r2, [pc, #124]	@ (8000c78 <SPI_PeriClockControl+0xa8>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d106      	bne.n	8000c0e <SPI_PeriClockControl+0x3e>
				SPI2_PCLK_EN();
 8000c00:	4b1c      	ldr	r3, [pc, #112]	@ (8000c74 <SPI_PeriClockControl+0xa4>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c04:	4a1b      	ldr	r2, [pc, #108]	@ (8000c74 <SPI_PeriClockControl+0xa4>)
 8000c06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c0a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c0c:	e02a      	b.n	8000c64 <SPI_PeriClockControl+0x94>
			else if (pSPIx == SPI3){
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a1a      	ldr	r2, [pc, #104]	@ (8000c7c <SPI_PeriClockControl+0xac>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d126      	bne.n	8000c64 <SPI_PeriClockControl+0x94>
				SPI3_PCLK_EN();
 8000c16:	4b17      	ldr	r3, [pc, #92]	@ (8000c74 <SPI_PeriClockControl+0xa4>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1a:	4a16      	ldr	r2, [pc, #88]	@ (8000c74 <SPI_PeriClockControl+0xa4>)
 8000c1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c20:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c22:	e01f      	b.n	8000c64 <SPI_PeriClockControl+0x94>
			if(pSPIx == SPI1){
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a12      	ldr	r2, [pc, #72]	@ (8000c70 <SPI_PeriClockControl+0xa0>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d106      	bne.n	8000c3a <SPI_PeriClockControl+0x6a>
							SPI1_PCLK_DI();
 8000c2c:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <SPI_PeriClockControl+0xa4>)
 8000c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c30:	4a10      	ldr	r2, [pc, #64]	@ (8000c74 <SPI_PeriClockControl+0xa4>)
 8000c32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c36:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000c38:	e014      	b.n	8000c64 <SPI_PeriClockControl+0x94>
					else if(pSPIx == SPI2){
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a0e      	ldr	r2, [pc, #56]	@ (8000c78 <SPI_PeriClockControl+0xa8>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d106      	bne.n	8000c50 <SPI_PeriClockControl+0x80>
							SPI2_PCLK_DI();
 8000c42:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <SPI_PeriClockControl+0xa4>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c46:	4a0b      	ldr	r2, [pc, #44]	@ (8000c74 <SPI_PeriClockControl+0xa4>)
 8000c48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000c4c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c4e:	e009      	b.n	8000c64 <SPI_PeriClockControl+0x94>
						else if (pSPIx == SPI3){
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <SPI_PeriClockControl+0xac>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d105      	bne.n	8000c64 <SPI_PeriClockControl+0x94>
							SPI3_PCLK_DI();
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <SPI_PeriClockControl+0xa4>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5c:	4a05      	ldr	r2, [pc, #20]	@ (8000c74 <SPI_PeriClockControl+0xa4>)
 8000c5e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000c62:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40013000 	.word	0x40013000
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40003800 	.word	0x40003800
 8000c7c:	40003c00 	.word	0x40003c00

08000c80 <SPI_Init>:
	* @param  *pSPIHandle : pointer to the GPIO handle struct
	* @param
	* @param
	* @return None
	*/
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	//enable SPI clock
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ff9e 	bl	8000bd0 <SPI_PeriClockControl>
	//configure SPI_CR1 reg
	uint32_t temp = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
	//1. configure device mode
	temp |= pSPIHandle->SPIConfig.SPI_DeviceMode <<SPI_CR1_MSTR;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	791b      	ldrb	r3, [r3, #4]
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	60fb      	str	r3, [r7, #12]
	//2. configure bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	795b      	ldrb	r3, [r3, #5]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d104      	bne.n	8000cb6 <SPI_Init+0x36>
		//bidi mode should be cleared
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	e014      	b.n	8000ce0 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	795b      	ldrb	r3, [r3, #5]
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d104      	bne.n	8000cc8 <SPI_Init+0x48>
		//bidi mode should be set
		temp |= (1<<SPI_CR1_BIDIMODE);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	e00b      	b.n	8000ce0 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	795b      	ldrb	r3, [r3, #5]
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d107      	bne.n	8000ce0 <SPI_Init+0x60>
		//BIDI mode should be cleared and Rx_only bit must be set
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000cd6:	60fb      	str	r3, [r7, #12]
		temp |= (1<<SPI_CR1_RXONLY);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cde:	60fb      	str	r3, [r7, #12]
	}
	//configure clk speed
	temp |= pSPIHandle->SPIConfig.SPI_SclkSpeed <<SPI_CR1_BR;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	799b      	ldrb	r3, [r3, #6]
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	60fb      	str	r3, [r7, #12]
	//configure DFF
	temp |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	79db      	ldrb	r3, [r3, #7]
 8000cf0:	02db      	lsls	r3, r3, #11
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	60fb      	str	r3, [r7, #12]
	//configure CPOl
	temp |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7a1b      	ldrb	r3, [r3, #8]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]
	//config CPHA
	temp |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	7a5b      	ldrb	r3, [r3, #9]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]

	temp |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	7a9b      	ldrb	r3, [r3, #10]
 8000d14:	025b      	lsls	r3, r3, #9
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]


	pSPIHandle->pSPIx->CR1 = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	601a      	str	r2, [r3, #0]

}
 8000d24:	bf00      	nop
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <SPI_GetFlagStatus>:

}
/*
 * gets the flag stat
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName){
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	689a      	ldr	r2, [r3, #8]
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e000      	b.n	8000d48 <SPI_GetFlagStatus+0x1c>
	}
	else{
		return FLAG_RESET;
 8000d46:	2300      	movs	r3, #0
	}
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr

08000d52 <SPI_SendData>:
	* @param  *pSPIx : pointer to the SPI base address
	* @param  *pTxBuffer : pointer to the Tx buffer where data is held
	* @param  Len : length of data
	* @return None
	*/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b084      	sub	sp, #16
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	60f8      	str	r0, [r7, #12]
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
	while(Len>0){
 8000d5e:	e027      	b.n	8000db0 <SPI_SendData+0x5e>
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == RESET);//blocking and polling
 8000d60:	bf00      	nop
 8000d62:	2102      	movs	r1, #2
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	f7ff ffe1 	bl	8000d2c <SPI_GetFlagStatus>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d0f8      	beq.n	8000d62 <SPI_SendData+0x10>
		if(pSPIx->CR1 & (1<<SPI_CR1_DFF)){
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d00e      	beq.n	8000d9a <SPI_SendData+0x48>
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	60da      	str	r2, [r3, #12]
			Len--;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	607b      	str	r3, [r7, #4]
			Len--;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	3301      	adds	r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	e00a      	b.n	8000db0 <SPI_SendData+0x5e>
		}
		else {
			pSPIx->DR = *pTxBuffer;
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	60da      	str	r2, [r3, #12]
			Len--;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	3301      	adds	r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
	while(Len>0){
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1d4      	bne.n	8000d60 <SPI_SendData+0xe>
		}
	}
}
 8000db6:	bf00      	nop
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <SPI_ReceiveData>:
	* @param  *pSPIx : pointer to the SPI base address
	* @param  *pRxBuffer : pointer to the Rx buffer where data is held
	* @param  Len : length of data
	* @return None
	*/
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
	while(Len>0){
 8000dcc:	e027      	b.n	8000e1e <SPI_ReceiveData+0x5e>
		while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == (uint8_t)RESET);//blocking and polling
 8000dce:	bf00      	nop
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	68f8      	ldr	r0, [r7, #12]
 8000dd4:	f7ff ffaa 	bl	8000d2c <SPI_GetFlagStatus>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d0f8      	beq.n	8000dd0 <SPI_ReceiveData+0x10>
		if(pSPIx->CR1 & (1<<SPI_CR1_DFF)){
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d00e      	beq.n	8000e08 <SPI_ReceiveData+0x48>
			*((uint16_t*)pRxBuffer) = pSPIx->DR;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	801a      	strh	r2, [r3, #0]
			Len--;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	607b      	str	r3, [r7, #4]
			Len--;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	607b      	str	r3, [r7, #4]
			(uint16_t*)pRxBuffer++;
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	3301      	adds	r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	e00a      	b.n	8000e1e <SPI_ReceiveData+0x5e>
		}
		else {
			*(pRxBuffer) = pSPIx->DR;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	701a      	strb	r2, [r3, #0]
			Len--;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	3b01      	subs	r3, #1
 8000e16:	607b      	str	r3, [r7, #4]
			pRxBuffer++;
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	60bb      	str	r3, [r7, #8]
	while(Len>0){
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d1d4      	bne.n	8000dce <SPI_ReceiveData+0xe>
		}
	}
}
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <SPI_PeripheralControl>:
 * @param  IRQPriority : prioity of the interrupt
 * @return None
 */
void SPI_IRQPriorityConfig(uint8_t IRQNum, uint32_t IRQPriority);

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	460b      	mov	r3, r1
 8000e38:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000e3a:	78fb      	ldrb	r3, [r7, #3]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d106      	bne.n	8000e4e <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1<<SPI_CR1_SPE);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	601a      	str	r2, [r3, #0]
	}
	else{
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
	}
}
 8000e4c:	e005      	b.n	8000e5a <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	601a      	str	r2, [r3, #0]
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <SPI_SSOEConfig>:
		}
		else{
			pSPIx->CR1 &= ~(1<<SPI_CR1_SSI);
		}
}
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000e70:	78fb      	ldrb	r3, [r7, #3]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d106      	bne.n	8000e84 <SPI_SSOEConfig+0x20>
		pSPIx->CR2 |= (1<<2);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f043 0204 	orr.w	r2, r3, #4
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	605a      	str	r2, [r3, #4]
	}
	else{
		pSPIx->CR2 &= ~(1<<2);
	}
}
 8000e82:	e005      	b.n	8000e90 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1<<2);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f023 0204 	bic.w	r2, r3, #4
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	605a      	str	r2, [r3, #4]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
	...

08000e9c <__libc_init_array>:
 8000e9c:	b570      	push	{r4, r5, r6, lr}
 8000e9e:	4d0d      	ldr	r5, [pc, #52]	@ (8000ed4 <__libc_init_array+0x38>)
 8000ea0:	4c0d      	ldr	r4, [pc, #52]	@ (8000ed8 <__libc_init_array+0x3c>)
 8000ea2:	1b64      	subs	r4, r4, r5
 8000ea4:	10a4      	asrs	r4, r4, #2
 8000ea6:	2600      	movs	r6, #0
 8000ea8:	42a6      	cmp	r6, r4
 8000eaa:	d109      	bne.n	8000ec0 <__libc_init_array+0x24>
 8000eac:	4d0b      	ldr	r5, [pc, #44]	@ (8000edc <__libc_init_array+0x40>)
 8000eae:	4c0c      	ldr	r4, [pc, #48]	@ (8000ee0 <__libc_init_array+0x44>)
 8000eb0:	f000 f818 	bl	8000ee4 <_init>
 8000eb4:	1b64      	subs	r4, r4, r5
 8000eb6:	10a4      	asrs	r4, r4, #2
 8000eb8:	2600      	movs	r6, #0
 8000eba:	42a6      	cmp	r6, r4
 8000ebc:	d105      	bne.n	8000eca <__libc_init_array+0x2e>
 8000ebe:	bd70      	pop	{r4, r5, r6, pc}
 8000ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ec4:	4798      	blx	r3
 8000ec6:	3601      	adds	r6, #1
 8000ec8:	e7ee      	b.n	8000ea8 <__libc_init_array+0xc>
 8000eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ece:	4798      	blx	r3
 8000ed0:	3601      	adds	r6, #1
 8000ed2:	e7f2      	b.n	8000eba <__libc_init_array+0x1e>
 8000ed4:	08000f1c 	.word	0x08000f1c
 8000ed8:	08000f1c 	.word	0x08000f1c
 8000edc:	08000f1c 	.word	0x08000f1c
 8000ee0:	08000f20 	.word	0x08000f20

08000ee4 <_init>:
 8000ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ee6:	bf00      	nop
 8000ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eea:	bc08      	pop	{r3}
 8000eec:	469e      	mov	lr, r3
 8000eee:	4770      	bx	lr

08000ef0 <_fini>:
 8000ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef2:	bf00      	nop
 8000ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ef6:	bc08      	pop	{r3}
 8000ef8:	469e      	mov	lr, r3
 8000efa:	4770      	bx	lr
