
stm32f4xx_drivers3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009a4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b2c  08000b2c  00001b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b38  08000b38  00001b48  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000b38  08000b38  00001b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000b40  08000b48  00001b48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b40  08000b40  00001b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b44  08000b44  00001b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001b48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001b48  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001b48  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000113d  00000000  00000000  00001b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000436  00000000  00000000  00002caf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  000030e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d7  00000000  00000000  00003218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000215e  00000000  00000000  000032ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000179d  00000000  00000000  0000544d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009337  00000000  00000000  00006bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000ff21  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000400  00000000  00000000  0000ff64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00010364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000b14 	.word	0x08000b14

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000b14 	.word	0x08000b14

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <SPI2_GPIOInit>:
 */
#include "stm32f407xx.h"
#include "stm32f407xx_gpio.h"
#include "stm32f407xx_spi_driver.h"
#include<string.h>
void SPI2_GPIOInit(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 80001de:	4b11      	ldr	r3, [pc, #68]	@ (8000224 <SPI2_GPIOInit+0x4c>)
 80001e0:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001e2:	2302      	movs	r3, #2
 80001e4:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80001e6:	2305      	movs	r3, #5
 80001e8:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001ea:	2300      	movs	r3, #0
 80001ec:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80001ee:	2300      	movs	r3, #0
 80001f0:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001f2:	2302      	movs	r3, #2
 80001f4:	72bb      	strb	r3, [r7, #10]
	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_13;
 80001f6:	230d      	movs	r3, #13
 80001f8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 f8b1 	bl	8000364 <GPIO_Init>
	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_15;
 8000202:	230f      	movs	r3, #15
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f8ab 	bl	8000364 <GPIO_Init>
	//MISO
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_14;
	//GPIO_Init(&SPIPins);
	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_12;
 800020e:	230c      	movs	r3, #12
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f8a5 	bl	8000364 <GPIO_Init>

}
 800021a:	bf00      	nop
 800021c:	3710      	adds	r7, #16
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	40020400 	.word	0x40020400

08000228 <SPI2_Init>:
void SPI2_Init(void){
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx = SPI2;
 800022e:	4b0c      	ldr	r3, [pc, #48]	@ (8000260 <SPI2_Init+0x38>)
 8000230:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000232:	2301      	movs	r3, #1
 8000234:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000236:	2301      	movs	r3, #1
 8000238:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 800023a:	2304      	movs	r3, #4
 800023c:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800023e:	2300      	movs	r3, #0
 8000240:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000242:	2300      	movs	r3, #0
 8000244:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000246:	2300      	movs	r3, #0
 8000248:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI;//Hardware
 800024a:	2300      	movs	r3, #0
 800024c:	73bb      	strb	r3, [r7, #14]
	SPI_Init(&SPI2handle);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fb65 	bl	8000920 <SPI_Init>
}
 8000256:	bf00      	nop
 8000258:	3710      	adds	r7, #16
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	40003800 	.word	0x40003800

08000264 <GPIO_ButtonInit>:
void GPIO_ButtonInit(void){
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOButton;
	GPIOButton.pGPIOx = GPIOA;
 800026a:	4b09      	ldr	r3, [pc, #36]	@ (8000290 <GPIO_ButtonInit+0x2c>)
 800026c:	607b      	str	r3, [r7, #4]
	GPIOButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_0;
 800026e:	2300      	movs	r3, #0
 8000270:	723b      	strb	r3, [r7, #8]
	GPIOButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000272:	2300      	movs	r3, #0
 8000274:	727b      	strb	r3, [r7, #9]
	GPIOButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000276:	2302      	movs	r3, #2
 8000278:	72bb      	strb	r3, [r7, #10]
	GPIOButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800027a:	2300      	movs	r3, #0
 800027c:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&GPIOButton);
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	4618      	mov	r0, r3
 8000282:	f000 f86f 	bl	8000364 <GPIO_Init>
}
 8000286:	bf00      	nop
 8000288:	3710      	adds	r7, #16
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	40020000 	.word	0x40020000

08000294 <main>:
void delay(void){
	for(uint32_t i = 0; i<500000; i++);
}
int main(void){
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
	char user_data[] = "Hello world";
 800029a:	4a1b      	ldr	r2, [pc, #108]	@ (8000308 <main+0x74>)
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	ca07      	ldmia	r2, {r0, r1, r2}
 80002a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	GPIO_ButtonInit();
 80002a4:	f7ff ffde 	bl	8000264 <GPIO_ButtonInit>
	SPI2_GPIOInit();
 80002a8:	f7ff ff96 	bl	80001d8 <SPI2_GPIOInit>
	SPI2_Init();
 80002ac:	f7ff ffbc 	bl	8000228 <SPI2_Init>
	//enable SPI2 peripheral
	SPI_SSOEConfig(SPI2, ENABLE);
 80002b0:	2101      	movs	r1, #1
 80002b2:	4816      	ldr	r0, [pc, #88]	@ (800030c <main+0x78>)
 80002b4:	f000 fbef 	bl	8000a96 <SPI_SSOEConfig>
	while(1){
		SPI_PeripheralControl(SPI2, ENABLE);
 80002b8:	2101      	movs	r1, #1
 80002ba:	4814      	ldr	r0, [pc, #80]	@ (800030c <main+0x78>)
 80002bc:	f000 fbd0 	bl	8000a60 <SPI_PeripheralControl>
		//first send length
		uint8_t dataLen = strlen(user_data);
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	4618      	mov	r0, r3
 80002c4:	f7ff ff80 	bl	80001c8 <strlen>
 80002c8:	4603      	mov	r3, r0
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	70fb      	strb	r3, [r7, #3]
		SPI_SendData(SPI2, &dataLen, 1);
 80002ce:	1cfb      	adds	r3, r7, #3
 80002d0:	2201      	movs	r2, #1
 80002d2:	4619      	mov	r1, r3
 80002d4:	480d      	ldr	r0, [pc, #52]	@ (800030c <main+0x78>)
 80002d6:	f000 fb86 	bl	80009e6 <SPI_SendData>
		SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	4618      	mov	r0, r3
 80002de:	f7ff ff73 	bl	80001c8 <strlen>
 80002e2:	4602      	mov	r2, r0
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	4619      	mov	r1, r3
 80002e8:	4808      	ldr	r0, [pc, #32]	@ (800030c <main+0x78>)
 80002ea:	f000 fb7c 	bl	80009e6 <SPI_SendData>
		//have to check if SPI is busy
		while(SPI_GetFlagStatus(SPI2, SPI_BSY_FLAG));
 80002ee:	bf00      	nop
 80002f0:	2180      	movs	r1, #128	@ 0x80
 80002f2:	4806      	ldr	r0, [pc, #24]	@ (800030c <main+0x78>)
 80002f4:	f000 fb64 	bl	80009c0 <SPI_GetFlagStatus>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d1f8      	bne.n	80002f0 <main+0x5c>
		//disbale
		SPI_PeripheralControl(SPI2, DISABLE);
 80002fe:	2100      	movs	r1, #0
 8000300:	4802      	ldr	r0, [pc, #8]	@ (800030c <main+0x78>)
 8000302:	f000 fbad 	bl	8000a60 <SPI_PeripheralControl>
	while(1){
 8000306:	e7d7      	b.n	80002b8 <main+0x24>
 8000308:	08000b2c 	.word	0x08000b2c
 800030c:	40003800 	.word	0x40003800

08000310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000310:	480d      	ldr	r0, [pc, #52]	@ (8000348 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000312:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000314:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000318:	480c      	ldr	r0, [pc, #48]	@ (800034c <LoopForever+0x6>)
  ldr r1, =_edata
 800031a:	490d      	ldr	r1, [pc, #52]	@ (8000350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800031c:	4a0d      	ldr	r2, [pc, #52]	@ (8000354 <LoopForever+0xe>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000320:	e002      	b.n	8000328 <LoopCopyDataInit>

08000322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000326:	3304      	adds	r3, #4

08000328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800032c:	d3f9      	bcc.n	8000322 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032e:	4a0a      	ldr	r2, [pc, #40]	@ (8000358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000330:	4c0a      	ldr	r4, [pc, #40]	@ (800035c <LoopForever+0x16>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000334:	e001      	b.n	800033a <LoopFillZerobss>

08000336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000338:	3204      	adds	r2, #4

0800033a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800033c:	d3fb      	bcc.n	8000336 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800033e:	f000 fbc5 	bl	8000acc <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000342:	f7ff ffa7 	bl	8000294 <main>

08000346 <LoopForever>:

LoopForever:
  b LoopForever
 8000346:	e7fe      	b.n	8000346 <LoopForever>
  ldr   r0, =_estack
 8000348:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800034c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000350:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000354:	08000b48 	.word	0x08000b48
  ldr r2, =_sbss
 8000358:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800035c:	2000001c 	.word	0x2000001c

08000360 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000360:	e7fe      	b.n	8000360 <ADC_IRQHandler>
	...

08000364 <GPIO_Init>:
	* @param  *pGPIOHandle : pointer to the GPIO handle struct
	* @param
	* @param
	* @return None
	*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	//enable peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2101      	movs	r1, #1
 8000372:	4618      	mov	r0, r3
 8000374:	f000 f994 	bl	80006a0 <GPIO_PeriClockControl>
		//1 configure the mode of GPIO pin
	uint32_t temp = 0;
 8000378:	2300      	movs	r3, #0
 800037a:	617b      	str	r3, [r7, #20]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	795b      	ldrb	r3, [r3, #5]
 8000380:	2b03      	cmp	r3, #3
 8000382:	d822      	bhi.n	80003ca <GPIO_Init+0x66>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	795b      	ldrb	r3, [r3, #5]
 8000388:	461a      	mov	r2, r3
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	791b      	ldrb	r3, [r3, #4]
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	fa02 f303 	lsl.w	r3, r2, r3
 8000394:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3<<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	791b      	ldrb	r3, [r3, #4]
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	2103      	movs	r1, #3
 80003a4:	fa01 f303 	lsl.w	r3, r1, r3
 80003a8:	43db      	mvns	r3, r3
 80003aa:	4619      	mov	r1, r3
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	400a      	ands	r2, r1
 80003b2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	6819      	ldr	r1, [r3, #0]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	697a      	ldr	r2, [r7, #20]
 80003c0:	430a      	orrs	r2, r1
 80003c2:	601a      	str	r2, [r3, #0]
		temp = 0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]
 80003c8:	e0c8      	b.n	800055c <GPIO_Init+0x1f8>
	}
	else{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	795b      	ldrb	r3, [r3, #5]
 80003ce:	2b04      	cmp	r3, #4
 80003d0:	d117      	bne.n	8000402 <GPIO_Init+0x9e>
			//1. configure falling edge reg
			EXTI->FTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003d2:	4b47      	ldr	r3, [pc, #284]	@ (80004f0 <GPIO_Init+0x18c>)
 80003d4:	68db      	ldr	r3, [r3, #12]
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	7912      	ldrb	r2, [r2, #4]
 80003da:	4611      	mov	r1, r2
 80003dc:	2201      	movs	r2, #1
 80003de:	408a      	lsls	r2, r1
 80003e0:	4611      	mov	r1, r2
 80003e2:	4a43      	ldr	r2, [pc, #268]	@ (80004f0 <GPIO_Init+0x18c>)
 80003e4:	430b      	orrs	r3, r1
 80003e6:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003e8:	4b41      	ldr	r3, [pc, #260]	@ (80004f0 <GPIO_Init+0x18c>)
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	687a      	ldr	r2, [r7, #4]
 80003ee:	7912      	ldrb	r2, [r2, #4]
 80003f0:	4611      	mov	r1, r2
 80003f2:	2201      	movs	r2, #1
 80003f4:	408a      	lsls	r2, r1
 80003f6:	43d2      	mvns	r2, r2
 80003f8:	4611      	mov	r1, r2
 80003fa:	4a3d      	ldr	r2, [pc, #244]	@ (80004f0 <GPIO_Init+0x18c>)
 80003fc:	400b      	ands	r3, r1
 80003fe:	6093      	str	r3, [r2, #8]
 8000400:	e035      	b.n	800046e <GPIO_Init+0x10a>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	795b      	ldrb	r3, [r3, #5]
 8000406:	2b05      	cmp	r3, #5
 8000408:	d117      	bne.n	800043a <GPIO_Init+0xd6>
			EXTI->FTSR &= ~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800040a:	4b39      	ldr	r3, [pc, #228]	@ (80004f0 <GPIO_Init+0x18c>)
 800040c:	68db      	ldr	r3, [r3, #12]
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	7912      	ldrb	r2, [r2, #4]
 8000412:	4611      	mov	r1, r2
 8000414:	2201      	movs	r2, #1
 8000416:	408a      	lsls	r2, r1
 8000418:	43d2      	mvns	r2, r2
 800041a:	4611      	mov	r1, r2
 800041c:	4a34      	ldr	r2, [pc, #208]	@ (80004f0 <GPIO_Init+0x18c>)
 800041e:	400b      	ands	r3, r1
 8000420:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000422:	4b33      	ldr	r3, [pc, #204]	@ (80004f0 <GPIO_Init+0x18c>)
 8000424:	689b      	ldr	r3, [r3, #8]
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	7912      	ldrb	r2, [r2, #4]
 800042a:	4611      	mov	r1, r2
 800042c:	2201      	movs	r2, #1
 800042e:	408a      	lsls	r2, r1
 8000430:	4611      	mov	r1, r2
 8000432:	4a2f      	ldr	r2, [pc, #188]	@ (80004f0 <GPIO_Init+0x18c>)
 8000434:	430b      	orrs	r3, r1
 8000436:	6093      	str	r3, [r2, #8]
 8000438:	e019      	b.n	800046e <GPIO_Init+0x10a>

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	795b      	ldrb	r3, [r3, #5]
 800043e:	2b06      	cmp	r3, #6
 8000440:	d115      	bne.n	800046e <GPIO_Init+0x10a>
			EXTI->FTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000442:	4b2b      	ldr	r3, [pc, #172]	@ (80004f0 <GPIO_Init+0x18c>)
 8000444:	68db      	ldr	r3, [r3, #12]
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	7912      	ldrb	r2, [r2, #4]
 800044a:	4611      	mov	r1, r2
 800044c:	2201      	movs	r2, #1
 800044e:	408a      	lsls	r2, r1
 8000450:	4611      	mov	r1, r2
 8000452:	4a27      	ldr	r2, [pc, #156]	@ (80004f0 <GPIO_Init+0x18c>)
 8000454:	430b      	orrs	r3, r1
 8000456:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000458:	4b25      	ldr	r3, [pc, #148]	@ (80004f0 <GPIO_Init+0x18c>)
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	7912      	ldrb	r2, [r2, #4]
 8000460:	4611      	mov	r1, r2
 8000462:	2201      	movs	r2, #1
 8000464:	408a      	lsls	r2, r1
 8000466:	4611      	mov	r1, r2
 8000468:	4a21      	ldr	r2, [pc, #132]	@ (80004f0 <GPIO_Init+0x18c>)
 800046a:	430b      	orrs	r3, r1
 800046c:	6093      	str	r3, [r2, #8]

		}
		//Configure GPIO port slection in SYSCFG
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	791b      	ldrb	r3, [r3, #4]
 8000472:	089b      	lsrs	r3, r3, #2
 8000474:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	791b      	ldrb	r3, [r3, #4]
 800047a:	f003 0303 	and.w	r3, r3, #3
 800047e:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a1b      	ldr	r2, [pc, #108]	@ (80004f4 <GPIO_Init+0x190>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d044      	beq.n	8000514 <GPIO_Init+0x1b0>
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a1a      	ldr	r2, [pc, #104]	@ (80004f8 <GPIO_Init+0x194>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d02b      	beq.n	80004ec <GPIO_Init+0x188>
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a18      	ldr	r2, [pc, #96]	@ (80004fc <GPIO_Init+0x198>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d024      	beq.n	80004e8 <GPIO_Init+0x184>
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a17      	ldr	r2, [pc, #92]	@ (8000500 <GPIO_Init+0x19c>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d01d      	beq.n	80004e4 <GPIO_Init+0x180>
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a15      	ldr	r2, [pc, #84]	@ (8000504 <GPIO_Init+0x1a0>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d016      	beq.n	80004e0 <GPIO_Init+0x17c>
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a14      	ldr	r2, [pc, #80]	@ (8000508 <GPIO_Init+0x1a4>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d00f      	beq.n	80004dc <GPIO_Init+0x178>
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a12      	ldr	r2, [pc, #72]	@ (800050c <GPIO_Init+0x1a8>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d008      	beq.n	80004d8 <GPIO_Init+0x174>
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a11      	ldr	r2, [pc, #68]	@ (8000510 <GPIO_Init+0x1ac>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d101      	bne.n	80004d4 <GPIO_Init+0x170>
 80004d0:	2307      	movs	r3, #7
 80004d2:	e020      	b.n	8000516 <GPIO_Init+0x1b2>
 80004d4:	2300      	movs	r3, #0
 80004d6:	e01e      	b.n	8000516 <GPIO_Init+0x1b2>
 80004d8:	2306      	movs	r3, #6
 80004da:	e01c      	b.n	8000516 <GPIO_Init+0x1b2>
 80004dc:	2305      	movs	r3, #5
 80004de:	e01a      	b.n	8000516 <GPIO_Init+0x1b2>
 80004e0:	2304      	movs	r3, #4
 80004e2:	e018      	b.n	8000516 <GPIO_Init+0x1b2>
 80004e4:	2303      	movs	r3, #3
 80004e6:	e016      	b.n	8000516 <GPIO_Init+0x1b2>
 80004e8:	2302      	movs	r3, #2
 80004ea:	e014      	b.n	8000516 <GPIO_Init+0x1b2>
 80004ec:	2301      	movs	r3, #1
 80004ee:	e012      	b.n	8000516 <GPIO_Init+0x1b2>
 80004f0:	40013c00 	.word	0x40013c00
 80004f4:	40020000 	.word	0x40020000
 80004f8:	40020400 	.word	0x40020400
 80004fc:	40020800 	.word	0x40020800
 8000500:	40020c00 	.word	0x40020c00
 8000504:	40021000 	.word	0x40021000
 8000508:	40021400 	.word	0x40021400
 800050c:	40021800 	.word	0x40021800
 8000510:	40021c00 	.word	0x40021c00
 8000514:	2300      	movs	r3, #0
 8000516:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000518:	4b5e      	ldr	r3, [pc, #376]	@ (8000694 <GPIO_Init+0x330>)
 800051a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800051c:	4a5d      	ldr	r2, [pc, #372]	@ (8000694 <GPIO_Init+0x330>)
 800051e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000522:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] |= portcode<<(temp2*4);
 8000524:	4a5c      	ldr	r2, [pc, #368]	@ (8000698 <GPIO_Init+0x334>)
 8000526:	7cfb      	ldrb	r3, [r7, #19]
 8000528:	3302      	adds	r3, #2
 800052a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800052e:	7c79      	ldrb	r1, [r7, #17]
 8000530:	7cbb      	ldrb	r3, [r7, #18]
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	fa01 f303 	lsl.w	r3, r1, r3
 8000538:	4618      	mov	r0, r3
 800053a:	4957      	ldr	r1, [pc, #348]	@ (8000698 <GPIO_Init+0x334>)
 800053c:	7cfb      	ldrb	r3, [r7, #19]
 800053e:	4302      	orrs	r2, r0
 8000540:	3302      	adds	r3, #2
 8000542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//enable interrupt delievery in IMR
		EXTI->IMR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000546:	4b55      	ldr	r3, [pc, #340]	@ (800069c <GPIO_Init+0x338>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	7912      	ldrb	r2, [r2, #4]
 800054e:	4611      	mov	r1, r2
 8000550:	2201      	movs	r2, #1
 8000552:	408a      	lsls	r2, r1
 8000554:	4611      	mov	r1, r2
 8000556:	4a51      	ldr	r2, [pc, #324]	@ (800069c <GPIO_Init+0x338>)
 8000558:	430b      	orrs	r3, r1
 800055a:	6013      	str	r3, [r2, #0]
	}

		//2 configure the speed of GPIO pin
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	799b      	ldrb	r3, [r3, #6]
 8000560:	461a      	mov	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	791b      	ldrb	r3, [r3, #4]
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	fa02 f303 	lsl.w	r3, r2, r3
 800056c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3<<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	689a      	ldr	r2, [r3, #8]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	791b      	ldrb	r3, [r3, #4]
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	2103      	movs	r1, #3
 800057c:	fa01 f303 	lsl.w	r3, r1, r3
 8000580:	43db      	mvns	r3, r3
 8000582:	4619      	mov	r1, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	400a      	ands	r2, r1
 800058a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	6899      	ldr	r1, [r3, #8]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	697a      	ldr	r2, [r7, #20]
 8000598:	430a      	orrs	r2, r1
 800059a:	609a      	str	r2, [r3, #8]
	temp = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]

		//3 configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	79db      	ldrb	r3, [r3, #7]
 80005a4:	461a      	mov	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	791b      	ldrb	r3, [r3, #4]
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	fa02 f303 	lsl.w	r3, r2, r3
 80005b0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3<<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	68da      	ldr	r2, [r3, #12]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	791b      	ldrb	r3, [r3, #4]
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	2103      	movs	r1, #3
 80005c0:	fa01 f303 	lsl.w	r3, r1, r3
 80005c4:	43db      	mvns	r3, r3
 80005c6:	4619      	mov	r1, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	400a      	ands	r2, r1
 80005ce:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	68d9      	ldr	r1, [r3, #12]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	697a      	ldr	r2, [r7, #20]
 80005dc:	430a      	orrs	r2, r1
 80005de:	60da      	str	r2, [r3, #12]
	temp = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
		//4 configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	7a1b      	ldrb	r3, [r3, #8]
 80005e8:	461a      	mov	r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	791b      	ldrb	r3, [r3, #4]
 80005ee:	fa02 f303 	lsl.w	r3, r2, r3
 80005f2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3<<(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	689a      	ldr	r2, [r3, #8]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	791b      	ldrb	r3, [r3, #4]
 80005fe:	4619      	mov	r1, r3
 8000600:	2303      	movs	r3, #3
 8000602:	408b      	lsls	r3, r1
 8000604:	43db      	mvns	r3, r3
 8000606:	4619      	mov	r1, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	400a      	ands	r2, r1
 800060e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	6859      	ldr	r1, [r3, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	697a      	ldr	r2, [r7, #20]
 800061c:	430a      	orrs	r2, r1
 800061e:	605a      	str	r2, [r3, #4]
		//5 configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	795b      	ldrb	r3, [r3, #5]
 8000624:	2b02      	cmp	r3, #2
 8000626:	d131      	bne.n	800068c <GPIO_Init+0x328>
		uint8_t temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)/8;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	08db      	lsrs	r3, r3, #3
 800062e:	743b      	strb	r3, [r7, #16]
		uint8_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%8;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	f003 0307 	and.w	r3, r3, #7
 8000638:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~((0xF << (4 * temp2)));
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	7c3a      	ldrb	r2, [r7, #16]
 8000640:	3208      	adds	r2, #8
 8000642:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	220f      	movs	r2, #15
 800064c:	fa02 f303 	lsl.w	r3, r2, r3
 8000650:	43db      	mvns	r3, r3
 8000652:	4618      	mov	r0, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	7c3a      	ldrb	r2, [r7, #16]
 800065a:	4001      	ands	r1, r0
 800065c:	3208      	adds	r2, #8
 800065e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	7c3a      	ldrb	r2, [r7, #16]
 8000668:	3208      	adds	r2, #8
 800066a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	7a5b      	ldrb	r3, [r3, #9]
 8000672:	461a      	mov	r2, r3
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	fa02 f303 	lsl.w	r3, r2, r3
 800067c:	4618      	mov	r0, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	7c3a      	ldrb	r2, [r7, #16]
 8000684:	4301      	orrs	r1, r0
 8000686:	3208      	adds	r2, #8
 8000688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800068c:	bf00      	nop
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40013800 	.word	0x40013800
 800069c:	40013c00 	.word	0x40013c00

080006a0 <GPIO_PeriClockControl>:
	* @param  *pGPIOx : GPIO peripheral base address
	* @param  EnorDi  : ENABLE(1) or DISABLE(0) macros
	* @param
	* @return None
	*/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	70fb      	strb	r3, [r7, #3]
	if(EnorDi== ENABLE){
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d162      	bne.n	8000778 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA){
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a64      	ldr	r2, [pc, #400]	@ (8000848 <GPIO_PeriClockControl+0x1a8>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d106      	bne.n	80006c8 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80006ba:	4b64      	ldr	r3, [pc, #400]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a63      	ldr	r2, [pc, #396]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
		else if (pGPIOx == GPIOI){
			GPIOI_PCLK_DI();
		}
	}

}
 80006c6:	e0b9      	b.n	800083c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB){
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a61      	ldr	r2, [pc, #388]	@ (8000850 <GPIO_PeriClockControl+0x1b0>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d106      	bne.n	80006de <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80006d0:	4b5e      	ldr	r3, [pc, #376]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 80006d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d4:	4a5d      	ldr	r2, [pc, #372]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 80006d6:	f043 0302 	orr.w	r3, r3, #2
 80006da:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006dc:	e0ae      	b.n	800083c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC){
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4a5c      	ldr	r2, [pc, #368]	@ (8000854 <GPIO_PeriClockControl+0x1b4>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d106      	bne.n	80006f4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80006e6:	4b59      	ldr	r3, [pc, #356]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a58      	ldr	r2, [pc, #352]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006f2:	e0a3      	b.n	800083c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD){
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a58      	ldr	r2, [pc, #352]	@ (8000858 <GPIO_PeriClockControl+0x1b8>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d106      	bne.n	800070a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80006fc:	4b53      	ldr	r3, [pc, #332]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 80006fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000700:	4a52      	ldr	r2, [pc, #328]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 8000702:	f043 0308 	orr.w	r3, r3, #8
 8000706:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000708:	e098      	b.n	800083c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE){
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a53      	ldr	r2, [pc, #332]	@ (800085c <GPIO_PeriClockControl+0x1bc>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d106      	bne.n	8000720 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000712:	4b4e      	ldr	r3, [pc, #312]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a4d      	ldr	r2, [pc, #308]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 8000718:	f043 0310 	orr.w	r3, r3, #16
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800071e:	e08d      	b.n	800083c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF){
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4a4f      	ldr	r2, [pc, #316]	@ (8000860 <GPIO_PeriClockControl+0x1c0>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d106      	bne.n	8000736 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000728:	4b48      	ldr	r3, [pc, #288]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 800072a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072c:	4a47      	ldr	r2, [pc, #284]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 800072e:	f043 0320 	orr.w	r3, r3, #32
 8000732:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000734:	e082      	b.n	800083c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG){
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a4a      	ldr	r2, [pc, #296]	@ (8000864 <GPIO_PeriClockControl+0x1c4>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d106      	bne.n	800074c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800073e:	4b43      	ldr	r3, [pc, #268]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a42      	ldr	r2, [pc, #264]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 8000744:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800074a:	e077      	b.n	800083c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH){
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a46      	ldr	r2, [pc, #280]	@ (8000868 <GPIO_PeriClockControl+0x1c8>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d106      	bne.n	8000762 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000754:	4b3d      	ldr	r3, [pc, #244]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 8000756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000758:	4a3c      	ldr	r2, [pc, #240]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 800075a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800075e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000760:	e06c      	b.n	800083c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI){
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4a41      	ldr	r2, [pc, #260]	@ (800086c <GPIO_PeriClockControl+0x1cc>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d168      	bne.n	800083c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800076a:	4b38      	ldr	r3, [pc, #224]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a37      	ldr	r2, [pc, #220]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 8000770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000776:	e061      	b.n	800083c <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA){
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a33      	ldr	r2, [pc, #204]	@ (8000848 <GPIO_PeriClockControl+0x1a8>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d106      	bne.n	800078e <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000780:	4b32      	ldr	r3, [pc, #200]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 8000782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000784:	4a31      	ldr	r2, [pc, #196]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 8000786:	f023 0301 	bic.w	r3, r3, #1
 800078a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800078c:	e056      	b.n	800083c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB){
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4a2f      	ldr	r2, [pc, #188]	@ (8000850 <GPIO_PeriClockControl+0x1b0>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d106      	bne.n	80007a4 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000796:	4b2d      	ldr	r3, [pc, #180]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a2c      	ldr	r2, [pc, #176]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 800079c:	f023 0302 	bic.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007a2:	e04b      	b.n	800083c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC){
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000854 <GPIO_PeriClockControl+0x1b4>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d106      	bne.n	80007ba <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80007ac:	4b27      	ldr	r3, [pc, #156]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b0:	4a26      	ldr	r2, [pc, #152]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 80007b2:	f023 0304 	bic.w	r3, r3, #4
 80007b6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007b8:	e040      	b.n	800083c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD){
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a26      	ldr	r2, [pc, #152]	@ (8000858 <GPIO_PeriClockControl+0x1b8>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d106      	bne.n	80007d0 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80007c2:	4b22      	ldr	r3, [pc, #136]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a21      	ldr	r2, [pc, #132]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 80007c8:	f023 0308 	bic.w	r3, r3, #8
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007ce:	e035      	b.n	800083c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE){
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a22      	ldr	r2, [pc, #136]	@ (800085c <GPIO_PeriClockControl+0x1bc>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d106      	bne.n	80007e6 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 80007d8:	4b1c      	ldr	r3, [pc, #112]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007dc:	4a1b      	ldr	r2, [pc, #108]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 80007de:	f023 0310 	bic.w	r3, r3, #16
 80007e2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007e4:	e02a      	b.n	800083c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF){
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000860 <GPIO_PeriClockControl+0x1c0>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d106      	bne.n	80007fc <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 80007ee:	4b17      	ldr	r3, [pc, #92]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a16      	ldr	r2, [pc, #88]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 80007f4:	f023 0320 	bic.w	r3, r3, #32
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007fa:	e01f      	b.n	800083c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG){
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a19      	ldr	r2, [pc, #100]	@ (8000864 <GPIO_PeriClockControl+0x1c4>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d106      	bne.n	8000812 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000804:	4b11      	ldr	r3, [pc, #68]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 8000806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000808:	4a10      	ldr	r2, [pc, #64]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 800080a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800080e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000810:	e014      	b.n	800083c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH){
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a14      	ldr	r2, [pc, #80]	@ (8000868 <GPIO_PeriClockControl+0x1c8>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d106      	bne.n	8000828 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800081a:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a0b      	ldr	r2, [pc, #44]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 8000820:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000826:	e009      	b.n	800083c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI){
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a10      	ldr	r2, [pc, #64]	@ (800086c <GPIO_PeriClockControl+0x1cc>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d105      	bne.n	800083c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 8000832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000834:	4a05      	ldr	r2, [pc, #20]	@ (800084c <GPIO_PeriClockControl+0x1ac>)
 8000836:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800083a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40020000 	.word	0x40020000
 800084c:	40023800 	.word	0x40023800
 8000850:	40020400 	.word	0x40020400
 8000854:	40020800 	.word	0x40020800
 8000858:	40020c00 	.word	0x40020c00
 800085c:	40021000 	.word	0x40021000
 8000860:	40021400 	.word	0x40021400
 8000864:	40021800 	.word	0x40021800
 8000868:	40021c00 	.word	0x40021c00
 800086c:	40022000 	.word	0x40022000

08000870 <SPI_PeriClockControl>:
	* @param  *pSPIx : pointer to the SPI base address
	* @param  EnorDi : takes either ENABLE(1) or DISABLE(0)to enable or disable clock
	* @param
	* @return None
	*/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	460b      	mov	r3, r1
 800087a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi== ENABLE){
 800087c:	78fb      	ldrb	r3, [r7, #3]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d120      	bne.n	80008c4 <SPI_PeriClockControl+0x54>
			if(pSPIx == SPI1){
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4a22      	ldr	r2, [pc, #136]	@ (8000910 <SPI_PeriClockControl+0xa0>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d106      	bne.n	8000898 <SPI_PeriClockControl+0x28>
				SPI1_PCLK_EN();
 800088a:	4b22      	ldr	r3, [pc, #136]	@ (8000914 <SPI_PeriClockControl+0xa4>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088e:	4a21      	ldr	r2, [pc, #132]	@ (8000914 <SPI_PeriClockControl+0xa4>)
 8000890:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000894:	6453      	str	r3, [r2, #68]	@ 0x44
						else if (pSPIx == SPI3){
							SPI3_PCLK_DI();
						}
		}

}
 8000896:	e035      	b.n	8000904 <SPI_PeriClockControl+0x94>
			else if(pSPIx == SPI2){
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a1f      	ldr	r2, [pc, #124]	@ (8000918 <SPI_PeriClockControl+0xa8>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d106      	bne.n	80008ae <SPI_PeriClockControl+0x3e>
				SPI2_PCLK_EN();
 80008a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000914 <SPI_PeriClockControl+0xa4>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000914 <SPI_PeriClockControl+0xa4>)
 80008a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008aa:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008ac:	e02a      	b.n	8000904 <SPI_PeriClockControl+0x94>
			else if (pSPIx == SPI3){
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4a1a      	ldr	r2, [pc, #104]	@ (800091c <SPI_PeriClockControl+0xac>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d126      	bne.n	8000904 <SPI_PeriClockControl+0x94>
				SPI3_PCLK_EN();
 80008b6:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <SPI_PeriClockControl+0xa4>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ba:	4a16      	ldr	r2, [pc, #88]	@ (8000914 <SPI_PeriClockControl+0xa4>)
 80008bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008c0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008c2:	e01f      	b.n	8000904 <SPI_PeriClockControl+0x94>
			if(pSPIx == SPI1){
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a12      	ldr	r2, [pc, #72]	@ (8000910 <SPI_PeriClockControl+0xa0>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d106      	bne.n	80008da <SPI_PeriClockControl+0x6a>
							SPI1_PCLK_DI();
 80008cc:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <SPI_PeriClockControl+0xa4>)
 80008ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d0:	4a10      	ldr	r2, [pc, #64]	@ (8000914 <SPI_PeriClockControl+0xa4>)
 80008d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008d6:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80008d8:	e014      	b.n	8000904 <SPI_PeriClockControl+0x94>
					else if(pSPIx == SPI2){
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000918 <SPI_PeriClockControl+0xa8>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d106      	bne.n	80008f0 <SPI_PeriClockControl+0x80>
							SPI2_PCLK_DI();
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <SPI_PeriClockControl+0xa4>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000914 <SPI_PeriClockControl+0xa4>)
 80008e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80008ec:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008ee:	e009      	b.n	8000904 <SPI_PeriClockControl+0x94>
						else if (pSPIx == SPI3){
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a0a      	ldr	r2, [pc, #40]	@ (800091c <SPI_PeriClockControl+0xac>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d105      	bne.n	8000904 <SPI_PeriClockControl+0x94>
							SPI3_PCLK_DI();
 80008f8:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <SPI_PeriClockControl+0xa4>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	4a05      	ldr	r2, [pc, #20]	@ (8000914 <SPI_PeriClockControl+0xa4>)
 80008fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000902:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40013000 	.word	0x40013000
 8000914:	40023800 	.word	0x40023800
 8000918:	40003800 	.word	0x40003800
 800091c:	40003c00 	.word	0x40003c00

08000920 <SPI_Init>:
	* @param  *pSPIHandle : pointer to the GPIO handle struct
	* @param
	* @param
	* @return None
	*/
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	//enable SPI clock
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2101      	movs	r1, #1
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff ff9e 	bl	8000870 <SPI_PeriClockControl>
	//configure SPI_CR1 reg
	uint32_t temp = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
	//1. configure device mode
	temp |= pSPIHandle->SPIConfig.SPI_DeviceMode <<SPI_CR1_MSTR;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	791b      	ldrb	r3, [r3, #4]
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	4313      	orrs	r3, r2
 8000942:	60fb      	str	r3, [r7, #12]
	//2. configure bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	795b      	ldrb	r3, [r3, #5]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d104      	bne.n	8000956 <SPI_Init+0x36>
		//bidi mode should be cleared
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	e014      	b.n	8000980 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	795b      	ldrb	r3, [r3, #5]
 800095a:	2b02      	cmp	r3, #2
 800095c:	d104      	bne.n	8000968 <SPI_Init+0x48>
		//bidi mode should be set
		temp |= (1<<SPI_CR1_BIDIMODE);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	e00b      	b.n	8000980 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	795b      	ldrb	r3, [r3, #5]
 800096c:	2b03      	cmp	r3, #3
 800096e:	d107      	bne.n	8000980 <SPI_Init+0x60>
		//BIDI mode should be cleared and Rx_only bit must be set
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000976:	60fb      	str	r3, [r7, #12]
		temp |= (1<<SPI_CR1_RXONLY);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800097e:	60fb      	str	r3, [r7, #12]
	}
	//configure clk speed
	temp |= pSPIHandle->SPIConfig.SPI_SclkSpeed <<SPI_CR1_BR;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	799b      	ldrb	r3, [r3, #6]
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	68fa      	ldr	r2, [r7, #12]
 8000988:	4313      	orrs	r3, r2
 800098a:	60fb      	str	r3, [r7, #12]
	//configure DFF
	temp |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	79db      	ldrb	r3, [r3, #7]
 8000990:	02db      	lsls	r3, r3, #11
 8000992:	68fa      	ldr	r2, [r7, #12]
 8000994:	4313      	orrs	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]
	//configure CPOl
	temp |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	7a1b      	ldrb	r3, [r3, #8]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]
	//config CPHA
	temp |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	7a5b      	ldrb	r3, [r3, #9]
 80009a8:	461a      	mov	r2, r3
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = temp;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	68fa      	ldr	r2, [r7, #12]
 80009b6:	601a      	str	r2, [r3, #0]

}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <SPI_GetFlagStatus>:

}
/*
 * gets the flag stat
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName){
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	689a      	ldr	r2, [r3, #8]
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	4013      	ands	r3, r2
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 80009d6:	2301      	movs	r3, #1
 80009d8:	e000      	b.n	80009dc <SPI_GetFlagStatus+0x1c>
	}
	else{
		return FLAG_RESET;
 80009da:	2300      	movs	r3, #0
	}
}
 80009dc:	4618      	mov	r0, r3
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr

080009e6 <SPI_SendData>:
	* @param  *pSPIx : pointer to the SPI base address
	* @param  *pTxBuffer : pointer to the Tx buffer where data is held
	* @param  Len : length of data
	* @return None
	*/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b084      	sub	sp, #16
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	60f8      	str	r0, [r7, #12]
 80009ee:	60b9      	str	r1, [r7, #8]
 80009f0:	607a      	str	r2, [r7, #4]
	while(Len>0){
 80009f2:	e02d      	b.n	8000a50 <SPI_SendData+0x6a>
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == RESET);//blocking and polling
 80009f4:	bf00      	nop
 80009f6:	2102      	movs	r1, #2
 80009f8:	68f8      	ldr	r0, [r7, #12]
 80009fa:	f7ff ffe1 	bl	80009c0 <SPI_GetFlagStatus>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d0f8      	beq.n	80009f6 <SPI_SendData+0x10>
		if(pSPIx->CR1 & (1<<SPI_CR1_DFF)){
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d00e      	beq.n	8000a2e <SPI_SendData+0x48>
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	60da      	str	r2, [r3, #12]
			Len--;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
			Len--;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	e010      	b.n	8000a50 <SPI_SendData+0x6a>
		}
		else if(!(pSPIx->CR1 & (1<<SPI_CR1_DFF))){
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d10a      	bne.n	8000a50 <SPI_SendData+0x6a>
			pSPIx->DR = *pTxBuffer;
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	60da      	str	r2, [r3, #12]
			Len--;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]
	while(Len>0){
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d1ce      	bne.n	80009f4 <SPI_SendData+0xe>
		}
	}
}
 8000a56:	bf00      	nop
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <SPI_PeripheralControl>:
 * @param  IRQPriority : prioity of the interrupt
 * @return None
 */
void SPI_IRQPriorityConfig(uint8_t IRQNum, uint32_t IRQPriority);

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	460b      	mov	r3, r1
 8000a6a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000a6c:	78fb      	ldrb	r3, [r7, #3]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d106      	bne.n	8000a80 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1<<SPI_CR1_SPE);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	601a      	str	r2, [r3, #0]
	}
	else{
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
	}
}
 8000a7e:	e005      	b.n	8000a8c <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	601a      	str	r2, [r3, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr

08000a96 <SPI_SSOEConfig>:
		}
		else{
			pSPIx->CR1 &= ~(1<<SPI_CR1_SSI);
		}
}
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000aa2:	78fb      	ldrb	r3, [r7, #3]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d106      	bne.n	8000ab6 <SPI_SSOEConfig+0x20>
		pSPIx->CR2 |= (1<<2);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f043 0204 	orr.w	r2, r3, #4
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	605a      	str	r2, [r3, #4]
	}
	else{
		pSPIx->CR2 &= ~(1<<2);
	}
}
 8000ab4:	e005      	b.n	8000ac2 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1<<2);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f023 0204 	bic.w	r2, r3, #4
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	605a      	str	r2, [r3, #4]
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <__libc_init_array>:
 8000acc:	b570      	push	{r4, r5, r6, lr}
 8000ace:	4d0d      	ldr	r5, [pc, #52]	@ (8000b04 <__libc_init_array+0x38>)
 8000ad0:	4c0d      	ldr	r4, [pc, #52]	@ (8000b08 <__libc_init_array+0x3c>)
 8000ad2:	1b64      	subs	r4, r4, r5
 8000ad4:	10a4      	asrs	r4, r4, #2
 8000ad6:	2600      	movs	r6, #0
 8000ad8:	42a6      	cmp	r6, r4
 8000ada:	d109      	bne.n	8000af0 <__libc_init_array+0x24>
 8000adc:	4d0b      	ldr	r5, [pc, #44]	@ (8000b0c <__libc_init_array+0x40>)
 8000ade:	4c0c      	ldr	r4, [pc, #48]	@ (8000b10 <__libc_init_array+0x44>)
 8000ae0:	f000 f818 	bl	8000b14 <_init>
 8000ae4:	1b64      	subs	r4, r4, r5
 8000ae6:	10a4      	asrs	r4, r4, #2
 8000ae8:	2600      	movs	r6, #0
 8000aea:	42a6      	cmp	r6, r4
 8000aec:	d105      	bne.n	8000afa <__libc_init_array+0x2e>
 8000aee:	bd70      	pop	{r4, r5, r6, pc}
 8000af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000af4:	4798      	blx	r3
 8000af6:	3601      	adds	r6, #1
 8000af8:	e7ee      	b.n	8000ad8 <__libc_init_array+0xc>
 8000afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000afe:	4798      	blx	r3
 8000b00:	3601      	adds	r6, #1
 8000b02:	e7f2      	b.n	8000aea <__libc_init_array+0x1e>
 8000b04:	08000b40 	.word	0x08000b40
 8000b08:	08000b40 	.word	0x08000b40
 8000b0c:	08000b40 	.word	0x08000b40
 8000b10:	08000b44 	.word	0x08000b44

08000b14 <_init>:
 8000b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b16:	bf00      	nop
 8000b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b1a:	bc08      	pop	{r3}
 8000b1c:	469e      	mov	lr, r3
 8000b1e:	4770      	bx	lr

08000b20 <_fini>:
 8000b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b22:	bf00      	nop
 8000b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b26:	bc08      	pop	{r3}
 8000b28:	469e      	mov	lr, r3
 8000b2a:	4770      	bx	lr
