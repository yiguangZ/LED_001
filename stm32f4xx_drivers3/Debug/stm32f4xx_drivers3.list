
stm32f4xx_drivers3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000db4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000f3c  08000f3c  00001f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f54  08000f54  00001f64  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000f54  08000f54  00001f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000f5c  08000f64  00001f64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f5c  08000f5c  00001f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f60  08000f60  00001f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001f64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001f64  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001f64  2**0
                  CONTENTS, READONLY
 13 .debug_info   000012a1  00000000  00000000  00001f8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000493  00000000  00000000  0000322f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000140  00000000  00000000  000036c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000e4  00000000  00000000  00003808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000021ac  00000000  00000000  000038ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000192e  00000000  00000000  00005a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000946f  00000000  00000000  000073c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00010835  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000450  00000000  00000000  00010878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00010cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000f24 	.word	0x08000f24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000f24 	.word	0x08000f24

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <SPI2_GPIOInit>:
#define LED_PIN				9




void SPI2_GPIOInit(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 80001de:	4b14      	ldr	r3, [pc, #80]	@ (8000230 <SPI2_GPIOInit+0x58>)
 80001e0:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001e2:	2302      	movs	r3, #2
 80001e4:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80001e6:	2305      	movs	r3, #5
 80001e8:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001ea:	2300      	movs	r3, #0
 80001ec:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;
 80001ee:	2301      	movs	r3, #1
 80001f0:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001f2:	2302      	movs	r3, #2
 80001f4:	72bb      	strb	r3, [r7, #10]
	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_13;
 80001f6:	230d      	movs	r3, #13
 80001f8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 fa71 	bl	80006e4 <GPIO_Init>
	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_15;
 8000202:	230f      	movs	r3, #15
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 fa6b 	bl	80006e4 <GPIO_Init>
	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_14;
 800020e:	230e      	movs	r3, #14
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 fa65 	bl	80006e4 <GPIO_Init>
	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_12;
 800021a:	230c      	movs	r3, #12
 800021c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f000 fa5f 	bl	80006e4 <GPIO_Init>

}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40020400 	.word	0x40020400

08000234 <SPI2_Init>:
void SPI2_Init(void){
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx = SPI2;
 800023a:	4b0c      	ldr	r3, [pc, #48]	@ (800026c <SPI2_Init+0x38>)
 800023c:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800023e:	2301      	movs	r3, #1
 8000240:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000242:	2301      	movs	r3, #1
 8000244:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 8000246:	2304      	movs	r3, #4
 8000248:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800024a:	2300      	movs	r3, #0
 800024c:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800024e:	2300      	movs	r3, #0
 8000250:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000252:	2300      	movs	r3, #0
 8000254:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI;//Hardware
 8000256:	2300      	movs	r3, #0
 8000258:	73bb      	strb	r3, [r7, #14]
	SPI_Init(&SPI2handle);
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f000 fd2f 	bl	8000cc0 <SPI_Init>
}
 8000262:	bf00      	nop
 8000264:	3710      	adds	r7, #16
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40003800 	.word	0x40003800

08000270 <GPIO_ButtonInit>:
void GPIO_ButtonInit(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOButton;
	GPIOButton.pGPIOx = GPIOA;
 8000276:	4b09      	ldr	r3, [pc, #36]	@ (800029c <GPIO_ButtonInit+0x2c>)
 8000278:	607b      	str	r3, [r7, #4]
	GPIOButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_0;
 800027a:	2300      	movs	r3, #0
 800027c:	723b      	strb	r3, [r7, #8]
	GPIOButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800027e:	2300      	movs	r3, #0
 8000280:	727b      	strb	r3, [r7, #9]
	GPIOButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000282:	2302      	movs	r3, #2
 8000284:	72bb      	strb	r3, [r7, #10]
	GPIOButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000286:	2300      	movs	r3, #0
 8000288:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&GPIOButton);
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fa29 	bl	80006e4 <GPIO_Init>
}
 8000292:	bf00      	nop
 8000294:	3710      	adds	r7, #16
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40020000 	.word	0x40020000

080002a0 <delay>:
void delay(void){
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i<500000/2; i++);
 80002a6:	2300      	movs	r3, #0
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	e002      	b.n	80002b2 <delay+0x12>
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3301      	adds	r3, #1
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a04      	ldr	r2, [pc, #16]	@ (80002c8 <delay+0x28>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d9f8      	bls.n	80002ac <delay+0xc>
}
 80002ba:	bf00      	nop
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	0003d08f 	.word	0x0003d08f

080002cc <SPI_verifyresponse>:
uint8_t SPI_verifyresponse(uint8_t ackbyte){
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	71fb      	strb	r3, [r7, #7]
	if (ackbyte == (uint8_t)0xF5){
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	2bf5      	cmp	r3, #245	@ 0xf5
 80002da:	d101      	bne.n	80002e0 <SPI_verifyresponse+0x14>
		//ack
		return 1;
 80002dc:	2301      	movs	r3, #1
 80002de:	e000      	b.n	80002e2 <SPI_verifyresponse+0x16>
	}
	else{
		return 0;
 80002e0:	2300      	movs	r3, #0
	}
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr

080002ec <main>:

int main(void)
{
 80002ec:	b5b0      	push	{r4, r5, r7, lr}
 80002ee:	b08e      	sub	sp, #56	@ 0x38
 80002f0:	af00      	add	r7, sp, #0
	uint8_t dummy_write = 0xff;
 80002f2:	23ff      	movs	r3, #255	@ 0xff
 80002f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t dummy_read;

	//initialise_monitor_handles();

	GPIO_ButtonInit();
 80002f8:	f7ff ffba 	bl	8000270 <GPIO_ButtonInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInit();
 80002fc:	f7ff ff6c 	bl	80001d8 <SPI2_GPIOInit>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Init();
 8000300:	f7ff ff98 	bl	8000234 <SPI2_Init>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 8000304:	2101      	movs	r1, #1
 8000306:	48cc      	ldr	r0, [pc, #816]	@ (8000638 <main+0x34c>)
 8000308:	f000 fdcc 	bl	8000ea4 <SPI_SSOEConfig>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_No_0) );
 800030c:	bf00      	nop
 800030e:	2100      	movs	r1, #0
 8000310:	48ca      	ldr	r0, [pc, #808]	@ (800063c <main+0x350>)
 8000312:	f000 fc67 	bl	8000be4 <GPIO_ReadFromInputPin>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d0f8      	beq.n	800030e <main+0x22>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 800031c:	f7ff ffc0 	bl	80002a0 <delay>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 8000320:	2101      	movs	r1, #1
 8000322:	48c5      	ldr	r0, [pc, #788]	@ (8000638 <main+0x34c>)
 8000324:	f000 fda3 	bl	8000e6e <SPI_PeripheralControl>

	    //1. CMD_LED_CTRL  	<pin no(1)>     <value(1)>

		uint8_t commandcode = COMMAND_LED_CTRL;
 8000328:	2350      	movs	r3, #80	@ 0x50
 800032a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		uint8_t ackbyte;
		uint8_t args[2];

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 800032e:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8000332:	2201      	movs	r2, #1
 8000334:	4619      	mov	r1, r3
 8000336:	48c0      	ldr	r0, [pc, #768]	@ (8000638 <main+0x34c>)
 8000338:	f000 fd2b 	bl	8000d92 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 800033c:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000340:	2201      	movs	r2, #1
 8000342:	4619      	mov	r1, r3
 8000344:	48bc      	ldr	r0, [pc, #752]	@ (8000638 <main+0x34c>)
 8000346:	f000 fd5b 	bl	8000e00 <SPI_ReceiveData>


		//Send some dummy bits (1 byte) fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 800034a:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 800034e:	2201      	movs	r2, #1
 8000350:	4619      	mov	r1, r3
 8000352:	48b9      	ldr	r0, [pc, #740]	@ (8000638 <main+0x34c>)
 8000354:	f000 fd1d 	bl	8000d92 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 8000358:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800035c:	2201      	movs	r2, #1
 800035e:	4619      	mov	r1, r3
 8000360:	48b5      	ldr	r0, [pc, #724]	@ (8000638 <main+0x34c>)
 8000362:	f000 fd4d 	bl	8000e00 <SPI_ReceiveData>

		if( SPI_verifyresponse(ackbyte))
 8000366:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800036a:	4618      	mov	r0, r3
 800036c:	f7ff ffae 	bl	80002cc <SPI_verifyresponse>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d013      	beq.n	800039e <main+0xb2>
		{
			args[0] = LED_PIN;
 8000376:	2309      	movs	r3, #9
 8000378:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			args[1] = LED_ON;
 800037c:	2301      	movs	r3, #1
 800037e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

			//send arguments
			SPI_SendData(SPI2,args,2);
 8000382:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000386:	2202      	movs	r2, #2
 8000388:	4619      	mov	r1, r3
 800038a:	48ab      	ldr	r0, [pc, #684]	@ (8000638 <main+0x34c>)
 800038c:	f000 fd01 	bl	8000d92 <SPI_SendData>
			// dummy read
			SPI_ReceiveData(SPI2,args,2);
 8000390:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000394:	2202      	movs	r2, #2
 8000396:	4619      	mov	r1, r3
 8000398:	48a7      	ldr	r0, [pc, #668]	@ (8000638 <main+0x34c>)
 800039a:	f000 fd31 	bl	8000e00 <SPI_ReceiveData>


		//2. CMD_SENOSR_READ   <analog pin number(1) >

		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_No_0) );
 800039e:	bf00      	nop
 80003a0:	2100      	movs	r1, #0
 80003a2:	48a6      	ldr	r0, [pc, #664]	@ (800063c <main+0x350>)
 80003a4:	f000 fc1e 	bl	8000be4 <GPIO_ReadFromInputPin>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d0f8      	beq.n	80003a0 <main+0xb4>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80003ae:	f7ff ff77 	bl	80002a0 <delay>

		commandcode = COMMAND_SENSOR_READ;
 80003b2:	2351      	movs	r3, #81	@ 0x51
 80003b4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 80003b8:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 80003bc:	2201      	movs	r2, #1
 80003be:	4619      	mov	r1, r3
 80003c0:	489d      	ldr	r0, [pc, #628]	@ (8000638 <main+0x34c>)
 80003c2:	f000 fce6 	bl	8000d92 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 80003c6:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 80003ca:	2201      	movs	r2, #1
 80003cc:	4619      	mov	r1, r3
 80003ce:	489a      	ldr	r0, [pc, #616]	@ (8000638 <main+0x34c>)
 80003d0:	f000 fd16 	bl	8000e00 <SPI_ReceiveData>


		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 80003d4:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 80003d8:	2201      	movs	r2, #1
 80003da:	4619      	mov	r1, r3
 80003dc:	4896      	ldr	r0, [pc, #600]	@ (8000638 <main+0x34c>)
 80003de:	f000 fcd8 	bl	8000d92 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 80003e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80003e6:	2201      	movs	r2, #1
 80003e8:	4619      	mov	r1, r3
 80003ea:	4893      	ldr	r0, [pc, #588]	@ (8000638 <main+0x34c>)
 80003ec:	f000 fd08 	bl	8000e00 <SPI_ReceiveData>

		if( SPI_verifyresponse(ackbyte))
 80003f0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff ff69 	bl	80002cc <SPI_verifyresponse>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d01f      	beq.n	8000440 <main+0x154>
		{
			args[0] = ANALOG_PIN0;
 8000400:	2300      	movs	r3, #0
 8000402:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

			//send arguments
			SPI_SendData(SPI2,args,1); //sending one byte of
 8000406:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800040a:	2201      	movs	r2, #1
 800040c:	4619      	mov	r1, r3
 800040e:	488a      	ldr	r0, [pc, #552]	@ (8000638 <main+0x34c>)
 8000410:	f000 fcbf 	bl	8000d92 <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2,&dummy_read,1);
 8000414:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000418:	2201      	movs	r2, #1
 800041a:	4619      	mov	r1, r3
 800041c:	4886      	ldr	r0, [pc, #536]	@ (8000638 <main+0x34c>)
 800041e:	f000 fcef 	bl	8000e00 <SPI_ReceiveData>

			//insert some delay so that slave can ready with the data
			delay();
 8000422:	f7ff ff3d 	bl	80002a0 <delay>

			//Send some dummy bits (1 byte) fetch the response from the slave
			SPI_SendData(SPI2,&dummy_write,1);
 8000426:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 800042a:	2201      	movs	r2, #1
 800042c:	4619      	mov	r1, r3
 800042e:	4882      	ldr	r0, [pc, #520]	@ (8000638 <main+0x34c>)
 8000430:	f000 fcaf 	bl	8000d92 <SPI_SendData>

			uint8_t analog_read;
			SPI_ReceiveData(SPI2,&analog_read,1);
 8000434:	1cfb      	adds	r3, r7, #3
 8000436:	2201      	movs	r2, #1
 8000438:	4619      	mov	r1, r3
 800043a:	487f      	ldr	r0, [pc, #508]	@ (8000638 <main+0x34c>)
 800043c:	f000 fce0 	bl	8000e00 <SPI_ReceiveData>
		}

		//3.  CMD_LED_READ 	 <pin no(1) >

		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_No_0) );
 8000440:	bf00      	nop
 8000442:	2100      	movs	r1, #0
 8000444:	487d      	ldr	r0, [pc, #500]	@ (800063c <main+0x350>)
 8000446:	f000 fbcd 	bl	8000be4 <GPIO_ReadFromInputPin>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d0f8      	beq.n	8000442 <main+0x156>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000450:	f7ff ff26 	bl	80002a0 <delay>

		commandcode = COMMAND_LED_READ;
 8000454:	2352      	movs	r3, #82	@ 0x52
 8000456:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 800045a:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 800045e:	2201      	movs	r2, #1
 8000460:	4619      	mov	r1, r3
 8000462:	4875      	ldr	r0, [pc, #468]	@ (8000638 <main+0x34c>)
 8000464:	f000 fc95 	bl	8000d92 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 8000468:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 800046c:	2201      	movs	r2, #1
 800046e:	4619      	mov	r1, r3
 8000470:	4871      	ldr	r0, [pc, #452]	@ (8000638 <main+0x34c>)
 8000472:	f000 fcc5 	bl	8000e00 <SPI_ReceiveData>

		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 8000476:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 800047a:	2201      	movs	r2, #1
 800047c:	4619      	mov	r1, r3
 800047e:	486e      	ldr	r0, [pc, #440]	@ (8000638 <main+0x34c>)
 8000480:	f000 fc87 	bl	8000d92 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 8000484:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000488:	2201      	movs	r2, #1
 800048a:	4619      	mov	r1, r3
 800048c:	486a      	ldr	r0, [pc, #424]	@ (8000638 <main+0x34c>)
 800048e:	f000 fcb7 	bl	8000e00 <SPI_ReceiveData>

		if( SPI_verifyresponse(ackbyte))
 8000492:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000496:	4618      	mov	r0, r3
 8000498:	f7ff ff18 	bl	80002cc <SPI_verifyresponse>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d01f      	beq.n	80004e2 <main+0x1f6>
		{
			args[0] = LED_PIN;
 80004a2:	2309      	movs	r3, #9
 80004a4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

			//send arguments
			SPI_SendData(SPI2,args,1); //sending one byte of
 80004a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004ac:	2201      	movs	r2, #1
 80004ae:	4619      	mov	r1, r3
 80004b0:	4861      	ldr	r0, [pc, #388]	@ (8000638 <main+0x34c>)
 80004b2:	f000 fc6e 	bl	8000d92 <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2,&dummy_read,1);
 80004b6:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 80004ba:	2201      	movs	r2, #1
 80004bc:	4619      	mov	r1, r3
 80004be:	485e      	ldr	r0, [pc, #376]	@ (8000638 <main+0x34c>)
 80004c0:	f000 fc9e 	bl	8000e00 <SPI_ReceiveData>

			//insert some delay so that slave can ready with the data
			delay();
 80004c4:	f7ff feec 	bl	80002a0 <delay>

			//Send some dummy bits (1 byte) fetch the response from the slave
			SPI_SendData(SPI2,&dummy_write,1);
 80004c8:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 80004cc:	2201      	movs	r2, #1
 80004ce:	4619      	mov	r1, r3
 80004d0:	4859      	ldr	r0, [pc, #356]	@ (8000638 <main+0x34c>)
 80004d2:	f000 fc5e 	bl	8000d92 <SPI_SendData>

			uint8_t led_status;
			SPI_ReceiveData(SPI2,&led_status,1);
 80004d6:	1cbb      	adds	r3, r7, #2
 80004d8:	2201      	movs	r2, #1
 80004da:	4619      	mov	r1, r3
 80004dc:	4856      	ldr	r0, [pc, #344]	@ (8000638 <main+0x34c>)
 80004de:	f000 fc8f 	bl	8000e00 <SPI_ReceiveData>
		}

		//4. CMD_PRINT 		<len(2)>  <message(len) >

		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_No_0) );
 80004e2:	bf00      	nop
 80004e4:	2100      	movs	r1, #0
 80004e6:	4855      	ldr	r0, [pc, #340]	@ (800063c <main+0x350>)
 80004e8:	f000 fb7c 	bl	8000be4 <GPIO_ReadFromInputPin>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d0f8      	beq.n	80004e4 <main+0x1f8>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80004f2:	f7ff fed5 	bl	80002a0 <delay>

		commandcode = COMMAND_PRINT;
 80004f6:	2353      	movs	r3, #83	@ 0x53
 80004f8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 80004fc:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8000500:	2201      	movs	r2, #1
 8000502:	4619      	mov	r1, r3
 8000504:	484c      	ldr	r0, [pc, #304]	@ (8000638 <main+0x34c>)
 8000506:	f000 fc44 	bl	8000d92 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 800050a:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 800050e:	2201      	movs	r2, #1
 8000510:	4619      	mov	r1, r3
 8000512:	4849      	ldr	r0, [pc, #292]	@ (8000638 <main+0x34c>)
 8000514:	f000 fc74 	bl	8000e00 <SPI_ReceiveData>

		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 8000518:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 800051c:	2201      	movs	r2, #1
 800051e:	4619      	mov	r1, r3
 8000520:	4845      	ldr	r0, [pc, #276]	@ (8000638 <main+0x34c>)
 8000522:	f000 fc36 	bl	8000d92 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 8000526:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800052a:	2201      	movs	r2, #1
 800052c:	4619      	mov	r1, r3
 800052e:	4842      	ldr	r0, [pc, #264]	@ (8000638 <main+0x34c>)
 8000530:	f000 fc66 	bl	8000e00 <SPI_ReceiveData>

		uint8_t message[] = "Hello ! How are you ??";
 8000534:	4b42      	ldr	r3, [pc, #264]	@ (8000640 <main+0x354>)
 8000536:	f107 0410 	add.w	r4, r7, #16
 800053a:	461d      	mov	r5, r3
 800053c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000540:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000544:	6020      	str	r0, [r4, #0]
 8000546:	3404      	adds	r4, #4
 8000548:	8021      	strh	r1, [r4, #0]
 800054a:	3402      	adds	r4, #2
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	7023      	strb	r3, [r4, #0]
		if( SPI_verifyresponse(ackbyte))
 8000550:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff feb9 	bl	80002cc <SPI_verifyresponse>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d034      	beq.n	80005ca <main+0x2de>
		{
			args[0] = strlen((char*)message);
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff fe2f 	bl	80001c8 <strlen>
 800056a:	4603      	mov	r3, r0
 800056c:	b2db      	uxtb	r3, r3
 800056e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

			//send arguments
			SPI_SendData(SPI2,args,1); //sending length
 8000572:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000576:	2201      	movs	r2, #1
 8000578:	4619      	mov	r1, r3
 800057a:	482f      	ldr	r0, [pc, #188]	@ (8000638 <main+0x34c>)
 800057c:	f000 fc09 	bl	8000d92 <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2,&dummy_read,1);
 8000580:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000584:	2201      	movs	r2, #1
 8000586:	4619      	mov	r1, r3
 8000588:	482b      	ldr	r0, [pc, #172]	@ (8000638 <main+0x34c>)
 800058a:	f000 fc39 	bl	8000e00 <SPI_ReceiveData>

			delay();
 800058e:	f7ff fe87 	bl	80002a0 <delay>

			//send message
			for(int i = 0 ; i < args[0] ; i++){
 8000592:	2300      	movs	r3, #0
 8000594:	637b      	str	r3, [r7, #52]	@ 0x34
 8000596:	e012      	b.n	80005be <main+0x2d2>
				SPI_SendData(SPI2,&message[i],1);
 8000598:	f107 0210 	add.w	r2, r7, #16
 800059c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800059e:	4413      	add	r3, r2
 80005a0:	2201      	movs	r2, #1
 80005a2:	4619      	mov	r1, r3
 80005a4:	4824      	ldr	r0, [pc, #144]	@ (8000638 <main+0x34c>)
 80005a6:	f000 fbf4 	bl	8000d92 <SPI_SendData>
				SPI_ReceiveData(SPI2,&dummy_read,1);
 80005aa:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 80005ae:	2201      	movs	r2, #1
 80005b0:	4619      	mov	r1, r3
 80005b2:	4821      	ldr	r0, [pc, #132]	@ (8000638 <main+0x34c>)
 80005b4:	f000 fc24 	bl	8000e00 <SPI_ReceiveData>
			for(int i = 0 ; i < args[0] ; i++){
 80005b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005ba:	3301      	adds	r3, #1
 80005bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80005be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80005c2:	461a      	mov	r2, r3
 80005c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005c6:	4293      	cmp	r3, r2
 80005c8:	dbe6      	blt.n	8000598 <main+0x2ac>

		}

		//5. CMD_ID_READ
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_No_0) );
 80005ca:	bf00      	nop
 80005cc:	2100      	movs	r1, #0
 80005ce:	481b      	ldr	r0, [pc, #108]	@ (800063c <main+0x350>)
 80005d0:	f000 fb08 	bl	8000be4 <GPIO_ReadFromInputPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d0f8      	beq.n	80005cc <main+0x2e0>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80005da:	f7ff fe61 	bl	80002a0 <delay>

		commandcode = COMMAND_ID_READ;
 80005de:	2354      	movs	r3, #84	@ 0x54
 80005e0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

		//send command
		SPI_SendData(SPI2,&commandcode,1);
 80005e4:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 80005e8:	2201      	movs	r2, #1
 80005ea:	4619      	mov	r1, r3
 80005ec:	4812      	ldr	r0, [pc, #72]	@ (8000638 <main+0x34c>)
 80005ee:	f000 fbd0 	bl	8000d92 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 80005f2:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 80005f6:	2201      	movs	r2, #1
 80005f8:	4619      	mov	r1, r3
 80005fa:	480f      	ldr	r0, [pc, #60]	@ (8000638 <main+0x34c>)
 80005fc:	f000 fc00 	bl	8000e00 <SPI_ReceiveData>

		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 8000600:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000604:	2201      	movs	r2, #1
 8000606:	4619      	mov	r1, r3
 8000608:	480b      	ldr	r0, [pc, #44]	@ (8000638 <main+0x34c>)
 800060a:	f000 fbc2 	bl	8000d92 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackbyte,1);
 800060e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000612:	2201      	movs	r2, #1
 8000614:	4619      	mov	r1, r3
 8000616:	4808      	ldr	r0, [pc, #32]	@ (8000638 <main+0x34c>)
 8000618:	f000 fbf2 	bl	8000e00 <SPI_ReceiveData>

		uint8_t id[11];
		uint32_t i=0;
 800061c:	2300      	movs	r3, #0
 800061e:	633b      	str	r3, [r7, #48]	@ 0x30
		if( SPI_verifyresponse(ackbyte))
 8000620:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff fe51 	bl	80002cc <SPI_verifyresponse>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d020      	beq.n	8000672 <main+0x386>
		{
			//read 10 bytes id from the slave
			for(  i = 0 ; i < 10 ; i++)
 8000630:	2300      	movs	r3, #0
 8000632:	633b      	str	r3, [r7, #48]	@ 0x30
 8000634:	e018      	b.n	8000668 <main+0x37c>
 8000636:	bf00      	nop
 8000638:	40003800 	.word	0x40003800
 800063c:	40020000 	.word	0x40020000
 8000640:	08000f3c 	.word	0x08000f3c
			{
				//send dummy byte to fetch data from slave
				SPI_SendData(SPI2,&dummy_write,1);
 8000644:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000648:	2201      	movs	r2, #1
 800064a:	4619      	mov	r1, r3
 800064c:	480f      	ldr	r0, [pc, #60]	@ (800068c <main+0x3a0>)
 800064e:	f000 fba0 	bl	8000d92 <SPI_SendData>
				SPI_ReceiveData(SPI2,&id[i],1);
 8000652:	1d3a      	adds	r2, r7, #4
 8000654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000656:	4413      	add	r3, r2
 8000658:	2201      	movs	r2, #1
 800065a:	4619      	mov	r1, r3
 800065c:	480b      	ldr	r0, [pc, #44]	@ (800068c <main+0x3a0>)
 800065e:	f000 fbcf 	bl	8000e00 <SPI_ReceiveData>
			for(  i = 0 ; i < 10 ; i++)
 8000662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000664:	3301      	adds	r3, #1
 8000666:	633b      	str	r3, [r7, #48]	@ 0x30
 8000668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800066a:	2b09      	cmp	r3, #9
 800066c:	d9ea      	bls.n	8000644 <main+0x358>
			}

			id[10] = '\0';
 800066e:	2300      	movs	r3, #0
 8000670:	73bb      	strb	r3, [r7, #14]

		}
		//have to check if SPI is busy
		while(SPI_GetFlagStatus(SPI2, SPI_BSY_FLAG));
 8000672:	bf00      	nop
 8000674:	2180      	movs	r1, #128	@ 0x80
 8000676:	4805      	ldr	r0, [pc, #20]	@ (800068c <main+0x3a0>)
 8000678:	f000 fb78 	bl	8000d6c <SPI_GetFlagStatus>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1f8      	bne.n	8000674 <main+0x388>
		//disbale
		SPI_PeripheralControl(SPI2, DISABLE);
 8000682:	2100      	movs	r1, #0
 8000684:	4801      	ldr	r0, [pc, #4]	@ (800068c <main+0x3a0>)
 8000686:	f000 fbf2 	bl	8000e6e <SPI_PeripheralControl>
	{
 800068a:	e63f      	b.n	800030c <main+0x20>
 800068c:	40003800 	.word	0x40003800

08000690 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000690:	480d      	ldr	r0, [pc, #52]	@ (80006c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000692:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000694:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000698:	480c      	ldr	r0, [pc, #48]	@ (80006cc <LoopForever+0x6>)
  ldr r1, =_edata
 800069a:	490d      	ldr	r1, [pc, #52]	@ (80006d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800069c:	4a0d      	ldr	r2, [pc, #52]	@ (80006d4 <LoopForever+0xe>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a0:	e002      	b.n	80006a8 <LoopCopyDataInit>

080006a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a6:	3304      	adds	r3, #4

080006a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ac:	d3f9      	bcc.n	80006a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ae:	4a0a      	ldr	r2, [pc, #40]	@ (80006d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b0:	4c0a      	ldr	r4, [pc, #40]	@ (80006dc <LoopForever+0x16>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b4:	e001      	b.n	80006ba <LoopFillZerobss>

080006b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b8:	3204      	adds	r2, #4

080006ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006bc:	d3fb      	bcc.n	80006b6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80006be:	f000 fc0d 	bl	8000edc <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80006c2:	f7ff fe13 	bl	80002ec <main>

080006c6 <LoopForever>:

LoopForever:
  b LoopForever
 80006c6:	e7fe      	b.n	80006c6 <LoopForever>
  ldr   r0, =_estack
 80006c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006d4:	08000f64 	.word	0x08000f64
  ldr r2, =_sbss
 80006d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006dc:	2000001c 	.word	0x2000001c

080006e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e0:	e7fe      	b.n	80006e0 <ADC_IRQHandler>
	...

080006e4 <GPIO_Init>:
	* @param  *pGPIOHandle : pointer to the GPIO handle struct
	* @param
	* @param
	* @return None
	*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	//enable peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2101      	movs	r1, #1
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 f98e 	bl	8000a14 <GPIO_PeriClockControl>
		//1 configure the mode of GPIO pin
	uint32_t temp = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	795b      	ldrb	r3, [r3, #5]
 8000700:	2b03      	cmp	r3, #3
 8000702:	d822      	bhi.n	800074a <GPIO_Init+0x66>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	795b      	ldrb	r3, [r3, #5]
 8000708:	461a      	mov	r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	791b      	ldrb	r3, [r3, #4]
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	fa02 f303 	lsl.w	r3, r2, r3
 8000714:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3<<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	791b      	ldrb	r3, [r3, #4]
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	2103      	movs	r1, #3
 8000724:	fa01 f303 	lsl.w	r3, r1, r3
 8000728:	43db      	mvns	r3, r3
 800072a:	4619      	mov	r1, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	400a      	ands	r2, r1
 8000732:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	6819      	ldr	r1, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	697a      	ldr	r2, [r7, #20]
 8000740:	430a      	orrs	r2, r1
 8000742:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	e0c1      	b.n	80008ce <GPIO_Init+0x1ea>
	}
	else{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	795b      	ldrb	r3, [r3, #5]
 800074e:	2b04      	cmp	r3, #4
 8000750:	d117      	bne.n	8000782 <GPIO_Init+0x9e>
			//1. configure falling edge reg
			EXTI->FTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000752:	4b47      	ldr	r3, [pc, #284]	@ (8000870 <GPIO_Init+0x18c>)
 8000754:	68db      	ldr	r3, [r3, #12]
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	7912      	ldrb	r2, [r2, #4]
 800075a:	4611      	mov	r1, r2
 800075c:	2201      	movs	r2, #1
 800075e:	408a      	lsls	r2, r1
 8000760:	4611      	mov	r1, r2
 8000762:	4a43      	ldr	r2, [pc, #268]	@ (8000870 <GPIO_Init+0x18c>)
 8000764:	430b      	orrs	r3, r1
 8000766:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000768:	4b41      	ldr	r3, [pc, #260]	@ (8000870 <GPIO_Init+0x18c>)
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	7912      	ldrb	r2, [r2, #4]
 8000770:	4611      	mov	r1, r2
 8000772:	2201      	movs	r2, #1
 8000774:	408a      	lsls	r2, r1
 8000776:	43d2      	mvns	r2, r2
 8000778:	4611      	mov	r1, r2
 800077a:	4a3d      	ldr	r2, [pc, #244]	@ (8000870 <GPIO_Init+0x18c>)
 800077c:	400b      	ands	r3, r1
 800077e:	6093      	str	r3, [r2, #8]
 8000780:	e035      	b.n	80007ee <GPIO_Init+0x10a>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	795b      	ldrb	r3, [r3, #5]
 8000786:	2b05      	cmp	r3, #5
 8000788:	d117      	bne.n	80007ba <GPIO_Init+0xd6>
			EXTI->FTSR &= ~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800078a:	4b39      	ldr	r3, [pc, #228]	@ (8000870 <GPIO_Init+0x18c>)
 800078c:	68db      	ldr	r3, [r3, #12]
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	7912      	ldrb	r2, [r2, #4]
 8000792:	4611      	mov	r1, r2
 8000794:	2201      	movs	r2, #1
 8000796:	408a      	lsls	r2, r1
 8000798:	43d2      	mvns	r2, r2
 800079a:	4611      	mov	r1, r2
 800079c:	4a34      	ldr	r2, [pc, #208]	@ (8000870 <GPIO_Init+0x18c>)
 800079e:	400b      	ands	r3, r1
 80007a0:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007a2:	4b33      	ldr	r3, [pc, #204]	@ (8000870 <GPIO_Init+0x18c>)
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	7912      	ldrb	r2, [r2, #4]
 80007aa:	4611      	mov	r1, r2
 80007ac:	2201      	movs	r2, #1
 80007ae:	408a      	lsls	r2, r1
 80007b0:	4611      	mov	r1, r2
 80007b2:	4a2f      	ldr	r2, [pc, #188]	@ (8000870 <GPIO_Init+0x18c>)
 80007b4:	430b      	orrs	r3, r1
 80007b6:	6093      	str	r3, [r2, #8]
 80007b8:	e019      	b.n	80007ee <GPIO_Init+0x10a>

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	795b      	ldrb	r3, [r3, #5]
 80007be:	2b06      	cmp	r3, #6
 80007c0:	d115      	bne.n	80007ee <GPIO_Init+0x10a>
			EXTI->FTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000870 <GPIO_Init+0x18c>)
 80007c4:	68db      	ldr	r3, [r3, #12]
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	7912      	ldrb	r2, [r2, #4]
 80007ca:	4611      	mov	r1, r2
 80007cc:	2201      	movs	r2, #1
 80007ce:	408a      	lsls	r2, r1
 80007d0:	4611      	mov	r1, r2
 80007d2:	4a27      	ldr	r2, [pc, #156]	@ (8000870 <GPIO_Init+0x18c>)
 80007d4:	430b      	orrs	r3, r1
 80007d6:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007d8:	4b25      	ldr	r3, [pc, #148]	@ (8000870 <GPIO_Init+0x18c>)
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	7912      	ldrb	r2, [r2, #4]
 80007e0:	4611      	mov	r1, r2
 80007e2:	2201      	movs	r2, #1
 80007e4:	408a      	lsls	r2, r1
 80007e6:	4611      	mov	r1, r2
 80007e8:	4a21      	ldr	r2, [pc, #132]	@ (8000870 <GPIO_Init+0x18c>)
 80007ea:	430b      	orrs	r3, r1
 80007ec:	6093      	str	r3, [r2, #8]

		}
		//Configure GPIO port slection in SYSCFG
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	791b      	ldrb	r3, [r3, #4]
 80007f2:	089b      	lsrs	r3, r3, #2
 80007f4:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	791b      	ldrb	r3, [r3, #4]
 80007fa:	f003 0303 	and.w	r3, r3, #3
 80007fe:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a1b      	ldr	r2, [pc, #108]	@ (8000874 <GPIO_Init+0x190>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d044      	beq.n	8000894 <GPIO_Init+0x1b0>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a1a      	ldr	r2, [pc, #104]	@ (8000878 <GPIO_Init+0x194>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d02b      	beq.n	800086c <GPIO_Init+0x188>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a18      	ldr	r2, [pc, #96]	@ (800087c <GPIO_Init+0x198>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d024      	beq.n	8000868 <GPIO_Init+0x184>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a17      	ldr	r2, [pc, #92]	@ (8000880 <GPIO_Init+0x19c>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d01d      	beq.n	8000864 <GPIO_Init+0x180>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a15      	ldr	r2, [pc, #84]	@ (8000884 <GPIO_Init+0x1a0>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d016      	beq.n	8000860 <GPIO_Init+0x17c>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a14      	ldr	r2, [pc, #80]	@ (8000888 <GPIO_Init+0x1a4>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d00f      	beq.n	800085c <GPIO_Init+0x178>
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a12      	ldr	r2, [pc, #72]	@ (800088c <GPIO_Init+0x1a8>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d008      	beq.n	8000858 <GPIO_Init+0x174>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a11      	ldr	r2, [pc, #68]	@ (8000890 <GPIO_Init+0x1ac>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d101      	bne.n	8000854 <GPIO_Init+0x170>
 8000850:	2307      	movs	r3, #7
 8000852:	e020      	b.n	8000896 <GPIO_Init+0x1b2>
 8000854:	2300      	movs	r3, #0
 8000856:	e01e      	b.n	8000896 <GPIO_Init+0x1b2>
 8000858:	2306      	movs	r3, #6
 800085a:	e01c      	b.n	8000896 <GPIO_Init+0x1b2>
 800085c:	2305      	movs	r3, #5
 800085e:	e01a      	b.n	8000896 <GPIO_Init+0x1b2>
 8000860:	2304      	movs	r3, #4
 8000862:	e018      	b.n	8000896 <GPIO_Init+0x1b2>
 8000864:	2303      	movs	r3, #3
 8000866:	e016      	b.n	8000896 <GPIO_Init+0x1b2>
 8000868:	2302      	movs	r3, #2
 800086a:	e014      	b.n	8000896 <GPIO_Init+0x1b2>
 800086c:	2301      	movs	r3, #1
 800086e:	e012      	b.n	8000896 <GPIO_Init+0x1b2>
 8000870:	40013c00 	.word	0x40013c00
 8000874:	40020000 	.word	0x40020000
 8000878:	40020400 	.word	0x40020400
 800087c:	40020800 	.word	0x40020800
 8000880:	40020c00 	.word	0x40020c00
 8000884:	40021000 	.word	0x40021000
 8000888:	40021400 	.word	0x40021400
 800088c:	40021800 	.word	0x40021800
 8000890:	40021c00 	.word	0x40021c00
 8000894:	2300      	movs	r3, #0
 8000896:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000898:	4b5b      	ldr	r3, [pc, #364]	@ (8000a08 <GPIO_Init+0x324>)
 800089a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089c:	4a5a      	ldr	r2, [pc, #360]	@ (8000a08 <GPIO_Init+0x324>)
 800089e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a2:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode<<(temp2*4);
 80008a4:	7c7a      	ldrb	r2, [r7, #17]
 80008a6:	7cbb      	ldrb	r3, [r7, #18]
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	fa02 f103 	lsl.w	r1, r2, r3
 80008ae:	4a57      	ldr	r2, [pc, #348]	@ (8000a0c <GPIO_Init+0x328>)
 80008b0:	7cfb      	ldrb	r3, [r7, #19]
 80008b2:	3302      	adds	r3, #2
 80008b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//enable interrupt delievery in IMR
		EXTI->IMR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008b8:	4b55      	ldr	r3, [pc, #340]	@ (8000a10 <GPIO_Init+0x32c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	7912      	ldrb	r2, [r2, #4]
 80008c0:	4611      	mov	r1, r2
 80008c2:	2201      	movs	r2, #1
 80008c4:	408a      	lsls	r2, r1
 80008c6:	4611      	mov	r1, r2
 80008c8:	4a51      	ldr	r2, [pc, #324]	@ (8000a10 <GPIO_Init+0x32c>)
 80008ca:	430b      	orrs	r3, r1
 80008cc:	6013      	str	r3, [r2, #0]
	}

		//2 configure the speed of GPIO pin
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	799b      	ldrb	r3, [r3, #6]
 80008d2:	461a      	mov	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	791b      	ldrb	r3, [r3, #4]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3<<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	689a      	ldr	r2, [r3, #8]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	791b      	ldrb	r3, [r3, #4]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	2103      	movs	r1, #3
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	43db      	mvns	r3, r3
 80008f4:	4619      	mov	r1, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	400a      	ands	r2, r1
 80008fc:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	6899      	ldr	r1, [r3, #8]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	697a      	ldr	r2, [r7, #20]
 800090a:	430a      	orrs	r2, r1
 800090c:	609a      	str	r2, [r3, #8]
	temp = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]

		//3 configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	79db      	ldrb	r3, [r3, #7]
 8000916:	461a      	mov	r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	791b      	ldrb	r3, [r3, #4]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3<<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	68da      	ldr	r2, [r3, #12]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	791b      	ldrb	r3, [r3, #4]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	2103      	movs	r1, #3
 8000932:	fa01 f303 	lsl.w	r3, r1, r3
 8000936:	43db      	mvns	r3, r3
 8000938:	4619      	mov	r1, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	400a      	ands	r2, r1
 8000940:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	68d9      	ldr	r1, [r3, #12]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	430a      	orrs	r2, r1
 8000950:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
		//4 configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	7a1b      	ldrb	r3, [r3, #8]
 800095a:	461a      	mov	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	791b      	ldrb	r3, [r3, #4]
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1<<(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	685a      	ldr	r2, [r3, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	791b      	ldrb	r3, [r3, #4]
 8000970:	4619      	mov	r1, r3
 8000972:	2301      	movs	r3, #1
 8000974:	408b      	lsls	r3, r1
 8000976:	43db      	mvns	r3, r3
 8000978:	4619      	mov	r1, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	400a      	ands	r2, r1
 8000980:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	6859      	ldr	r1, [r3, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	697a      	ldr	r2, [r7, #20]
 800098e:	430a      	orrs	r2, r1
 8000990:	605a      	str	r2, [r3, #4]
		//5 configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	795b      	ldrb	r3, [r3, #5]
 8000996:	2b02      	cmp	r3, #2
 8000998:	d131      	bne.n	80009fe <GPIO_Init+0x31a>
		uint8_t temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)/8;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	791b      	ldrb	r3, [r3, #4]
 800099e:	08db      	lsrs	r3, r3, #3
 80009a0:	743b      	strb	r3, [r7, #16]
		uint8_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%8;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	791b      	ldrb	r3, [r3, #4]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~((0xF << (4 * temp2)));
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	7c3a      	ldrb	r2, [r7, #16]
 80009b2:	3208      	adds	r2, #8
 80009b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	220f      	movs	r2, #15
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	4618      	mov	r0, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	7c3a      	ldrb	r2, [r7, #16]
 80009cc:	4001      	ands	r1, r0
 80009ce:	3208      	adds	r2, #8
 80009d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	7c3a      	ldrb	r2, [r7, #16]
 80009da:	3208      	adds	r2, #8
 80009dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	7a5b      	ldrb	r3, [r3, #9]
 80009e4:	461a      	mov	r2, r3
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	7c3a      	ldrb	r2, [r7, #16]
 80009f6:	4301      	orrs	r1, r0
 80009f8:	3208      	adds	r2, #8
 80009fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80009fe:	bf00      	nop
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40013800 	.word	0x40013800
 8000a10:	40013c00 	.word	0x40013c00

08000a14 <GPIO_PeriClockControl>:
	* @param  *pGPIOx : GPIO peripheral base address
	* @param  EnorDi  : ENABLE(1) or DISABLE(0) macros
	* @param
	* @return None
	*/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi== ENABLE){
 8000a20:	78fb      	ldrb	r3, [r7, #3]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d162      	bne.n	8000aec <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA){
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a64      	ldr	r2, [pc, #400]	@ (8000bbc <GPIO_PeriClockControl+0x1a8>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d106      	bne.n	8000a3c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000a2e:	4b64      	ldr	r3, [pc, #400]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	4a63      	ldr	r2, [pc, #396]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6313      	str	r3, [r2, #48]	@ 0x30
		else if (pGPIOx == GPIOI){
			GPIOI_PCLK_DI();
		}
	}

}
 8000a3a:	e0b9      	b.n	8000bb0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB){
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a61      	ldr	r2, [pc, #388]	@ (8000bc4 <GPIO_PeriClockControl+0x1b0>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d106      	bne.n	8000a52 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000a44:	4b5e      	ldr	r3, [pc, #376]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a48:	4a5d      	ldr	r2, [pc, #372]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000a4a:	f043 0302 	orr.w	r3, r3, #2
 8000a4e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a50:	e0ae      	b.n	8000bb0 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC){
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a5c      	ldr	r2, [pc, #368]	@ (8000bc8 <GPIO_PeriClockControl+0x1b4>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d106      	bne.n	8000a68 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000a5a:	4b59      	ldr	r3, [pc, #356]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a58      	ldr	r2, [pc, #352]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000a60:	f043 0304 	orr.w	r3, r3, #4
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a66:	e0a3      	b.n	8000bb0 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD){
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a58      	ldr	r2, [pc, #352]	@ (8000bcc <GPIO_PeriClockControl+0x1b8>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d106      	bne.n	8000a7e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000a70:	4b53      	ldr	r3, [pc, #332]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a74:	4a52      	ldr	r2, [pc, #328]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000a76:	f043 0308 	orr.w	r3, r3, #8
 8000a7a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a7c:	e098      	b.n	8000bb0 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE){
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a53      	ldr	r2, [pc, #332]	@ (8000bd0 <GPIO_PeriClockControl+0x1bc>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d106      	bne.n	8000a94 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000a86:	4b4e      	ldr	r3, [pc, #312]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a4d      	ldr	r2, [pc, #308]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000a8c:	f043 0310 	orr.w	r3, r3, #16
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a92:	e08d      	b.n	8000bb0 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF){
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a4f      	ldr	r2, [pc, #316]	@ (8000bd4 <GPIO_PeriClockControl+0x1c0>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d106      	bne.n	8000aaa <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000a9c:	4b48      	ldr	r3, [pc, #288]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa0:	4a47      	ldr	r2, [pc, #284]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000aa2:	f043 0320 	orr.w	r3, r3, #32
 8000aa6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000aa8:	e082      	b.n	8000bb0 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG){
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a4a      	ldr	r2, [pc, #296]	@ (8000bd8 <GPIO_PeriClockControl+0x1c4>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d106      	bne.n	8000ac0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000ab2:	4b43      	ldr	r3, [pc, #268]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	4a42      	ldr	r2, [pc, #264]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000ab8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000abc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000abe:	e077      	b.n	8000bb0 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH){
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a46      	ldr	r2, [pc, #280]	@ (8000bdc <GPIO_PeriClockControl+0x1c8>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d106      	bne.n	8000ad6 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000ac8:	4b3d      	ldr	r3, [pc, #244]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000acc:	4a3c      	ldr	r2, [pc, #240]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ad2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ad4:	e06c      	b.n	8000bb0 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI){
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a41      	ldr	r2, [pc, #260]	@ (8000be0 <GPIO_PeriClockControl+0x1cc>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d168      	bne.n	8000bb0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000ade:	4b38      	ldr	r3, [pc, #224]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a37      	ldr	r2, [pc, #220]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000aea:	e061      	b.n	8000bb0 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA){
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a33      	ldr	r2, [pc, #204]	@ (8000bbc <GPIO_PeriClockControl+0x1a8>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d106      	bne.n	8000b02 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000af4:	4b32      	ldr	r3, [pc, #200]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af8:	4a31      	ldr	r2, [pc, #196]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000afa:	f023 0301 	bic.w	r3, r3, #1
 8000afe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b00:	e056      	b.n	8000bb0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB){
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a2f      	ldr	r2, [pc, #188]	@ (8000bc4 <GPIO_PeriClockControl+0x1b0>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d106      	bne.n	8000b18 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000b0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a2c      	ldr	r2, [pc, #176]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000b10:	f023 0302 	bic.w	r3, r3, #2
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b16:	e04b      	b.n	8000bb0 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC){
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a2b      	ldr	r2, [pc, #172]	@ (8000bc8 <GPIO_PeriClockControl+0x1b4>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d106      	bne.n	8000b2e <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000b20:	4b27      	ldr	r3, [pc, #156]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b24:	4a26      	ldr	r2, [pc, #152]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000b26:	f023 0304 	bic.w	r3, r3, #4
 8000b2a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b2c:	e040      	b.n	8000bb0 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD){
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a26      	ldr	r2, [pc, #152]	@ (8000bcc <GPIO_PeriClockControl+0x1b8>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d106      	bne.n	8000b44 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000b36:	4b22      	ldr	r3, [pc, #136]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4a21      	ldr	r2, [pc, #132]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000b3c:	f023 0308 	bic.w	r3, r3, #8
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b42:	e035      	b.n	8000bb0 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE){
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a22      	ldr	r2, [pc, #136]	@ (8000bd0 <GPIO_PeriClockControl+0x1bc>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d106      	bne.n	8000b5a <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b50:	4a1b      	ldr	r2, [pc, #108]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000b52:	f023 0310 	bic.w	r3, r3, #16
 8000b56:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b58:	e02a      	b.n	8000bb0 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF){
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000bd4 <GPIO_PeriClockControl+0x1c0>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d106      	bne.n	8000b70 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000b62:	4b17      	ldr	r3, [pc, #92]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a16      	ldr	r2, [pc, #88]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000b68:	f023 0320 	bic.w	r3, r3, #32
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b6e:	e01f      	b.n	8000bb0 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG){
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a19      	ldr	r2, [pc, #100]	@ (8000bd8 <GPIO_PeriClockControl+0x1c4>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d106      	bne.n	8000b86 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000b78:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7c:	4a10      	ldr	r2, [pc, #64]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000b7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000b82:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b84:	e014      	b.n	8000bb0 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH){
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a14      	ldr	r2, [pc, #80]	@ (8000bdc <GPIO_PeriClockControl+0x1c8>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d106      	bne.n	8000b9c <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000b94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000b98:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b9a:	e009      	b.n	8000bb0 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI){
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a10      	ldr	r2, [pc, #64]	@ (8000be0 <GPIO_PeriClockControl+0x1cc>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d105      	bne.n	8000bb0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba8:	4a05      	ldr	r2, [pc, #20]	@ (8000bc0 <GPIO_PeriClockControl+0x1ac>)
 8000baa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000bae:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020400 	.word	0x40020400
 8000bc8:	40020800 	.word	0x40020800
 8000bcc:	40020c00 	.word	0x40020c00
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40021400 	.word	0x40021400
 8000bd8:	40021800 	.word	0x40021800
 8000bdc:	40021c00 	.word	0x40021c00
 8000be0:	40022000 	.word	0x40022000

08000be4 <GPIO_ReadFromInputPin>:
	* @param  *pGPIOx : GPIO peripheral base address
	* @param  PinNum  : pin number that you want to read from
	* @param
	* @return : uint8_t data from GPIO pin (0 if low, 1 if high)
	*/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNum){
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNum) & 0x00000001);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	691a      	ldr	r2, [r3, #16]
 8000bf4:	78fb      	ldrb	r3, [r7, #3]
 8000bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	73fb      	strb	r3, [r7, #15]
	return value;
 8000c02:	7bfb      	ldrb	r3, [r7, #15]

}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
	...

08000c10 <SPI_PeriClockControl>:
	* @param  *pSPIx : pointer to the SPI base address
	* @param  EnorDi : takes either ENABLE(1) or DISABLE(0)to enable or disable clock
	* @param
	* @return None
	*/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi== ENABLE){
 8000c1c:	78fb      	ldrb	r3, [r7, #3]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d120      	bne.n	8000c64 <SPI_PeriClockControl+0x54>
			if(pSPIx == SPI1){
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a22      	ldr	r2, [pc, #136]	@ (8000cb0 <SPI_PeriClockControl+0xa0>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d106      	bne.n	8000c38 <SPI_PeriClockControl+0x28>
				SPI1_PCLK_EN();
 8000c2a:	4b22      	ldr	r3, [pc, #136]	@ (8000cb4 <SPI_PeriClockControl+0xa4>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2e:	4a21      	ldr	r2, [pc, #132]	@ (8000cb4 <SPI_PeriClockControl+0xa4>)
 8000c30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c34:	6453      	str	r3, [r2, #68]	@ 0x44
						else if (pSPIx == SPI3){
							SPI3_PCLK_DI();
						}
		}

}
 8000c36:	e035      	b.n	8000ca4 <SPI_PeriClockControl+0x94>
			else if(pSPIx == SPI2){
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a1f      	ldr	r2, [pc, #124]	@ (8000cb8 <SPI_PeriClockControl+0xa8>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d106      	bne.n	8000c4e <SPI_PeriClockControl+0x3e>
				SPI2_PCLK_EN();
 8000c40:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb4 <SPI_PeriClockControl+0xa4>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c44:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb4 <SPI_PeriClockControl+0xa4>)
 8000c46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c4a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c4c:	e02a      	b.n	8000ca4 <SPI_PeriClockControl+0x94>
			else if (pSPIx == SPI3){
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a1a      	ldr	r2, [pc, #104]	@ (8000cbc <SPI_PeriClockControl+0xac>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d126      	bne.n	8000ca4 <SPI_PeriClockControl+0x94>
				SPI3_PCLK_EN();
 8000c56:	4b17      	ldr	r3, [pc, #92]	@ (8000cb4 <SPI_PeriClockControl+0xa4>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5a:	4a16      	ldr	r2, [pc, #88]	@ (8000cb4 <SPI_PeriClockControl+0xa4>)
 8000c5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c60:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c62:	e01f      	b.n	8000ca4 <SPI_PeriClockControl+0x94>
			if(pSPIx == SPI1){
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a12      	ldr	r2, [pc, #72]	@ (8000cb0 <SPI_PeriClockControl+0xa0>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d106      	bne.n	8000c7a <SPI_PeriClockControl+0x6a>
							SPI1_PCLK_DI();
 8000c6c:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <SPI_PeriClockControl+0xa4>)
 8000c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c70:	4a10      	ldr	r2, [pc, #64]	@ (8000cb4 <SPI_PeriClockControl+0xa4>)
 8000c72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c76:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000c78:	e014      	b.n	8000ca4 <SPI_PeriClockControl+0x94>
					else if(pSPIx == SPI2){
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a0e      	ldr	r2, [pc, #56]	@ (8000cb8 <SPI_PeriClockControl+0xa8>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d106      	bne.n	8000c90 <SPI_PeriClockControl+0x80>
							SPI2_PCLK_DI();
 8000c82:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <SPI_PeriClockControl+0xa4>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c86:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb4 <SPI_PeriClockControl+0xa4>)
 8000c88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000c8c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c8e:	e009      	b.n	8000ca4 <SPI_PeriClockControl+0x94>
						else if (pSPIx == SPI3){
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <SPI_PeriClockControl+0xac>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d105      	bne.n	8000ca4 <SPI_PeriClockControl+0x94>
							SPI3_PCLK_DI();
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <SPI_PeriClockControl+0xa4>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9c:	4a05      	ldr	r2, [pc, #20]	@ (8000cb4 <SPI_PeriClockControl+0xa4>)
 8000c9e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000ca2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40013000 	.word	0x40013000
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40003800 	.word	0x40003800
 8000cbc:	40003c00 	.word	0x40003c00

08000cc0 <SPI_Init>:
	* @param  *pSPIHandle : pointer to the GPIO handle struct
	* @param
	* @param
	* @return None
	*/
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	//enable SPI clock
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2101      	movs	r1, #1
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ff9e 	bl	8000c10 <SPI_PeriClockControl>
	//configure SPI_CR1 reg
	uint32_t temp = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
	//1. configure device mode
	temp |= pSPIHandle->SPIConfig.SPI_DeviceMode <<SPI_CR1_MSTR;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	791b      	ldrb	r3, [r3, #4]
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	60fb      	str	r3, [r7, #12]
	//2. configure bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	795b      	ldrb	r3, [r3, #5]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d104      	bne.n	8000cf6 <SPI_Init+0x36>
		//bidi mode should be cleared
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	e014      	b.n	8000d20 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	795b      	ldrb	r3, [r3, #5]
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d104      	bne.n	8000d08 <SPI_Init+0x48>
		//bidi mode should be set
		temp |= (1<<SPI_CR1_BIDIMODE);
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	e00b      	b.n	8000d20 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	795b      	ldrb	r3, [r3, #5]
 8000d0c:	2b03      	cmp	r3, #3
 8000d0e:	d107      	bne.n	8000d20 <SPI_Init+0x60>
		//BIDI mode should be cleared and Rx_only bit must be set
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000d16:	60fb      	str	r3, [r7, #12]
		temp |= (1<<SPI_CR1_RXONLY);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d1e:	60fb      	str	r3, [r7, #12]
	}
	//configure clk speed
	temp |= pSPIHandle->SPIConfig.SPI_SclkSpeed <<SPI_CR1_BR;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	799b      	ldrb	r3, [r3, #6]
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]
	//configure DFF
	temp |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	79db      	ldrb	r3, [r3, #7]
 8000d30:	02db      	lsls	r3, r3, #11
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]
	//configure CPOl
	temp |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7a1b      	ldrb	r3, [r3, #8]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]
	//config CPHA
	temp |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	7a5b      	ldrb	r3, [r3, #9]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	60fb      	str	r3, [r7, #12]

	temp |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	7a9b      	ldrb	r3, [r3, #10]
 8000d54:	025b      	lsls	r3, r3, #9
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]


	pSPIHandle->pSPIx->CR1 = temp;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	601a      	str	r2, [r3, #0]

}
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <SPI_GetFlagStatus>:

}
/*
 * gets the flag stat
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName){
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e000      	b.n	8000d88 <SPI_GetFlagStatus+0x1c>
	}
	else{
		return FLAG_RESET;
 8000d86:	2300      	movs	r3, #0
	}
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr

08000d92 <SPI_SendData>:
	* @param  *pSPIx : pointer to the SPI base address
	* @param  *pTxBuffer : pointer to the Tx buffer where data is held
	* @param  Len : length of data
	* @return None
	*/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b084      	sub	sp, #16
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
	while(Len>0){
 8000d9e:	e027      	b.n	8000df0 <SPI_SendData+0x5e>
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == RESET);//blocking and polling
 8000da0:	bf00      	nop
 8000da2:	2102      	movs	r1, #2
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	f7ff ffe1 	bl	8000d6c <SPI_GetFlagStatus>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d0f8      	beq.n	8000da2 <SPI_SendData+0x10>
		if(pSPIx->CR1 & (1<<SPI_CR1_DFF)){
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d00e      	beq.n	8000dda <SPI_SendData+0x48>
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	60da      	str	r2, [r3, #12]
			Len--;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	607b      	str	r3, [r7, #4]
			Len--;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	e00a      	b.n	8000df0 <SPI_SendData+0x5e>
		}
		else {
			pSPIx->DR = *pTxBuffer;
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	60da      	str	r2, [r3, #12]
			Len--;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	3301      	adds	r3, #1
 8000dee:	60bb      	str	r3, [r7, #8]
	while(Len>0){
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d1d4      	bne.n	8000da0 <SPI_SendData+0xe>
		}
	}
}
 8000df6:	bf00      	nop
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <SPI_ReceiveData>:
	* @param  *pSPIx : pointer to the SPI base address
	* @param  *pRxBuffer : pointer to the Rx buffer where data is held
	* @param  Len : length of data
	* @return None
	*/
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
	while(Len>0){
 8000e0c:	e027      	b.n	8000e5e <SPI_ReceiveData+0x5e>
		while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == (uint8_t)RESET);//blocking and polling
 8000e0e:	bf00      	nop
 8000e10:	2101      	movs	r1, #1
 8000e12:	68f8      	ldr	r0, [r7, #12]
 8000e14:	f7ff ffaa 	bl	8000d6c <SPI_GetFlagStatus>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d0f8      	beq.n	8000e10 <SPI_ReceiveData+0x10>
		if(pSPIx->CR1 & (1<<SPI_CR1_DFF)){
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d00e      	beq.n	8000e48 <SPI_ReceiveData+0x48>
			*((uint16_t*)pRxBuffer) = pSPIx->DR;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	801a      	strh	r2, [r3, #0]
			Len--;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	607b      	str	r3, [r7, #4]
			Len--;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
			(uint16_t*)pRxBuffer++;
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	3301      	adds	r3, #1
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	e00a      	b.n	8000e5e <SPI_ReceiveData+0x5e>
		}
		else {
			*(pRxBuffer) = pSPIx->DR;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	701a      	strb	r2, [r3, #0]
			Len--;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3b01      	subs	r3, #1
 8000e56:	607b      	str	r3, [r7, #4]
			pRxBuffer++;
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	60bb      	str	r3, [r7, #8]
	while(Len>0){
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1d4      	bne.n	8000e0e <SPI_ReceiveData+0xe>
		}
	}
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <SPI_PeripheralControl>:
 * @param  IRQPriority : prioity of the interrupt
 * @return None
 */
void SPI_IRQPriorityConfig(uint8_t IRQNum, uint32_t IRQPriority);

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	460b      	mov	r3, r1
 8000e78:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000e7a:	78fb      	ldrb	r3, [r7, #3]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d106      	bne.n	8000e8e <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1<<SPI_CR1_SPE);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	601a      	str	r2, [r3, #0]
	}
	else{
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
	}
}
 8000e8c:	e005      	b.n	8000e9a <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	601a      	str	r2, [r3, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <SPI_SSOEConfig>:
		}
		else{
			pSPIx->CR1 &= ~(1<<SPI_CR1_SSI);
		}
}
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000eb0:	78fb      	ldrb	r3, [r7, #3]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d106      	bne.n	8000ec4 <SPI_SSOEConfig+0x20>
		pSPIx->CR2 |= (1<<2);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f043 0204 	orr.w	r2, r3, #4
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	605a      	str	r2, [r3, #4]
	}
	else{
		pSPIx->CR2 &= ~(1<<2);
	}
}
 8000ec2:	e005      	b.n	8000ed0 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1<<2);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f023 0204 	bic.w	r2, r3, #4
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	605a      	str	r2, [r3, #4]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
	...

08000edc <__libc_init_array>:
 8000edc:	b570      	push	{r4, r5, r6, lr}
 8000ede:	4d0d      	ldr	r5, [pc, #52]	@ (8000f14 <__libc_init_array+0x38>)
 8000ee0:	4c0d      	ldr	r4, [pc, #52]	@ (8000f18 <__libc_init_array+0x3c>)
 8000ee2:	1b64      	subs	r4, r4, r5
 8000ee4:	10a4      	asrs	r4, r4, #2
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	42a6      	cmp	r6, r4
 8000eea:	d109      	bne.n	8000f00 <__libc_init_array+0x24>
 8000eec:	4d0b      	ldr	r5, [pc, #44]	@ (8000f1c <__libc_init_array+0x40>)
 8000eee:	4c0c      	ldr	r4, [pc, #48]	@ (8000f20 <__libc_init_array+0x44>)
 8000ef0:	f000 f818 	bl	8000f24 <_init>
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	10a4      	asrs	r4, r4, #2
 8000ef8:	2600      	movs	r6, #0
 8000efa:	42a6      	cmp	r6, r4
 8000efc:	d105      	bne.n	8000f0a <__libc_init_array+0x2e>
 8000efe:	bd70      	pop	{r4, r5, r6, pc}
 8000f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f04:	4798      	blx	r3
 8000f06:	3601      	adds	r6, #1
 8000f08:	e7ee      	b.n	8000ee8 <__libc_init_array+0xc>
 8000f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f0e:	4798      	blx	r3
 8000f10:	3601      	adds	r6, #1
 8000f12:	e7f2      	b.n	8000efa <__libc_init_array+0x1e>
 8000f14:	08000f5c 	.word	0x08000f5c
 8000f18:	08000f5c 	.word	0x08000f5c
 8000f1c:	08000f5c 	.word	0x08000f5c
 8000f20:	08000f60 	.word	0x08000f60

08000f24 <_init>:
 8000f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f26:	bf00      	nop
 8000f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f2a:	bc08      	pop	{r3}
 8000f2c:	469e      	mov	lr, r3
 8000f2e:	4770      	bx	lr

08000f30 <_fini>:
 8000f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f32:	bf00      	nop
 8000f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f36:	bc08      	pop	{r3}
 8000f38:	469e      	mov	lr, r3
 8000f3a:	4770      	bx	lr
