
stm32f4xx_drivers3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009d4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b5c  08000b5c  00001b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b68  08000b68  00001b78  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000b68  08000b68  00001b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000b70  08000b78  00001b78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b70  08000b70  00001b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b74  08000b74  00001b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001b78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001b78  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001b78  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000113d  00000000  00000000  00001ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000436  00000000  00000000  00002cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  00003118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d8  00000000  00000000  00003248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000215e  00000000  00000000  00003320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000179e  00000000  00000000  0000547e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009337  00000000  00000000  00006c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000ff53  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000400  00000000  00000000  0000ff98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00010398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000b44 	.word	0x08000b44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000b44 	.word	0x08000b44

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <SPI2_GPIOInit>:
 */
#include "stm32f407xx.h"
#include "stm32f407xx_gpio.h"
#include "stm32f407xx_spi_driver.h"
#include<string.h>
void SPI2_GPIOInit(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 80001de:	4b11      	ldr	r3, [pc, #68]	@ (8000224 <SPI2_GPIOInit+0x4c>)
 80001e0:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001e2:	2302      	movs	r3, #2
 80001e4:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80001e6:	2305      	movs	r3, #5
 80001e8:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001ea:	2300      	movs	r3, #0
 80001ec:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80001ee:	2300      	movs	r3, #0
 80001f0:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001f2:	2302      	movs	r3, #2
 80001f4:	72bb      	strb	r3, [r7, #10]
	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_13;
 80001f6:	230d      	movs	r3, #13
 80001f8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 f8c9 	bl	8000394 <GPIO_Init>
	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_15;
 8000202:	230f      	movs	r3, #15
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f8c3 	bl	8000394 <GPIO_Init>
	//MISO
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_14;
	//GPIO_Init(&SPIPins);
	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_12;
 800020e:	230c      	movs	r3, #12
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f8bd 	bl	8000394 <GPIO_Init>

}
 800021a:	bf00      	nop
 800021c:	3710      	adds	r7, #16
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	40020400 	.word	0x40020400

08000228 <SPI2_Init>:
void SPI2_Init(void){
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx = SPI2;
 800022e:	4b0c      	ldr	r3, [pc, #48]	@ (8000260 <SPI2_Init+0x38>)
 8000230:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000232:	2301      	movs	r3, #1
 8000234:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000236:	2301      	movs	r3, #1
 8000238:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 800023a:	2304      	movs	r3, #4
 800023c:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800023e:	2300      	movs	r3, #0
 8000240:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000242:	2300      	movs	r3, #0
 8000244:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000246:	2300      	movs	r3, #0
 8000248:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI;//Hardware
 800024a:	2300      	movs	r3, #0
 800024c:	73bb      	strb	r3, [r7, #14]
	SPI_Init(&SPI2handle);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fb7d 	bl	8000950 <SPI_Init>
}
 8000256:	bf00      	nop
 8000258:	3710      	adds	r7, #16
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	40003800 	.word	0x40003800

08000264 <GPIO_ButtonInit>:
void GPIO_ButtonInit(void){
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOButton;
	GPIOButton.pGPIOx = GPIOA;
 800026a:	4b09      	ldr	r3, [pc, #36]	@ (8000290 <GPIO_ButtonInit+0x2c>)
 800026c:	607b      	str	r3, [r7, #4]
	GPIOButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_0;
 800026e:	2300      	movs	r3, #0
 8000270:	723b      	strb	r3, [r7, #8]
	GPIOButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000272:	2300      	movs	r3, #0
 8000274:	727b      	strb	r3, [r7, #9]
	GPIOButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000276:	2302      	movs	r3, #2
 8000278:	72bb      	strb	r3, [r7, #10]
	GPIOButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800027a:	2300      	movs	r3, #0
 800027c:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&GPIOButton);
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	4618      	mov	r0, r3
 8000282:	f000 f887 	bl	8000394 <GPIO_Init>
}
 8000286:	bf00      	nop
 8000288:	3710      	adds	r7, #16
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	40020000 	.word	0x40020000

08000294 <delay>:
void delay(void){
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i<500000; i++);
 800029a:	2300      	movs	r3, #0
 800029c:	607b      	str	r3, [r7, #4]
 800029e:	e002      	b.n	80002a6 <delay+0x12>
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	3301      	adds	r3, #1
 80002a4:	607b      	str	r3, [r7, #4]
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	4a04      	ldr	r2, [pc, #16]	@ (80002bc <delay+0x28>)
 80002aa:	4293      	cmp	r3, r2
 80002ac:	d9f8      	bls.n	80002a0 <delay+0xc>
}
 80002ae:	bf00      	nop
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bc80      	pop	{r7}
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	0007a11f 	.word	0x0007a11f

080002c0 <main>:
int main(void){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
	char user_data[] = "Hello world";
 80002c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000338 <main+0x78>)
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80002cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	GPIO_ButtonInit();
 80002d0:	f7ff ffc8 	bl	8000264 <GPIO_ButtonInit>
	SPI2_GPIOInit();
 80002d4:	f7ff ff80 	bl	80001d8 <SPI2_GPIOInit>
	SPI2_Init();
 80002d8:	f7ff ffa6 	bl	8000228 <SPI2_Init>
	//enable SPI2 peripheral
	SPI_SSOEConfig(SPI2, ENABLE);
 80002dc:	2101      	movs	r1, #1
 80002de:	4817      	ldr	r0, [pc, #92]	@ (800033c <main+0x7c>)
 80002e0:	f000 fbf1 	bl	8000ac6 <SPI_SSOEConfig>
	while(1){
		delay();
 80002e4:	f7ff ffd6 	bl	8000294 <delay>
		SPI_PeripheralControl(SPI2, ENABLE);
 80002e8:	2101      	movs	r1, #1
 80002ea:	4814      	ldr	r0, [pc, #80]	@ (800033c <main+0x7c>)
 80002ec:	f000 fbd0 	bl	8000a90 <SPI_PeripheralControl>
		//first send length
		uint8_t dataLen = strlen(user_data);
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff68 	bl	80001c8 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	70fb      	strb	r3, [r7, #3]
		SPI_SendData(SPI2, &dataLen, 1);
 80002fe:	1cfb      	adds	r3, r7, #3
 8000300:	2201      	movs	r2, #1
 8000302:	4619      	mov	r1, r3
 8000304:	480d      	ldr	r0, [pc, #52]	@ (800033c <main+0x7c>)
 8000306:	f000 fb86 	bl	8000a16 <SPI_SendData>
		SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ff5b 	bl	80001c8 <strlen>
 8000312:	4602      	mov	r2, r0
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	4619      	mov	r1, r3
 8000318:	4808      	ldr	r0, [pc, #32]	@ (800033c <main+0x7c>)
 800031a:	f000 fb7c 	bl	8000a16 <SPI_SendData>
		//have to check if SPI is busy
		while(SPI_GetFlagStatus(SPI2, SPI_BSY_FLAG));
 800031e:	bf00      	nop
 8000320:	2180      	movs	r1, #128	@ 0x80
 8000322:	4806      	ldr	r0, [pc, #24]	@ (800033c <main+0x7c>)
 8000324:	f000 fb64 	bl	80009f0 <SPI_GetFlagStatus>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d1f8      	bne.n	8000320 <main+0x60>
		//disbale
		SPI_PeripheralControl(SPI2, DISABLE);
 800032e:	2100      	movs	r1, #0
 8000330:	4802      	ldr	r0, [pc, #8]	@ (800033c <main+0x7c>)
 8000332:	f000 fbad 	bl	8000a90 <SPI_PeripheralControl>
	while(1){
 8000336:	e7d5      	b.n	80002e4 <main+0x24>
 8000338:	08000b5c 	.word	0x08000b5c
 800033c:	40003800 	.word	0x40003800

08000340 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000340:	480d      	ldr	r0, [pc, #52]	@ (8000378 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000342:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000344:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000348:	480c      	ldr	r0, [pc, #48]	@ (800037c <LoopForever+0x6>)
  ldr r1, =_edata
 800034a:	490d      	ldr	r1, [pc, #52]	@ (8000380 <LoopForever+0xa>)
  ldr r2, =_sidata
 800034c:	4a0d      	ldr	r2, [pc, #52]	@ (8000384 <LoopForever+0xe>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000350:	e002      	b.n	8000358 <LoopCopyDataInit>

08000352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000356:	3304      	adds	r3, #4

08000358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800035c:	d3f9      	bcc.n	8000352 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035e:	4a0a      	ldr	r2, [pc, #40]	@ (8000388 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000360:	4c0a      	ldr	r4, [pc, #40]	@ (800038c <LoopForever+0x16>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000364:	e001      	b.n	800036a <LoopFillZerobss>

08000366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000368:	3204      	adds	r2, #4

0800036a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800036c:	d3fb      	bcc.n	8000366 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800036e:	f000 fbc5 	bl	8000afc <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000372:	f7ff ffa5 	bl	80002c0 <main>

08000376 <LoopForever>:

LoopForever:
  b LoopForever
 8000376:	e7fe      	b.n	8000376 <LoopForever>
  ldr   r0, =_estack
 8000378:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800037c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000380:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000384:	08000b78 	.word	0x08000b78
  ldr r2, =_sbss
 8000388:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800038c:	2000001c 	.word	0x2000001c

08000390 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000390:	e7fe      	b.n	8000390 <ADC_IRQHandler>
	...

08000394 <GPIO_Init>:
	* @param  *pGPIOHandle : pointer to the GPIO handle struct
	* @param
	* @param
	* @return None
	*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000394:	b580      	push	{r7, lr}
 8000396:	b086      	sub	sp, #24
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	//enable peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2101      	movs	r1, #1
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 f994 	bl	80006d0 <GPIO_PeriClockControl>
		//1 configure the mode of GPIO pin
	uint32_t temp = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	617b      	str	r3, [r7, #20]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	795b      	ldrb	r3, [r3, #5]
 80003b0:	2b03      	cmp	r3, #3
 80003b2:	d822      	bhi.n	80003fa <GPIO_Init+0x66>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	795b      	ldrb	r3, [r3, #5]
 80003b8:	461a      	mov	r2, r3
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	791b      	ldrb	r3, [r3, #4]
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	fa02 f303 	lsl.w	r3, r2, r3
 80003c4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3<<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	791b      	ldrb	r3, [r3, #4]
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	2103      	movs	r1, #3
 80003d4:	fa01 f303 	lsl.w	r3, r1, r3
 80003d8:	43db      	mvns	r3, r3
 80003da:	4619      	mov	r1, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	400a      	ands	r2, r1
 80003e2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	6819      	ldr	r1, [r3, #0]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	697a      	ldr	r2, [r7, #20]
 80003f0:	430a      	orrs	r2, r1
 80003f2:	601a      	str	r2, [r3, #0]
		temp = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]
 80003f8:	e0c8      	b.n	800058c <GPIO_Init+0x1f8>
	}
	else{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	795b      	ldrb	r3, [r3, #5]
 80003fe:	2b04      	cmp	r3, #4
 8000400:	d117      	bne.n	8000432 <GPIO_Init+0x9e>
			//1. configure falling edge reg
			EXTI->FTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000402:	4b47      	ldr	r3, [pc, #284]	@ (8000520 <GPIO_Init+0x18c>)
 8000404:	68db      	ldr	r3, [r3, #12]
 8000406:	687a      	ldr	r2, [r7, #4]
 8000408:	7912      	ldrb	r2, [r2, #4]
 800040a:	4611      	mov	r1, r2
 800040c:	2201      	movs	r2, #1
 800040e:	408a      	lsls	r2, r1
 8000410:	4611      	mov	r1, r2
 8000412:	4a43      	ldr	r2, [pc, #268]	@ (8000520 <GPIO_Init+0x18c>)
 8000414:	430b      	orrs	r3, r1
 8000416:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000418:	4b41      	ldr	r3, [pc, #260]	@ (8000520 <GPIO_Init+0x18c>)
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	687a      	ldr	r2, [r7, #4]
 800041e:	7912      	ldrb	r2, [r2, #4]
 8000420:	4611      	mov	r1, r2
 8000422:	2201      	movs	r2, #1
 8000424:	408a      	lsls	r2, r1
 8000426:	43d2      	mvns	r2, r2
 8000428:	4611      	mov	r1, r2
 800042a:	4a3d      	ldr	r2, [pc, #244]	@ (8000520 <GPIO_Init+0x18c>)
 800042c:	400b      	ands	r3, r1
 800042e:	6093      	str	r3, [r2, #8]
 8000430:	e035      	b.n	800049e <GPIO_Init+0x10a>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	795b      	ldrb	r3, [r3, #5]
 8000436:	2b05      	cmp	r3, #5
 8000438:	d117      	bne.n	800046a <GPIO_Init+0xd6>
			EXTI->FTSR &= ~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800043a:	4b39      	ldr	r3, [pc, #228]	@ (8000520 <GPIO_Init+0x18c>)
 800043c:	68db      	ldr	r3, [r3, #12]
 800043e:	687a      	ldr	r2, [r7, #4]
 8000440:	7912      	ldrb	r2, [r2, #4]
 8000442:	4611      	mov	r1, r2
 8000444:	2201      	movs	r2, #1
 8000446:	408a      	lsls	r2, r1
 8000448:	43d2      	mvns	r2, r2
 800044a:	4611      	mov	r1, r2
 800044c:	4a34      	ldr	r2, [pc, #208]	@ (8000520 <GPIO_Init+0x18c>)
 800044e:	400b      	ands	r3, r1
 8000450:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000452:	4b33      	ldr	r3, [pc, #204]	@ (8000520 <GPIO_Init+0x18c>)
 8000454:	689b      	ldr	r3, [r3, #8]
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	7912      	ldrb	r2, [r2, #4]
 800045a:	4611      	mov	r1, r2
 800045c:	2201      	movs	r2, #1
 800045e:	408a      	lsls	r2, r1
 8000460:	4611      	mov	r1, r2
 8000462:	4a2f      	ldr	r2, [pc, #188]	@ (8000520 <GPIO_Init+0x18c>)
 8000464:	430b      	orrs	r3, r1
 8000466:	6093      	str	r3, [r2, #8]
 8000468:	e019      	b.n	800049e <GPIO_Init+0x10a>

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	795b      	ldrb	r3, [r3, #5]
 800046e:	2b06      	cmp	r3, #6
 8000470:	d115      	bne.n	800049e <GPIO_Init+0x10a>
			EXTI->FTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000472:	4b2b      	ldr	r3, [pc, #172]	@ (8000520 <GPIO_Init+0x18c>)
 8000474:	68db      	ldr	r3, [r3, #12]
 8000476:	687a      	ldr	r2, [r7, #4]
 8000478:	7912      	ldrb	r2, [r2, #4]
 800047a:	4611      	mov	r1, r2
 800047c:	2201      	movs	r2, #1
 800047e:	408a      	lsls	r2, r1
 8000480:	4611      	mov	r1, r2
 8000482:	4a27      	ldr	r2, [pc, #156]	@ (8000520 <GPIO_Init+0x18c>)
 8000484:	430b      	orrs	r3, r1
 8000486:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000488:	4b25      	ldr	r3, [pc, #148]	@ (8000520 <GPIO_Init+0x18c>)
 800048a:	689b      	ldr	r3, [r3, #8]
 800048c:	687a      	ldr	r2, [r7, #4]
 800048e:	7912      	ldrb	r2, [r2, #4]
 8000490:	4611      	mov	r1, r2
 8000492:	2201      	movs	r2, #1
 8000494:	408a      	lsls	r2, r1
 8000496:	4611      	mov	r1, r2
 8000498:	4a21      	ldr	r2, [pc, #132]	@ (8000520 <GPIO_Init+0x18c>)
 800049a:	430b      	orrs	r3, r1
 800049c:	6093      	str	r3, [r2, #8]

		}
		//Configure GPIO port slection in SYSCFG
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	791b      	ldrb	r3, [r3, #4]
 80004a2:	089b      	lsrs	r3, r3, #2
 80004a4:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	791b      	ldrb	r3, [r3, #4]
 80004aa:	f003 0303 	and.w	r3, r3, #3
 80004ae:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000524 <GPIO_Init+0x190>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d044      	beq.n	8000544 <GPIO_Init+0x1b0>
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a1a      	ldr	r2, [pc, #104]	@ (8000528 <GPIO_Init+0x194>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d02b      	beq.n	800051c <GPIO_Init+0x188>
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a18      	ldr	r2, [pc, #96]	@ (800052c <GPIO_Init+0x198>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d024      	beq.n	8000518 <GPIO_Init+0x184>
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a17      	ldr	r2, [pc, #92]	@ (8000530 <GPIO_Init+0x19c>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d01d      	beq.n	8000514 <GPIO_Init+0x180>
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a15      	ldr	r2, [pc, #84]	@ (8000534 <GPIO_Init+0x1a0>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d016      	beq.n	8000510 <GPIO_Init+0x17c>
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a14      	ldr	r2, [pc, #80]	@ (8000538 <GPIO_Init+0x1a4>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d00f      	beq.n	800050c <GPIO_Init+0x178>
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a12      	ldr	r2, [pc, #72]	@ (800053c <GPIO_Init+0x1a8>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d008      	beq.n	8000508 <GPIO_Init+0x174>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a11      	ldr	r2, [pc, #68]	@ (8000540 <GPIO_Init+0x1ac>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d101      	bne.n	8000504 <GPIO_Init+0x170>
 8000500:	2307      	movs	r3, #7
 8000502:	e020      	b.n	8000546 <GPIO_Init+0x1b2>
 8000504:	2300      	movs	r3, #0
 8000506:	e01e      	b.n	8000546 <GPIO_Init+0x1b2>
 8000508:	2306      	movs	r3, #6
 800050a:	e01c      	b.n	8000546 <GPIO_Init+0x1b2>
 800050c:	2305      	movs	r3, #5
 800050e:	e01a      	b.n	8000546 <GPIO_Init+0x1b2>
 8000510:	2304      	movs	r3, #4
 8000512:	e018      	b.n	8000546 <GPIO_Init+0x1b2>
 8000514:	2303      	movs	r3, #3
 8000516:	e016      	b.n	8000546 <GPIO_Init+0x1b2>
 8000518:	2302      	movs	r3, #2
 800051a:	e014      	b.n	8000546 <GPIO_Init+0x1b2>
 800051c:	2301      	movs	r3, #1
 800051e:	e012      	b.n	8000546 <GPIO_Init+0x1b2>
 8000520:	40013c00 	.word	0x40013c00
 8000524:	40020000 	.word	0x40020000
 8000528:	40020400 	.word	0x40020400
 800052c:	40020800 	.word	0x40020800
 8000530:	40020c00 	.word	0x40020c00
 8000534:	40021000 	.word	0x40021000
 8000538:	40021400 	.word	0x40021400
 800053c:	40021800 	.word	0x40021800
 8000540:	40021c00 	.word	0x40021c00
 8000544:	2300      	movs	r3, #0
 8000546:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000548:	4b5e      	ldr	r3, [pc, #376]	@ (80006c4 <GPIO_Init+0x330>)
 800054a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800054c:	4a5d      	ldr	r2, [pc, #372]	@ (80006c4 <GPIO_Init+0x330>)
 800054e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000552:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] |= portcode<<(temp2*4);
 8000554:	4a5c      	ldr	r2, [pc, #368]	@ (80006c8 <GPIO_Init+0x334>)
 8000556:	7cfb      	ldrb	r3, [r7, #19]
 8000558:	3302      	adds	r3, #2
 800055a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800055e:	7c79      	ldrb	r1, [r7, #17]
 8000560:	7cbb      	ldrb	r3, [r7, #18]
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	fa01 f303 	lsl.w	r3, r1, r3
 8000568:	4618      	mov	r0, r3
 800056a:	4957      	ldr	r1, [pc, #348]	@ (80006c8 <GPIO_Init+0x334>)
 800056c:	7cfb      	ldrb	r3, [r7, #19]
 800056e:	4302      	orrs	r2, r0
 8000570:	3302      	adds	r3, #2
 8000572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//enable interrupt delievery in IMR
		EXTI->IMR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000576:	4b55      	ldr	r3, [pc, #340]	@ (80006cc <GPIO_Init+0x338>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	7912      	ldrb	r2, [r2, #4]
 800057e:	4611      	mov	r1, r2
 8000580:	2201      	movs	r2, #1
 8000582:	408a      	lsls	r2, r1
 8000584:	4611      	mov	r1, r2
 8000586:	4a51      	ldr	r2, [pc, #324]	@ (80006cc <GPIO_Init+0x338>)
 8000588:	430b      	orrs	r3, r1
 800058a:	6013      	str	r3, [r2, #0]
	}

		//2 configure the speed of GPIO pin
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	799b      	ldrb	r3, [r3, #6]
 8000590:	461a      	mov	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	791b      	ldrb	r3, [r3, #4]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	fa02 f303 	lsl.w	r3, r2, r3
 800059c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3<<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	689a      	ldr	r2, [r3, #8]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	791b      	ldrb	r3, [r3, #4]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	2103      	movs	r1, #3
 80005ac:	fa01 f303 	lsl.w	r3, r1, r3
 80005b0:	43db      	mvns	r3, r3
 80005b2:	4619      	mov	r1, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	400a      	ands	r2, r1
 80005ba:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	6899      	ldr	r1, [r3, #8]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	697a      	ldr	r2, [r7, #20]
 80005c8:	430a      	orrs	r2, r1
 80005ca:	609a      	str	r2, [r3, #8]
	temp = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]

		//3 configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	79db      	ldrb	r3, [r3, #7]
 80005d4:	461a      	mov	r2, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	791b      	ldrb	r3, [r3, #4]
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	fa02 f303 	lsl.w	r3, r2, r3
 80005e0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3<<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	68da      	ldr	r2, [r3, #12]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	791b      	ldrb	r3, [r3, #4]
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	2103      	movs	r1, #3
 80005f0:	fa01 f303 	lsl.w	r3, r1, r3
 80005f4:	43db      	mvns	r3, r3
 80005f6:	4619      	mov	r1, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	400a      	ands	r2, r1
 80005fe:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	68d9      	ldr	r1, [r3, #12]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	697a      	ldr	r2, [r7, #20]
 800060c:	430a      	orrs	r2, r1
 800060e:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
		//4 configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	7a1b      	ldrb	r3, [r3, #8]
 8000618:	461a      	mov	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	791b      	ldrb	r3, [r3, #4]
 800061e:	fa02 f303 	lsl.w	r3, r2, r3
 8000622:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3<<(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	689a      	ldr	r2, [r3, #8]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	791b      	ldrb	r3, [r3, #4]
 800062e:	4619      	mov	r1, r3
 8000630:	2303      	movs	r3, #3
 8000632:	408b      	lsls	r3, r1
 8000634:	43db      	mvns	r3, r3
 8000636:	4619      	mov	r1, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	400a      	ands	r2, r1
 800063e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	6859      	ldr	r1, [r3, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	697a      	ldr	r2, [r7, #20]
 800064c:	430a      	orrs	r2, r1
 800064e:	605a      	str	r2, [r3, #4]
		//5 configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	795b      	ldrb	r3, [r3, #5]
 8000654:	2b02      	cmp	r3, #2
 8000656:	d131      	bne.n	80006bc <GPIO_Init+0x328>
		uint8_t temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)/8;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	791b      	ldrb	r3, [r3, #4]
 800065c:	08db      	lsrs	r3, r3, #3
 800065e:	743b      	strb	r3, [r7, #16]
		uint8_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%8;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	791b      	ldrb	r3, [r3, #4]
 8000664:	f003 0307 	and.w	r3, r3, #7
 8000668:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~((0xF << (4 * temp2)));
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	7c3a      	ldrb	r2, [r7, #16]
 8000670:	3208      	adds	r2, #8
 8000672:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	220f      	movs	r2, #15
 800067c:	fa02 f303 	lsl.w	r3, r2, r3
 8000680:	43db      	mvns	r3, r3
 8000682:	4618      	mov	r0, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	7c3a      	ldrb	r2, [r7, #16]
 800068a:	4001      	ands	r1, r0
 800068c:	3208      	adds	r2, #8
 800068e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	7c3a      	ldrb	r2, [r7, #16]
 8000698:	3208      	adds	r2, #8
 800069a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	7a5b      	ldrb	r3, [r3, #9]
 80006a2:	461a      	mov	r2, r3
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ac:	4618      	mov	r0, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	7c3a      	ldrb	r2, [r7, #16]
 80006b4:	4301      	orrs	r1, r0
 80006b6:	3208      	adds	r2, #8
 80006b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80006bc:	bf00      	nop
 80006be:	3718      	adds	r7, #24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40013800 	.word	0x40013800
 80006cc:	40013c00 	.word	0x40013c00

080006d0 <GPIO_PeriClockControl>:
	* @param  *pGPIOx : GPIO peripheral base address
	* @param  EnorDi  : ENABLE(1) or DISABLE(0) macros
	* @param
	* @return None
	*/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	70fb      	strb	r3, [r7, #3]
	if(EnorDi== ENABLE){
 80006dc:	78fb      	ldrb	r3, [r7, #3]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d162      	bne.n	80007a8 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA){
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a64      	ldr	r2, [pc, #400]	@ (8000878 <GPIO_PeriClockControl+0x1a8>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d106      	bne.n	80006f8 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80006ea:	4b64      	ldr	r3, [pc, #400]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a63      	ldr	r2, [pc, #396]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
		else if (pGPIOx == GPIOI){
			GPIOI_PCLK_DI();
		}
	}

}
 80006f6:	e0b9      	b.n	800086c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB){
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a61      	ldr	r2, [pc, #388]	@ (8000880 <GPIO_PeriClockControl+0x1b0>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d106      	bne.n	800070e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000700:	4b5e      	ldr	r3, [pc, #376]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 8000702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000704:	4a5d      	ldr	r2, [pc, #372]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 8000706:	f043 0302 	orr.w	r3, r3, #2
 800070a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800070c:	e0ae      	b.n	800086c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC){
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4a5c      	ldr	r2, [pc, #368]	@ (8000884 <GPIO_PeriClockControl+0x1b4>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d106      	bne.n	8000724 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000716:	4b59      	ldr	r3, [pc, #356]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a58      	ldr	r2, [pc, #352]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000722:	e0a3      	b.n	800086c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD){
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a58      	ldr	r2, [pc, #352]	@ (8000888 <GPIO_PeriClockControl+0x1b8>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d106      	bne.n	800073a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800072c:	4b53      	ldr	r3, [pc, #332]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 800072e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000730:	4a52      	ldr	r2, [pc, #328]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 8000732:	f043 0308 	orr.w	r3, r3, #8
 8000736:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000738:	e098      	b.n	800086c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE){
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a53      	ldr	r2, [pc, #332]	@ (800088c <GPIO_PeriClockControl+0x1bc>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d106      	bne.n	8000750 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000742:	4b4e      	ldr	r3, [pc, #312]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a4d      	ldr	r2, [pc, #308]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 8000748:	f043 0310 	orr.w	r3, r3, #16
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800074e:	e08d      	b.n	800086c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF){
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a4f      	ldr	r2, [pc, #316]	@ (8000890 <GPIO_PeriClockControl+0x1c0>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d106      	bne.n	8000766 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000758:	4b48      	ldr	r3, [pc, #288]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075c:	4a47      	ldr	r2, [pc, #284]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 800075e:	f043 0320 	orr.w	r3, r3, #32
 8000762:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000764:	e082      	b.n	800086c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG){
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4a4a      	ldr	r2, [pc, #296]	@ (8000894 <GPIO_PeriClockControl+0x1c4>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d106      	bne.n	800077c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800076e:	4b43      	ldr	r3, [pc, #268]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a42      	ldr	r2, [pc, #264]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 8000774:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800077a:	e077      	b.n	800086c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH){
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4a46      	ldr	r2, [pc, #280]	@ (8000898 <GPIO_PeriClockControl+0x1c8>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d106      	bne.n	8000792 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000784:	4b3d      	ldr	r3, [pc, #244]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 8000786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000788:	4a3c      	ldr	r2, [pc, #240]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 800078a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800078e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000790:	e06c      	b.n	800086c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI){
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a41      	ldr	r2, [pc, #260]	@ (800089c <GPIO_PeriClockControl+0x1cc>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d168      	bne.n	800086c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800079a:	4b38      	ldr	r3, [pc, #224]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a37      	ldr	r2, [pc, #220]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 80007a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007a6:	e061      	b.n	800086c <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA){
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4a33      	ldr	r2, [pc, #204]	@ (8000878 <GPIO_PeriClockControl+0x1a8>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d106      	bne.n	80007be <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80007b0:	4b32      	ldr	r3, [pc, #200]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 80007b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b4:	4a31      	ldr	r2, [pc, #196]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 80007b6:	f023 0301 	bic.w	r3, r3, #1
 80007ba:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007bc:	e056      	b.n	800086c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB){
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4a2f      	ldr	r2, [pc, #188]	@ (8000880 <GPIO_PeriClockControl+0x1b0>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d106      	bne.n	80007d4 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80007c6:	4b2d      	ldr	r3, [pc, #180]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a2c      	ldr	r2, [pc, #176]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 80007cc:	f023 0302 	bic.w	r3, r3, #2
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007d2:	e04b      	b.n	800086c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC){
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4a2b      	ldr	r2, [pc, #172]	@ (8000884 <GPIO_PeriClockControl+0x1b4>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d106      	bne.n	80007ea <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80007dc:	4b27      	ldr	r3, [pc, #156]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 80007de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e0:	4a26      	ldr	r2, [pc, #152]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 80007e2:	f023 0304 	bic.w	r3, r3, #4
 80007e6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007e8:	e040      	b.n	800086c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD){
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a26      	ldr	r2, [pc, #152]	@ (8000888 <GPIO_PeriClockControl+0x1b8>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d106      	bne.n	8000800 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80007f2:	4b22      	ldr	r3, [pc, #136]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a21      	ldr	r2, [pc, #132]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 80007f8:	f023 0308 	bic.w	r3, r3, #8
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007fe:	e035      	b.n	800086c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE){
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a22      	ldr	r2, [pc, #136]	@ (800088c <GPIO_PeriClockControl+0x1bc>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d106      	bne.n	8000816 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000808:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 800080a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080c:	4a1b      	ldr	r2, [pc, #108]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 800080e:	f023 0310 	bic.w	r3, r3, #16
 8000812:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000814:	e02a      	b.n	800086c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF){
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4a1d      	ldr	r2, [pc, #116]	@ (8000890 <GPIO_PeriClockControl+0x1c0>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d106      	bne.n	800082c <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 800081e:	4b17      	ldr	r3, [pc, #92]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a16      	ldr	r2, [pc, #88]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 8000824:	f023 0320 	bic.w	r3, r3, #32
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800082a:	e01f      	b.n	800086c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG){
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4a19      	ldr	r2, [pc, #100]	@ (8000894 <GPIO_PeriClockControl+0x1c4>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d106      	bne.n	8000842 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000834:	4b11      	ldr	r3, [pc, #68]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 8000836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000838:	4a10      	ldr	r2, [pc, #64]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 800083a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800083e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000840:	e014      	b.n	800086c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH){
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4a14      	ldr	r2, [pc, #80]	@ (8000898 <GPIO_PeriClockControl+0x1c8>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d106      	bne.n	8000858 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800084a:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a0b      	ldr	r2, [pc, #44]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 8000850:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000856:	e009      	b.n	800086c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI){
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a10      	ldr	r2, [pc, #64]	@ (800089c <GPIO_PeriClockControl+0x1cc>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d105      	bne.n	800086c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000864:	4a05      	ldr	r2, [pc, #20]	@ (800087c <GPIO_PeriClockControl+0x1ac>)
 8000866:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800086a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40020000 	.word	0x40020000
 800087c:	40023800 	.word	0x40023800
 8000880:	40020400 	.word	0x40020400
 8000884:	40020800 	.word	0x40020800
 8000888:	40020c00 	.word	0x40020c00
 800088c:	40021000 	.word	0x40021000
 8000890:	40021400 	.word	0x40021400
 8000894:	40021800 	.word	0x40021800
 8000898:	40021c00 	.word	0x40021c00
 800089c:	40022000 	.word	0x40022000

080008a0 <SPI_PeriClockControl>:
	* @param  *pSPIx : pointer to the SPI base address
	* @param  EnorDi : takes either ENABLE(1) or DISABLE(0)to enable or disable clock
	* @param
	* @return None
	*/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	70fb      	strb	r3, [r7, #3]
	if(EnorDi== ENABLE){
 80008ac:	78fb      	ldrb	r3, [r7, #3]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d120      	bne.n	80008f4 <SPI_PeriClockControl+0x54>
			if(pSPIx == SPI1){
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a22      	ldr	r2, [pc, #136]	@ (8000940 <SPI_PeriClockControl+0xa0>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d106      	bne.n	80008c8 <SPI_PeriClockControl+0x28>
				SPI1_PCLK_EN();
 80008ba:	4b22      	ldr	r3, [pc, #136]	@ (8000944 <SPI_PeriClockControl+0xa4>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008be:	4a21      	ldr	r2, [pc, #132]	@ (8000944 <SPI_PeriClockControl+0xa4>)
 80008c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008c4:	6453      	str	r3, [r2, #68]	@ 0x44
						else if (pSPIx == SPI3){
							SPI3_PCLK_DI();
						}
		}

}
 80008c6:	e035      	b.n	8000934 <SPI_PeriClockControl+0x94>
			else if(pSPIx == SPI2){
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a1f      	ldr	r2, [pc, #124]	@ (8000948 <SPI_PeriClockControl+0xa8>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d106      	bne.n	80008de <SPI_PeriClockControl+0x3e>
				SPI2_PCLK_EN();
 80008d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000944 <SPI_PeriClockControl+0xa4>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000944 <SPI_PeriClockControl+0xa4>)
 80008d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008da:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008dc:	e02a      	b.n	8000934 <SPI_PeriClockControl+0x94>
			else if (pSPIx == SPI3){
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a1a      	ldr	r2, [pc, #104]	@ (800094c <SPI_PeriClockControl+0xac>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d126      	bne.n	8000934 <SPI_PeriClockControl+0x94>
				SPI3_PCLK_EN();
 80008e6:	4b17      	ldr	r3, [pc, #92]	@ (8000944 <SPI_PeriClockControl+0xa4>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ea:	4a16      	ldr	r2, [pc, #88]	@ (8000944 <SPI_PeriClockControl+0xa4>)
 80008ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008f0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008f2:	e01f      	b.n	8000934 <SPI_PeriClockControl+0x94>
			if(pSPIx == SPI1){
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a12      	ldr	r2, [pc, #72]	@ (8000940 <SPI_PeriClockControl+0xa0>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d106      	bne.n	800090a <SPI_PeriClockControl+0x6a>
							SPI1_PCLK_DI();
 80008fc:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <SPI_PeriClockControl+0xa4>)
 80008fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000900:	4a10      	ldr	r2, [pc, #64]	@ (8000944 <SPI_PeriClockControl+0xa4>)
 8000902:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000906:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000908:	e014      	b.n	8000934 <SPI_PeriClockControl+0x94>
					else if(pSPIx == SPI2){
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4a0e      	ldr	r2, [pc, #56]	@ (8000948 <SPI_PeriClockControl+0xa8>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d106      	bne.n	8000920 <SPI_PeriClockControl+0x80>
							SPI2_PCLK_DI();
 8000912:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <SPI_PeriClockControl+0xa4>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000916:	4a0b      	ldr	r2, [pc, #44]	@ (8000944 <SPI_PeriClockControl+0xa4>)
 8000918:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800091c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800091e:	e009      	b.n	8000934 <SPI_PeriClockControl+0x94>
						else if (pSPIx == SPI3){
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a0a      	ldr	r2, [pc, #40]	@ (800094c <SPI_PeriClockControl+0xac>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d105      	bne.n	8000934 <SPI_PeriClockControl+0x94>
							SPI3_PCLK_DI();
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <SPI_PeriClockControl+0xa4>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092c:	4a05      	ldr	r2, [pc, #20]	@ (8000944 <SPI_PeriClockControl+0xa4>)
 800092e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000932:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40013000 	.word	0x40013000
 8000944:	40023800 	.word	0x40023800
 8000948:	40003800 	.word	0x40003800
 800094c:	40003c00 	.word	0x40003c00

08000950 <SPI_Init>:
	* @param  *pSPIHandle : pointer to the GPIO handle struct
	* @param
	* @param
	* @return None
	*/
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	//enable SPI clock
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2101      	movs	r1, #1
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ff9e 	bl	80008a0 <SPI_PeriClockControl>
	//configure SPI_CR1 reg
	uint32_t temp = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
	//1. configure device mode
	temp |= pSPIHandle->SPIConfig.SPI_DeviceMode <<SPI_CR1_MSTR;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	791b      	ldrb	r3, [r3, #4]
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	4313      	orrs	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]
	//2. configure bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	795b      	ldrb	r3, [r3, #5]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d104      	bne.n	8000986 <SPI_Init+0x36>
		//bidi mode should be cleared
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	e014      	b.n	80009b0 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	795b      	ldrb	r3, [r3, #5]
 800098a:	2b02      	cmp	r3, #2
 800098c:	d104      	bne.n	8000998 <SPI_Init+0x48>
		//bidi mode should be set
		temp |= (1<<SPI_CR1_BIDIMODE);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	e00b      	b.n	80009b0 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	795b      	ldrb	r3, [r3, #5]
 800099c:	2b03      	cmp	r3, #3
 800099e:	d107      	bne.n	80009b0 <SPI_Init+0x60>
		//BIDI mode should be cleared and Rx_only bit must be set
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80009a6:	60fb      	str	r3, [r7, #12]
		temp |= (1<<SPI_CR1_RXONLY);
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ae:	60fb      	str	r3, [r7, #12]
	}
	//configure clk speed
	temp |= pSPIHandle->SPIConfig.SPI_SclkSpeed <<SPI_CR1_BR;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	799b      	ldrb	r3, [r3, #6]
 80009b4:	00db      	lsls	r3, r3, #3
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
	//configure DFF
	temp |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	79db      	ldrb	r3, [r3, #7]
 80009c0:	02db      	lsls	r3, r3, #11
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	60fb      	str	r3, [r7, #12]
	//configure CPOl
	temp |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	7a1b      	ldrb	r3, [r3, #8]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]
	//config CPHA
	temp |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	7a5b      	ldrb	r3, [r3, #9]
 80009d8:	461a      	mov	r2, r3
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	4313      	orrs	r3, r2
 80009de:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = temp;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	601a      	str	r2, [r3, #0]

}
 80009e8:	bf00      	nop
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <SPI_GetFlagStatus>:

}
/*
 * gets the flag stat
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName){
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	689a      	ldr	r2, [r3, #8]
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	4013      	ands	r3, r2
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e000      	b.n	8000a0c <SPI_GetFlagStatus+0x1c>
	}
	else{
		return FLAG_RESET;
 8000a0a:	2300      	movs	r3, #0
	}
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr

08000a16 <SPI_SendData>:
	* @param  *pSPIx : pointer to the SPI base address
	* @param  *pTxBuffer : pointer to the Tx buffer where data is held
	* @param  Len : length of data
	* @return None
	*/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b084      	sub	sp, #16
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	60f8      	str	r0, [r7, #12]
 8000a1e:	60b9      	str	r1, [r7, #8]
 8000a20:	607a      	str	r2, [r7, #4]
	while(Len>0){
 8000a22:	e02d      	b.n	8000a80 <SPI_SendData+0x6a>
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == RESET);//blocking and polling
 8000a24:	bf00      	nop
 8000a26:	2102      	movs	r1, #2
 8000a28:	68f8      	ldr	r0, [r7, #12]
 8000a2a:	f7ff ffe1 	bl	80009f0 <SPI_GetFlagStatus>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d0f8      	beq.n	8000a26 <SPI_SendData+0x10>
		if(pSPIx->CR1 & (1<<SPI_CR1_DFF)){
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d00e      	beq.n	8000a5e <SPI_SendData+0x48>
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	60da      	str	r2, [r3, #12]
			Len--;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
			Len--;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	e010      	b.n	8000a80 <SPI_SendData+0x6a>
		}
		else if(!(pSPIx->CR1 & (1<<SPI_CR1_DFF))){
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d10a      	bne.n	8000a80 <SPI_SendData+0x6a>
			pSPIx->DR = *pTxBuffer;
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	60da      	str	r2, [r3, #12]
			Len--;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
	while(Len>0){
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d1ce      	bne.n	8000a24 <SPI_SendData+0xe>
		}
	}
}
 8000a86:	bf00      	nop
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <SPI_PeripheralControl>:
 * @param  IRQPriority : prioity of the interrupt
 * @return None
 */
void SPI_IRQPriorityConfig(uint8_t IRQNum, uint32_t IRQPriority);

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000a9c:	78fb      	ldrb	r3, [r7, #3]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d106      	bne.n	8000ab0 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1<<SPI_CR1_SPE);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	601a      	str	r2, [r3, #0]
	}
	else{
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
	}
}
 8000aae:	e005      	b.n	8000abc <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	601a      	str	r2, [r3, #0]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr

08000ac6 <SPI_SSOEConfig>:
		}
		else{
			pSPIx->CR1 &= ~(1<<SPI_CR1_SSI);
		}
}
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000ad2:	78fb      	ldrb	r3, [r7, #3]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d106      	bne.n	8000ae6 <SPI_SSOEConfig+0x20>
		pSPIx->CR2 |= (1<<2);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f043 0204 	orr.w	r2, r3, #4
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	605a      	str	r2, [r3, #4]
	}
	else{
		pSPIx->CR2 &= ~(1<<2);
	}
}
 8000ae4:	e005      	b.n	8000af2 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1<<2);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f023 0204 	bic.w	r2, r3, #4
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	605a      	str	r2, [r3, #4]
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <__libc_init_array>:
 8000afc:	b570      	push	{r4, r5, r6, lr}
 8000afe:	4d0d      	ldr	r5, [pc, #52]	@ (8000b34 <__libc_init_array+0x38>)
 8000b00:	4c0d      	ldr	r4, [pc, #52]	@ (8000b38 <__libc_init_array+0x3c>)
 8000b02:	1b64      	subs	r4, r4, r5
 8000b04:	10a4      	asrs	r4, r4, #2
 8000b06:	2600      	movs	r6, #0
 8000b08:	42a6      	cmp	r6, r4
 8000b0a:	d109      	bne.n	8000b20 <__libc_init_array+0x24>
 8000b0c:	4d0b      	ldr	r5, [pc, #44]	@ (8000b3c <__libc_init_array+0x40>)
 8000b0e:	4c0c      	ldr	r4, [pc, #48]	@ (8000b40 <__libc_init_array+0x44>)
 8000b10:	f000 f818 	bl	8000b44 <_init>
 8000b14:	1b64      	subs	r4, r4, r5
 8000b16:	10a4      	asrs	r4, r4, #2
 8000b18:	2600      	movs	r6, #0
 8000b1a:	42a6      	cmp	r6, r4
 8000b1c:	d105      	bne.n	8000b2a <__libc_init_array+0x2e>
 8000b1e:	bd70      	pop	{r4, r5, r6, pc}
 8000b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b24:	4798      	blx	r3
 8000b26:	3601      	adds	r6, #1
 8000b28:	e7ee      	b.n	8000b08 <__libc_init_array+0xc>
 8000b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b2e:	4798      	blx	r3
 8000b30:	3601      	adds	r6, #1
 8000b32:	e7f2      	b.n	8000b1a <__libc_init_array+0x1e>
 8000b34:	08000b70 	.word	0x08000b70
 8000b38:	08000b70 	.word	0x08000b70
 8000b3c:	08000b70 	.word	0x08000b70
 8000b40:	08000b74 	.word	0x08000b74

08000b44 <_init>:
 8000b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b46:	bf00      	nop
 8000b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b4a:	bc08      	pop	{r3}
 8000b4c:	469e      	mov	lr, r3
 8000b4e:	4770      	bx	lr

08000b50 <_fini>:
 8000b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b52:	bf00      	nop
 8000b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b56:	bc08      	pop	{r3}
 8000b58:	469e      	mov	lr, r3
 8000b5a:	4770      	bx	lr
