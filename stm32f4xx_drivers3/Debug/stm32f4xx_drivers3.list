
stm32f4xx_drivers3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800244c  0800244c  0000344c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800255c  0800255c  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800255c  0800255c  0000355c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002564  08002564  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002564  08002564  00003564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002568  08002568  00003568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800256c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004068  2**0
                  CONTENTS
 10 .bss          00000218  20000068  20000068  00004068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000280  20000280  00004068  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000012a8  00000000  00000000  00004092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000488  00000000  00000000  0000533a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000140  00000000  00000000  000057c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000e4  00000000  00000000  00005908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000023a4  00000000  00000000  000059ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000193d  00000000  00000000  00007d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009ab0  00000000  00000000  000096cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001317d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000fd0  00000000  00000000  000131c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00014190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002434 	.word	0x08002434

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08002434 	.word	0x08002434

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <SPI2_GPIOInit>:
#define LED_PIN				9




void SPI2_GPIOInit(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 8000286:	4b14      	ldr	r3, [pc, #80]	@ (80002d8 <SPI2_GPIOInit+0x58>)
 8000288:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800028a:	2302      	movs	r3, #2
 800028c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800028e:	2305      	movs	r3, #5
 8000290:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000292:	2300      	movs	r3, #0
 8000294:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;
 8000296:	2301      	movs	r3, #1
 8000298:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800029a:	2302      	movs	r3, #2
 800029c:	72bb      	strb	r3, [r7, #10]
	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_13;
 800029e:	230d      	movs	r3, #13
 80002a0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 fa83 	bl	80007b0 <GPIO_Init>
	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_15;
 80002aa:	230f      	movs	r3, #15
 80002ac:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 fa7d 	bl	80007b0 <GPIO_Init>
	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_14;
 80002b6:	230e      	movs	r3, #14
 80002b8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 fa77 	bl	80007b0 <GPIO_Init>
	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_12;
 80002c2:	230c      	movs	r3, #12
 80002c4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 fa71 	bl	80007b0 <GPIO_Init>

}
 80002ce:	bf00      	nop
 80002d0:	3710      	adds	r7, #16
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40020400 	.word	0x40020400

080002dc <SPI2_Init>:
void SPI2_Init(void){
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx = SPI2;
 80002e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000314 <SPI2_Init+0x38>)
 80002e4:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80002e6:	2301      	movs	r3, #1
 80002e8:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002ea:	2301      	movs	r3, #1
 80002ec:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 80002ee:	2304      	movs	r3, #4
 80002f0:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80002f2:	2300      	movs	r3, #0
 80002f4:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80002f6:	2300      	movs	r3, #0
 80002f8:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80002fa:	2300      	movs	r3, #0
 80002fc:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI;//Hardware
 80002fe:	2300      	movs	r3, #0
 8000300:	73bb      	strb	r3, [r7, #14]
	SPI_Init(&SPI2handle);
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	4618      	mov	r0, r3
 8000306:	f000 fd41 	bl	8000d8c <SPI_Init>
}
 800030a:	bf00      	nop
 800030c:	3710      	adds	r7, #16
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	40003800 	.word	0x40003800

08000318 <GPIO_ButtonInit>:
void GPIO_ButtonInit(void){
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOButton;
	GPIOButton.pGPIOx = GPIOA;
 800031e:	4b09      	ldr	r3, [pc, #36]	@ (8000344 <GPIO_ButtonInit+0x2c>)
 8000320:	607b      	str	r3, [r7, #4]
	GPIOButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_0;
 8000322:	2300      	movs	r3, #0
 8000324:	723b      	strb	r3, [r7, #8]
	GPIOButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000326:	2300      	movs	r3, #0
 8000328:	727b      	strb	r3, [r7, #9]
	GPIOButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800032a:	2302      	movs	r3, #2
 800032c:	72bb      	strb	r3, [r7, #10]
	GPIOButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800032e:	2300      	movs	r3, #0
 8000330:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&GPIOButton);
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fa3b 	bl	80007b0 <GPIO_Init>
}
 800033a:	bf00      	nop
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40020000 	.word	0x40020000

08000348 <delay>:
void delay(void){
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i<500000/2; i++);
 800034e:	2300      	movs	r3, #0
 8000350:	607b      	str	r3, [r7, #4]
 8000352:	e002      	b.n	800035a <delay+0x12>
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	3301      	adds	r3, #1
 8000358:	607b      	str	r3, [r7, #4]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a04      	ldr	r2, [pc, #16]	@ (8000370 <delay+0x28>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d9f8      	bls.n	8000354 <delay+0xc>
}
 8000362:	bf00      	nop
 8000364:	bf00      	nop
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	0003d08f 	.word	0x0003d08f

08000374 <SPI_verifyresponse>:
uint8_t SPI_verifyresponse(uint8_t ackbyte){
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
	if (ackbyte == (uint8_t)0xF5){
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	2bf5      	cmp	r3, #245	@ 0xf5
 8000382:	d101      	bne.n	8000388 <SPI_verifyresponse+0x14>
		//ack
		return 1;
 8000384:	2301      	movs	r3, #1
 8000386:	e000      	b.n	800038a <SPI_verifyresponse+0x16>
	}
	else{
		return 0;
 8000388:	2300      	movs	r3, #0
	}
}
 800038a:	4618      	mov	r0, r3
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr

08000394 <main>:

int main(void){
 8000394:	b5b0      	push	{r4, r5, r7, lr}
 8000396:	b08e      	sub	sp, #56	@ 0x38
 8000398:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 800039a:	f001 ffc7 	bl	800232c <initialise_monitor_handles>
	uint8_t dummy_write = 0xff;
 800039e:	23ff      	movs	r3, #255	@ 0xff
 80003a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t dummy_read;
	printf("Application is running\n");
 80003a4:	48ca      	ldr	r0, [pc, #808]	@ (80006d0 <main+0x33c>)
 80003a6:	f000 ff29 	bl	80011fc <puts>
	GPIO_ButtonInit();
 80003aa:	f7ff ffb5 	bl	8000318 <GPIO_ButtonInit>
	SPI2_GPIOInit();
 80003ae:	f7ff ff67 	bl	8000280 <SPI2_GPIOInit>
	SPI2_Init();
 80003b2:	f7ff ff93 	bl	80002dc <SPI2_Init>
	printf("SPI2 Init done\n");
 80003b6:	48c7      	ldr	r0, [pc, #796]	@ (80006d4 <main+0x340>)
 80003b8:	f000 ff20 	bl	80011fc <puts>
	//enable SPI2 peripheral
	SPI_SSOEConfig(SPI2, ENABLE);
 80003bc:	2101      	movs	r1, #1
 80003be:	48c6      	ldr	r0, [pc, #792]	@ (80006d8 <main+0x344>)
 80003c0:	f000 fdd6 	bl	8000f70 <SPI_SSOEConfig>
	while(1){
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_No_0) );
 80003c4:	bf00      	nop
 80003c6:	2100      	movs	r1, #0
 80003c8:	48c4      	ldr	r0, [pc, #784]	@ (80006dc <main+0x348>)
 80003ca:	f000 fc71 	bl	8000cb0 <GPIO_ReadFromInputPin>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d0f8      	beq.n	80003c6 <main+0x32>
		delay();
 80003d4:	f7ff ffb8 	bl	8000348 <delay>
		SPI_PeripheralControl(SPI2, ENABLE);
 80003d8:	2101      	movs	r1, #1
 80003da:	48bf      	ldr	r0, [pc, #764]	@ (80006d8 <main+0x344>)
 80003dc:	f000 fdad 	bl	8000f3a <SPI_PeripheralControl>
		//first send command 1 CMD_LED_CTRL
		uint8_t commandcode = COMMAND_LED_CTRL;
 80003e0:	2350      	movs	r3, #80	@ 0x50
 80003e2:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
		uint8_t ackbyte;
		uint8_t args[2];
		SPI_SendData(SPI2, &commandcode, 1);
 80003e6:	f107 0331 	add.w	r3, r7, #49	@ 0x31
 80003ea:	2201      	movs	r2, #1
 80003ec:	4619      	mov	r1, r3
 80003ee:	48ba      	ldr	r0, [pc, #744]	@ (80006d8 <main+0x344>)
 80003f0:	f000 fd35 	bl	8000e5e <SPI_SendData>
		//do dummy read since everytime master sends one byte it gets one byte back
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 80003f4:	f107 0332 	add.w	r3, r7, #50	@ 0x32
 80003f8:	2201      	movs	r2, #1
 80003fa:	4619      	mov	r1, r3
 80003fc:	48b6      	ldr	r0, [pc, #728]	@ (80006d8 <main+0x344>)
 80003fe:	f000 fd65 	bl	8000ecc <SPI_ReceiveData>
		//send some dummy bits (1byte) to fetch response from slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000402:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 8000406:	2201      	movs	r2, #1
 8000408:	4619      	mov	r1, r3
 800040a:	48b3      	ldr	r0, [pc, #716]	@ (80006d8 <main+0x344>)
 800040c:	f000 fd27 	bl	8000e5e <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000410:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000414:	2201      	movs	r2, #1
 8000416:	4619      	mov	r1, r3
 8000418:	48af      	ldr	r0, [pc, #700]	@ (80006d8 <main+0x344>)
 800041a:	f000 fd57 	bl	8000ecc <SPI_ReceiveData>
		if(SPI_verifyresponse(ackbyte)){
 800041e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff ffa6 	bl	8000374 <SPI_verifyresponse>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d016      	beq.n	800045c <main+0xc8>
			//send arguments(pin num,val)
			args[0] = LED_PIN;
 800042e:	2309      	movs	r3, #9
 8000430:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			args[1] = LED_ON;
 8000434:	2301      	movs	r3, #1
 8000436:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
			SPI_SendData(SPI2, args, 2);
 800043a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800043e:	2202      	movs	r2, #2
 8000440:	4619      	mov	r1, r3
 8000442:	48a5      	ldr	r0, [pc, #660]	@ (80006d8 <main+0x344>)
 8000444:	f000 fd0b 	bl	8000e5e <SPI_SendData>
			SPI_ReceiveData(SPI2, args, 2);
 8000448:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800044c:	2202      	movs	r2, #2
 800044e:	4619      	mov	r1, r3
 8000450:	48a1      	ldr	r0, [pc, #644]	@ (80006d8 <main+0x344>)
 8000452:	f000 fd3b 	bl	8000ecc <SPI_ReceiveData>
			printf("COMMAND_LED_CTRL executed\n");
 8000456:	48a2      	ldr	r0, [pc, #648]	@ (80006e0 <main+0x34c>)
 8000458:	f000 fed0 	bl	80011fc <puts>

		}
		//Command sensor read
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_No_0) );
 800045c:	bf00      	nop
 800045e:	2100      	movs	r1, #0
 8000460:	489e      	ldr	r0, [pc, #632]	@ (80006dc <main+0x348>)
 8000462:	f000 fc25 	bl	8000cb0 <GPIO_ReadFromInputPin>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d0f8      	beq.n	800045e <main+0xca>
		delay();
 800046c:	f7ff ff6c 	bl	8000348 <delay>
		commandcode = COMMAND_SENSOR_READ;
 8000470:	2351      	movs	r3, #81	@ 0x51
 8000472:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
		SPI_SendData(SPI2, &commandcode, 1);
 8000476:	f107 0331 	add.w	r3, r7, #49	@ 0x31
 800047a:	2201      	movs	r2, #1
 800047c:	4619      	mov	r1, r3
 800047e:	4896      	ldr	r0, [pc, #600]	@ (80006d8 <main+0x344>)
 8000480:	f000 fced 	bl	8000e5e <SPI_SendData>
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000484:	f107 0332 	add.w	r3, r7, #50	@ 0x32
 8000488:	2201      	movs	r2, #1
 800048a:	4619      	mov	r1, r3
 800048c:	4892      	ldr	r0, [pc, #584]	@ (80006d8 <main+0x344>)
 800048e:	f000 fd1d 	bl	8000ecc <SPI_ReceiveData>
		//send some dummy bits (1byte) to fetch response from slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000492:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 8000496:	2201      	movs	r2, #1
 8000498:	4619      	mov	r1, r3
 800049a:	488f      	ldr	r0, [pc, #572]	@ (80006d8 <main+0x344>)
 800049c:	f000 fcdf 	bl	8000e5e <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 80004a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004a4:	2201      	movs	r2, #1
 80004a6:	4619      	mov	r1, r3
 80004a8:	488b      	ldr	r0, [pc, #556]	@ (80006d8 <main+0x344>)
 80004aa:	f000 fd0f 	bl	8000ecc <SPI_ReceiveData>
		if(SPI_verifyresponse(ackbyte)){
 80004ae:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80004b2:	4618      	mov	r0, r3
 80004b4:	f7ff ff5e 	bl	8000374 <SPI_verifyresponse>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d024      	beq.n	8000508 <main+0x174>
			//send arguments(pin num,val)
			args[0] = ANALOG_PIN0;
 80004be:	2300      	movs	r3, #0
 80004c0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			SPI_SendData(SPI2, args, 1);
 80004c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80004c8:	2201      	movs	r2, #1
 80004ca:	4619      	mov	r1, r3
 80004cc:	4882      	ldr	r0, [pc, #520]	@ (80006d8 <main+0x344>)
 80004ce:	f000 fcc6 	bl	8000e5e <SPI_SendData>
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 80004d2:	f107 0332 	add.w	r3, r7, #50	@ 0x32
 80004d6:	2201      	movs	r2, #1
 80004d8:	4619      	mov	r1, r3
 80004da:	487f      	ldr	r0, [pc, #508]	@ (80006d8 <main+0x344>)
 80004dc:	f000 fcf6 	bl	8000ecc <SPI_ReceiveData>
			delay();
 80004e0:	f7ff ff32 	bl	8000348 <delay>
			SPI_SendData(SPI2, &dummy_write, 1);
 80004e4:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 80004e8:	2201      	movs	r2, #1
 80004ea:	4619      	mov	r1, r3
 80004ec:	487a      	ldr	r0, [pc, #488]	@ (80006d8 <main+0x344>)
 80004ee:	f000 fcb6 	bl	8000e5e <SPI_SendData>
			uint8_t analog_read;
			SPI_ReceiveData(SPI2, &analog_read, 1);
 80004f2:	1dfb      	adds	r3, r7, #7
 80004f4:	2201      	movs	r2, #1
 80004f6:	4619      	mov	r1, r3
 80004f8:	4877      	ldr	r0, [pc, #476]	@ (80006d8 <main+0x344>)
 80004fa:	f000 fce7 	bl	8000ecc <SPI_ReceiveData>
			printf("CMD_SENSOR_READ %d\n", analog_read);
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	4619      	mov	r1, r3
 8000502:	4878      	ldr	r0, [pc, #480]	@ (80006e4 <main+0x350>)
 8000504:	f000 fe12 	bl	800112c <iprintf>

		}
		//COMMAND_LED_READ
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_No_0) );
 8000508:	bf00      	nop
 800050a:	2100      	movs	r1, #0
 800050c:	4873      	ldr	r0, [pc, #460]	@ (80006dc <main+0x348>)
 800050e:	f000 fbcf 	bl	8000cb0 <GPIO_ReadFromInputPin>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d0f8      	beq.n	800050a <main+0x176>
		delay();
 8000518:	f7ff ff16 	bl	8000348 <delay>
		commandcode = COMMAND_LED_READ;
 800051c:	2352      	movs	r3, #82	@ 0x52
 800051e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
		SPI_SendData(SPI2, &commandcode, 1);
 8000522:	f107 0331 	add.w	r3, r7, #49	@ 0x31
 8000526:	2201      	movs	r2, #1
 8000528:	4619      	mov	r1, r3
 800052a:	486b      	ldr	r0, [pc, #428]	@ (80006d8 <main+0x344>)
 800052c:	f000 fc97 	bl	8000e5e <SPI_SendData>
		//do dummy read since everytime master sends one byte it gets one byte back
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000530:	f107 0332 	add.w	r3, r7, #50	@ 0x32
 8000534:	2201      	movs	r2, #1
 8000536:	4619      	mov	r1, r3
 8000538:	4867      	ldr	r0, [pc, #412]	@ (80006d8 <main+0x344>)
 800053a:	f000 fcc7 	bl	8000ecc <SPI_ReceiveData>
		//send some dummy bits (1byte) to fetch response from slave
		SPI_SendData(SPI2, &dummy_write, 1);
 800053e:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 8000542:	2201      	movs	r2, #1
 8000544:	4619      	mov	r1, r3
 8000546:	4864      	ldr	r0, [pc, #400]	@ (80006d8 <main+0x344>)
 8000548:	f000 fc89 	bl	8000e5e <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 800054c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000550:	2201      	movs	r2, #1
 8000552:	4619      	mov	r1, r3
 8000554:	4860      	ldr	r0, [pc, #384]	@ (80006d8 <main+0x344>)
 8000556:	f000 fcb9 	bl	8000ecc <SPI_ReceiveData>
		if(SPI_verifyresponse(ackbyte)){
 800055a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff ff08 	bl	8000374 <SPI_verifyresponse>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d024      	beq.n	80005b4 <main+0x220>
			args[0] = LED_PIN;
 800056a:	2309      	movs	r3, #9
 800056c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			SPI_SendData(SPI2, args, 1);
 8000570:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000574:	2201      	movs	r2, #1
 8000576:	4619      	mov	r1, r3
 8000578:	4857      	ldr	r0, [pc, #348]	@ (80006d8 <main+0x344>)
 800057a:	f000 fc70 	bl	8000e5e <SPI_SendData>
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 800057e:	f107 0332 	add.w	r3, r7, #50	@ 0x32
 8000582:	2201      	movs	r2, #1
 8000584:	4619      	mov	r1, r3
 8000586:	4854      	ldr	r0, [pc, #336]	@ (80006d8 <main+0x344>)
 8000588:	f000 fca0 	bl	8000ecc <SPI_ReceiveData>
			delay();
 800058c:	f7ff fedc 	bl	8000348 <delay>
			SPI_SendData(SPI2, &dummy_write, 1);
 8000590:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 8000594:	2201      	movs	r2, #1
 8000596:	4619      	mov	r1, r3
 8000598:	484f      	ldr	r0, [pc, #316]	@ (80006d8 <main+0x344>)
 800059a:	f000 fc60 	bl	8000e5e <SPI_SendData>
			uint8_t led_status;
			SPI_ReceiveData(SPI2, &led_status, 1);
 800059e:	1dbb      	adds	r3, r7, #6
 80005a0:	2201      	movs	r2, #1
 80005a2:	4619      	mov	r1, r3
 80005a4:	484c      	ldr	r0, [pc, #304]	@ (80006d8 <main+0x344>)
 80005a6:	f000 fc91 	bl	8000ecc <SPI_ReceiveData>
			printf("CMD_LED_READ %d\n", led_status);
 80005aa:	79bb      	ldrb	r3, [r7, #6]
 80005ac:	4619      	mov	r1, r3
 80005ae:	484e      	ldr	r0, [pc, #312]	@ (80006e8 <main+0x354>)
 80005b0:	f000 fdbc 	bl	800112c <iprintf>

		}
		//COMMAND_PRINT
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_No_0) );
 80005b4:	bf00      	nop
 80005b6:	2100      	movs	r1, #0
 80005b8:	4848      	ldr	r0, [pc, #288]	@ (80006dc <main+0x348>)
 80005ba:	f000 fb79 	bl	8000cb0 <GPIO_ReadFromInputPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d0f8      	beq.n	80005b6 <main+0x222>
		delay();
 80005c4:	f7ff fec0 	bl	8000348 <delay>
		commandcode = COMMAND_PRINT;
 80005c8:	2353      	movs	r3, #83	@ 0x53
 80005ca:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
		SPI_SendData(SPI2, &commandcode, 1);
 80005ce:	f107 0331 	add.w	r3, r7, #49	@ 0x31
 80005d2:	2201      	movs	r2, #1
 80005d4:	4619      	mov	r1, r3
 80005d6:	4840      	ldr	r0, [pc, #256]	@ (80006d8 <main+0x344>)
 80005d8:	f000 fc41 	bl	8000e5e <SPI_SendData>
		//do dummy read since everytime master sends one byte it gets one byte back
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 80005dc:	f107 0332 	add.w	r3, r7, #50	@ 0x32
 80005e0:	2201      	movs	r2, #1
 80005e2:	4619      	mov	r1, r3
 80005e4:	483c      	ldr	r0, [pc, #240]	@ (80006d8 <main+0x344>)
 80005e6:	f000 fc71 	bl	8000ecc <SPI_ReceiveData>
		//send some dummy bits (1byte) to fetch response from slave
		SPI_SendData(SPI2, &dummy_write, 1);
 80005ea:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 80005ee:	2201      	movs	r2, #1
 80005f0:	4619      	mov	r1, r3
 80005f2:	4839      	ldr	r0, [pc, #228]	@ (80006d8 <main+0x344>)
 80005f4:	f000 fc33 	bl	8000e5e <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 80005f8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80005fc:	2201      	movs	r2, #1
 80005fe:	4619      	mov	r1, r3
 8000600:	4835      	ldr	r0, [pc, #212]	@ (80006d8 <main+0x344>)
 8000602:	f000 fc63 	bl	8000ecc <SPI_ReceiveData>

		uint8_t message[] = "Hello ! How are you??";
 8000606:	4b39      	ldr	r3, [pc, #228]	@ (80006ec <main+0x358>)
 8000608:	f107 0414 	add.w	r4, r7, #20
 800060c:	461d      	mov	r5, r3
 800060e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000612:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000616:	6020      	str	r0, [r4, #0]
 8000618:	3404      	adds	r4, #4
 800061a:	8021      	strh	r1, [r4, #0]
		if(SPI_verifyresponse(ackbyte)){
 800061c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff fea7 	bl	8000374 <SPI_verifyresponse>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d01b      	beq.n	8000664 <main+0x2d0>
			args[0] = strlen((char*)message);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff fdcd 	bl	80001d0 <strlen>
 8000636:	4603      	mov	r3, r0
 8000638:	b2db      	uxtb	r3, r3
 800063a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			SPI_SendData(SPI2, args, 1);
 800063e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000642:	2201      	movs	r2, #1
 8000644:	4619      	mov	r1, r3
 8000646:	4824      	ldr	r0, [pc, #144]	@ (80006d8 <main+0x344>)
 8000648:	f000 fc09 	bl	8000e5e <SPI_SendData>
			SPI_SendData(SPI2, message, args[0]);
 800064c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000650:	461a      	mov	r2, r3
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4619      	mov	r1, r3
 8000658:	481f      	ldr	r0, [pc, #124]	@ (80006d8 <main+0x344>)
 800065a:	f000 fc00 	bl	8000e5e <SPI_SendData>
			printf("CMD_PRINT done\n");
 800065e:	4824      	ldr	r0, [pc, #144]	@ (80006f0 <main+0x35c>)
 8000660:	f000 fdcc 	bl	80011fc <puts>

		}
		//COMMAND_ID_READ
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_No_0) );
 8000664:	bf00      	nop
 8000666:	2100      	movs	r1, #0
 8000668:	481c      	ldr	r0, [pc, #112]	@ (80006dc <main+0x348>)
 800066a:	f000 fb21 	bl	8000cb0 <GPIO_ReadFromInputPin>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d0f8      	beq.n	8000666 <main+0x2d2>
		delay();
 8000674:	f7ff fe68 	bl	8000348 <delay>
		commandcode = COMMAND_ID_READ;
 8000678:	2354      	movs	r3, #84	@ 0x54
 800067a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
		SPI_SendData(SPI2, &commandcode, 1);
 800067e:	f107 0331 	add.w	r3, r7, #49	@ 0x31
 8000682:	2201      	movs	r2, #1
 8000684:	4619      	mov	r1, r3
 8000686:	4814      	ldr	r0, [pc, #80]	@ (80006d8 <main+0x344>)
 8000688:	f000 fbe9 	bl	8000e5e <SPI_SendData>
		//do dummy read since everytime master sends one byte it gets one byte back
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 800068c:	f107 0332 	add.w	r3, r7, #50	@ 0x32
 8000690:	2201      	movs	r2, #1
 8000692:	4619      	mov	r1, r3
 8000694:	4810      	ldr	r0, [pc, #64]	@ (80006d8 <main+0x344>)
 8000696:	f000 fc19 	bl	8000ecc <SPI_ReceiveData>
		//send some dummy bits (1byte) to fetch response from slave
		SPI_SendData(SPI2, &dummy_write, 1);
 800069a:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 800069e:	2201      	movs	r2, #1
 80006a0:	4619      	mov	r1, r3
 80006a2:	480d      	ldr	r0, [pc, #52]	@ (80006d8 <main+0x344>)
 80006a4:	f000 fbdb 	bl	8000e5e <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 80006a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006ac:	2201      	movs	r2, #1
 80006ae:	4619      	mov	r1, r3
 80006b0:	4809      	ldr	r0, [pc, #36]	@ (80006d8 <main+0x344>)
 80006b2:	f000 fc0b 	bl	8000ecc <SPI_ReceiveData>

		uint8_t id[10];
		uint32_t i = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	637b      	str	r3, [r7, #52]	@ 0x34
		if(SPI_verifyresponse(ackbyte)){
 80006ba:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fe58 	bl	8000374 <SPI_verifyresponse>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d032      	beq.n	8000730 <main+0x39c>
			//read 10 bytes of id
			for(i=0;i<10;i++){
 80006ca:	2300      	movs	r3, #0
 80006cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80006ce:	e024      	b.n	800071a <main+0x386>
 80006d0:	0800244c 	.word	0x0800244c
 80006d4:	08002464 	.word	0x08002464
 80006d8:	40003800 	.word	0x40003800
 80006dc:	40020000 	.word	0x40020000
 80006e0:	08002474 	.word	0x08002474
 80006e4:	08002490 	.word	0x08002490
 80006e8:	080024a4 	.word	0x080024a4
 80006ec:	080024f8 	.word	0x080024f8
 80006f0:	080024b8 	.word	0x080024b8
				SPI_SendData(SPI2, &dummy_read, 1);
 80006f4:	f107 0332 	add.w	r3, r7, #50	@ 0x32
 80006f8:	2201      	movs	r2, #1
 80006fa:	4619      	mov	r1, r3
 80006fc:	4814      	ldr	r0, [pc, #80]	@ (8000750 <main+0x3bc>)
 80006fe:	f000 fbae 	bl	8000e5e <SPI_SendData>
				SPI_ReceiveData(SPI2, &id[i], 1);
 8000702:	f107 0208 	add.w	r2, r7, #8
 8000706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000708:	4413      	add	r3, r2
 800070a:	2201      	movs	r2, #1
 800070c:	4619      	mov	r1, r3
 800070e:	4810      	ldr	r0, [pc, #64]	@ (8000750 <main+0x3bc>)
 8000710:	f000 fbdc 	bl	8000ecc <SPI_ReceiveData>
			for(i=0;i<10;i++){
 8000714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000716:	3301      	adds	r3, #1
 8000718:	637b      	str	r3, [r7, #52]	@ 0x34
 800071a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800071c:	2b09      	cmp	r3, #9
 800071e:	d9e9      	bls.n	80006f4 <main+0x360>
			}
			id[11] = '\0';
 8000720:	2300      	movs	r3, #0
 8000722:	74fb      	strb	r3, [r7, #19]
			printf("COMMAND_ID: %s \n", id);
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	4619      	mov	r1, r3
 800072a:	480a      	ldr	r0, [pc, #40]	@ (8000754 <main+0x3c0>)
 800072c:	f000 fcfe 	bl	800112c <iprintf>
		}
		//have to check if SPI is busy
		while(SPI_GetFlagStatus(SPI2, SPI_BSY_FLAG));
 8000730:	bf00      	nop
 8000732:	2180      	movs	r1, #128	@ 0x80
 8000734:	4806      	ldr	r0, [pc, #24]	@ (8000750 <main+0x3bc>)
 8000736:	f000 fb7f 	bl	8000e38 <SPI_GetFlagStatus>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d1f8      	bne.n	8000732 <main+0x39e>
		//disbale
		SPI_PeripheralControl(SPI2, DISABLE);
 8000740:	2100      	movs	r1, #0
 8000742:	4803      	ldr	r0, [pc, #12]	@ (8000750 <main+0x3bc>)
 8000744:	f000 fbf9 	bl	8000f3a <SPI_PeripheralControl>
		printf("SPI Communication closed");
 8000748:	4803      	ldr	r0, [pc, #12]	@ (8000758 <main+0x3c4>)
 800074a:	f000 fcef 	bl	800112c <iprintf>
	while(1){
 800074e:	e639      	b.n	80003c4 <main+0x30>
 8000750:	40003800 	.word	0x40003800
 8000754:	080024c8 	.word	0x080024c8
 8000758:	080024dc 	.word	0x080024dc

0800075c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800075c:	480d      	ldr	r0, [pc, #52]	@ (8000794 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800075e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000760:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000764:	480c      	ldr	r0, [pc, #48]	@ (8000798 <LoopForever+0x6>)
  ldr r1, =_edata
 8000766:	490d      	ldr	r1, [pc, #52]	@ (800079c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000768:	4a0d      	ldr	r2, [pc, #52]	@ (80007a0 <LoopForever+0xe>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800076c:	e002      	b.n	8000774 <LoopCopyDataInit>

0800076e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000772:	3304      	adds	r3, #4

08000774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000778:	d3f9      	bcc.n	800076e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077a:	4a0a      	ldr	r2, [pc, #40]	@ (80007a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800077c:	4c0a      	ldr	r4, [pc, #40]	@ (80007a8 <LoopForever+0x16>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000780:	e001      	b.n	8000786 <LoopFillZerobss>

08000782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000784:	3204      	adds	r2, #4

08000786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000788:	d3fb      	bcc.n	8000782 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800078a:	f000 fe65 	bl	8001458 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800078e:	f7ff fe01 	bl	8000394 <main>

08000792 <LoopForever>:

LoopForever:
  b LoopForever
 8000792:	e7fe      	b.n	8000792 <LoopForever>
  ldr   r0, =_estack
 8000794:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800079c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80007a0:	0800256c 	.word	0x0800256c
  ldr r2, =_sbss
 80007a4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80007a8:	20000280 	.word	0x20000280

080007ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007ac:	e7fe      	b.n	80007ac <ADC_IRQHandler>
	...

080007b0 <GPIO_Init>:
	* @param  *pGPIOHandle : pointer to the GPIO handle struct
	* @param
	* @param
	* @return None
	*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	//enable peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2101      	movs	r1, #1
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 f98e 	bl	8000ae0 <GPIO_PeriClockControl>
		//1 configure the mode of GPIO pin
	uint32_t temp = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	795b      	ldrb	r3, [r3, #5]
 80007cc:	2b03      	cmp	r3, #3
 80007ce:	d822      	bhi.n	8000816 <GPIO_Init+0x66>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	795b      	ldrb	r3, [r3, #5]
 80007d4:	461a      	mov	r2, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	791b      	ldrb	r3, [r3, #4]
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	fa02 f303 	lsl.w	r3, r2, r3
 80007e0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3<<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	791b      	ldrb	r3, [r3, #4]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	2103      	movs	r1, #3
 80007f0:	fa01 f303 	lsl.w	r3, r1, r3
 80007f4:	43db      	mvns	r3, r3
 80007f6:	4619      	mov	r1, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	400a      	ands	r2, r1
 80007fe:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	6819      	ldr	r1, [r3, #0]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	697a      	ldr	r2, [r7, #20]
 800080c:	430a      	orrs	r2, r1
 800080e:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	e0c1      	b.n	800099a <GPIO_Init+0x1ea>
	}
	else{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	795b      	ldrb	r3, [r3, #5]
 800081a:	2b04      	cmp	r3, #4
 800081c:	d117      	bne.n	800084e <GPIO_Init+0x9e>
			//1. configure falling edge reg
			EXTI->FTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800081e:	4b47      	ldr	r3, [pc, #284]	@ (800093c <GPIO_Init+0x18c>)
 8000820:	68db      	ldr	r3, [r3, #12]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	7912      	ldrb	r2, [r2, #4]
 8000826:	4611      	mov	r1, r2
 8000828:	2201      	movs	r2, #1
 800082a:	408a      	lsls	r2, r1
 800082c:	4611      	mov	r1, r2
 800082e:	4a43      	ldr	r2, [pc, #268]	@ (800093c <GPIO_Init+0x18c>)
 8000830:	430b      	orrs	r3, r1
 8000832:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000834:	4b41      	ldr	r3, [pc, #260]	@ (800093c <GPIO_Init+0x18c>)
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	7912      	ldrb	r2, [r2, #4]
 800083c:	4611      	mov	r1, r2
 800083e:	2201      	movs	r2, #1
 8000840:	408a      	lsls	r2, r1
 8000842:	43d2      	mvns	r2, r2
 8000844:	4611      	mov	r1, r2
 8000846:	4a3d      	ldr	r2, [pc, #244]	@ (800093c <GPIO_Init+0x18c>)
 8000848:	400b      	ands	r3, r1
 800084a:	6093      	str	r3, [r2, #8]
 800084c:	e035      	b.n	80008ba <GPIO_Init+0x10a>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	795b      	ldrb	r3, [r3, #5]
 8000852:	2b05      	cmp	r3, #5
 8000854:	d117      	bne.n	8000886 <GPIO_Init+0xd6>
			EXTI->FTSR &= ~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000856:	4b39      	ldr	r3, [pc, #228]	@ (800093c <GPIO_Init+0x18c>)
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	7912      	ldrb	r2, [r2, #4]
 800085e:	4611      	mov	r1, r2
 8000860:	2201      	movs	r2, #1
 8000862:	408a      	lsls	r2, r1
 8000864:	43d2      	mvns	r2, r2
 8000866:	4611      	mov	r1, r2
 8000868:	4a34      	ldr	r2, [pc, #208]	@ (800093c <GPIO_Init+0x18c>)
 800086a:	400b      	ands	r3, r1
 800086c:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800086e:	4b33      	ldr	r3, [pc, #204]	@ (800093c <GPIO_Init+0x18c>)
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	7912      	ldrb	r2, [r2, #4]
 8000876:	4611      	mov	r1, r2
 8000878:	2201      	movs	r2, #1
 800087a:	408a      	lsls	r2, r1
 800087c:	4611      	mov	r1, r2
 800087e:	4a2f      	ldr	r2, [pc, #188]	@ (800093c <GPIO_Init+0x18c>)
 8000880:	430b      	orrs	r3, r1
 8000882:	6093      	str	r3, [r2, #8]
 8000884:	e019      	b.n	80008ba <GPIO_Init+0x10a>

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	795b      	ldrb	r3, [r3, #5]
 800088a:	2b06      	cmp	r3, #6
 800088c:	d115      	bne.n	80008ba <GPIO_Init+0x10a>
			EXTI->FTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800088e:	4b2b      	ldr	r3, [pc, #172]	@ (800093c <GPIO_Init+0x18c>)
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	7912      	ldrb	r2, [r2, #4]
 8000896:	4611      	mov	r1, r2
 8000898:	2201      	movs	r2, #1
 800089a:	408a      	lsls	r2, r1
 800089c:	4611      	mov	r1, r2
 800089e:	4a27      	ldr	r2, [pc, #156]	@ (800093c <GPIO_Init+0x18c>)
 80008a0:	430b      	orrs	r3, r1
 80008a2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008a4:	4b25      	ldr	r3, [pc, #148]	@ (800093c <GPIO_Init+0x18c>)
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	7912      	ldrb	r2, [r2, #4]
 80008ac:	4611      	mov	r1, r2
 80008ae:	2201      	movs	r2, #1
 80008b0:	408a      	lsls	r2, r1
 80008b2:	4611      	mov	r1, r2
 80008b4:	4a21      	ldr	r2, [pc, #132]	@ (800093c <GPIO_Init+0x18c>)
 80008b6:	430b      	orrs	r3, r1
 80008b8:	6093      	str	r3, [r2, #8]

		}
		//Configure GPIO port slection in SYSCFG
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	791b      	ldrb	r3, [r3, #4]
 80008be:	089b      	lsrs	r3, r3, #2
 80008c0:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	791b      	ldrb	r3, [r3, #4]
 80008c6:	f003 0303 	and.w	r3, r3, #3
 80008ca:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000940 <GPIO_Init+0x190>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d044      	beq.n	8000960 <GPIO_Init+0x1b0>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a1a      	ldr	r2, [pc, #104]	@ (8000944 <GPIO_Init+0x194>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d02b      	beq.n	8000938 <GPIO_Init+0x188>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a18      	ldr	r2, [pc, #96]	@ (8000948 <GPIO_Init+0x198>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d024      	beq.n	8000934 <GPIO_Init+0x184>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a17      	ldr	r2, [pc, #92]	@ (800094c <GPIO_Init+0x19c>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d01d      	beq.n	8000930 <GPIO_Init+0x180>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a15      	ldr	r2, [pc, #84]	@ (8000950 <GPIO_Init+0x1a0>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d016      	beq.n	800092c <GPIO_Init+0x17c>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a14      	ldr	r2, [pc, #80]	@ (8000954 <GPIO_Init+0x1a4>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d00f      	beq.n	8000928 <GPIO_Init+0x178>
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a12      	ldr	r2, [pc, #72]	@ (8000958 <GPIO_Init+0x1a8>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d008      	beq.n	8000924 <GPIO_Init+0x174>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a11      	ldr	r2, [pc, #68]	@ (800095c <GPIO_Init+0x1ac>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d101      	bne.n	8000920 <GPIO_Init+0x170>
 800091c:	2307      	movs	r3, #7
 800091e:	e020      	b.n	8000962 <GPIO_Init+0x1b2>
 8000920:	2300      	movs	r3, #0
 8000922:	e01e      	b.n	8000962 <GPIO_Init+0x1b2>
 8000924:	2306      	movs	r3, #6
 8000926:	e01c      	b.n	8000962 <GPIO_Init+0x1b2>
 8000928:	2305      	movs	r3, #5
 800092a:	e01a      	b.n	8000962 <GPIO_Init+0x1b2>
 800092c:	2304      	movs	r3, #4
 800092e:	e018      	b.n	8000962 <GPIO_Init+0x1b2>
 8000930:	2303      	movs	r3, #3
 8000932:	e016      	b.n	8000962 <GPIO_Init+0x1b2>
 8000934:	2302      	movs	r3, #2
 8000936:	e014      	b.n	8000962 <GPIO_Init+0x1b2>
 8000938:	2301      	movs	r3, #1
 800093a:	e012      	b.n	8000962 <GPIO_Init+0x1b2>
 800093c:	40013c00 	.word	0x40013c00
 8000940:	40020000 	.word	0x40020000
 8000944:	40020400 	.word	0x40020400
 8000948:	40020800 	.word	0x40020800
 800094c:	40020c00 	.word	0x40020c00
 8000950:	40021000 	.word	0x40021000
 8000954:	40021400 	.word	0x40021400
 8000958:	40021800 	.word	0x40021800
 800095c:	40021c00 	.word	0x40021c00
 8000960:	2300      	movs	r3, #0
 8000962:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000964:	4b5b      	ldr	r3, [pc, #364]	@ (8000ad4 <GPIO_Init+0x324>)
 8000966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000968:	4a5a      	ldr	r2, [pc, #360]	@ (8000ad4 <GPIO_Init+0x324>)
 800096a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800096e:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode<<(temp2*4);
 8000970:	7c7a      	ldrb	r2, [r7, #17]
 8000972:	7cbb      	ldrb	r3, [r7, #18]
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	fa02 f103 	lsl.w	r1, r2, r3
 800097a:	4a57      	ldr	r2, [pc, #348]	@ (8000ad8 <GPIO_Init+0x328>)
 800097c:	7cfb      	ldrb	r3, [r7, #19]
 800097e:	3302      	adds	r3, #2
 8000980:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//enable interrupt delievery in IMR
		EXTI->IMR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000984:	4b55      	ldr	r3, [pc, #340]	@ (8000adc <GPIO_Init+0x32c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	7912      	ldrb	r2, [r2, #4]
 800098c:	4611      	mov	r1, r2
 800098e:	2201      	movs	r2, #1
 8000990:	408a      	lsls	r2, r1
 8000992:	4611      	mov	r1, r2
 8000994:	4a51      	ldr	r2, [pc, #324]	@ (8000adc <GPIO_Init+0x32c>)
 8000996:	430b      	orrs	r3, r1
 8000998:	6013      	str	r3, [r2, #0]
	}

		//2 configure the speed of GPIO pin
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	799b      	ldrb	r3, [r3, #6]
 800099e:	461a      	mov	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	791b      	ldrb	r3, [r3, #4]
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3<<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	791b      	ldrb	r3, [r3, #4]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	2103      	movs	r1, #3
 80009ba:	fa01 f303 	lsl.w	r3, r1, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	4619      	mov	r1, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	400a      	ands	r2, r1
 80009c8:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	6899      	ldr	r1, [r3, #8]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	697a      	ldr	r2, [r7, #20]
 80009d6:	430a      	orrs	r2, r1
 80009d8:	609a      	str	r2, [r3, #8]
	temp = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]

		//3 configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	79db      	ldrb	r3, [r3, #7]
 80009e2:	461a      	mov	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	791b      	ldrb	r3, [r3, #4]
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3<<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	68da      	ldr	r2, [r3, #12]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	791b      	ldrb	r3, [r3, #4]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	2103      	movs	r1, #3
 80009fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000a02:	43db      	mvns	r3, r3
 8000a04:	4619      	mov	r1, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	400a      	ands	r2, r1
 8000a0c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	68d9      	ldr	r1, [r3, #12]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	697a      	ldr	r2, [r7, #20]
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
		//4 configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	7a1b      	ldrb	r3, [r3, #8]
 8000a26:	461a      	mov	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	791b      	ldrb	r3, [r3, #4]
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1<<(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	685a      	ldr	r2, [r3, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	791b      	ldrb	r3, [r3, #4]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	2301      	movs	r3, #1
 8000a40:	408b      	lsls	r3, r1
 8000a42:	43db      	mvns	r3, r3
 8000a44:	4619      	mov	r1, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	400a      	ands	r2, r1
 8000a4c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	6859      	ldr	r1, [r3, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	697a      	ldr	r2, [r7, #20]
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	605a      	str	r2, [r3, #4]
		//5 configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	795b      	ldrb	r3, [r3, #5]
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d131      	bne.n	8000aca <GPIO_Init+0x31a>
		uint8_t temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)/8;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	791b      	ldrb	r3, [r3, #4]
 8000a6a:	08db      	lsrs	r3, r3, #3
 8000a6c:	743b      	strb	r3, [r7, #16]
		uint8_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%8;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	791b      	ldrb	r3, [r3, #4]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~((0xF << (4 * temp2)));
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	7c3a      	ldrb	r2, [r7, #16]
 8000a7e:	3208      	adds	r2, #8
 8000a80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	220f      	movs	r2, #15
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	4618      	mov	r0, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	7c3a      	ldrb	r2, [r7, #16]
 8000a98:	4001      	ands	r1, r0
 8000a9a:	3208      	adds	r2, #8
 8000a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	7c3a      	ldrb	r2, [r7, #16]
 8000aa6:	3208      	adds	r2, #8
 8000aa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	7a5b      	ldrb	r3, [r3, #9]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	4618      	mov	r0, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	7c3a      	ldrb	r2, [r7, #16]
 8000ac2:	4301      	orrs	r1, r0
 8000ac4:	3208      	adds	r2, #8
 8000ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000aca:	bf00      	nop
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40013800 	.word	0x40013800
 8000adc:	40013c00 	.word	0x40013c00

08000ae0 <GPIO_PeriClockControl>:
	* @param  *pGPIOx : GPIO peripheral base address
	* @param  EnorDi  : ENABLE(1) or DISABLE(0) macros
	* @param
	* @return None
	*/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	70fb      	strb	r3, [r7, #3]
	if(EnorDi== ENABLE){
 8000aec:	78fb      	ldrb	r3, [r7, #3]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d162      	bne.n	8000bb8 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA){
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a64      	ldr	r2, [pc, #400]	@ (8000c88 <GPIO_PeriClockControl+0x1a8>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d106      	bne.n	8000b08 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000afa:	4b64      	ldr	r3, [pc, #400]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4a63      	ldr	r2, [pc, #396]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
		else if (pGPIOx == GPIOI){
			GPIOI_PCLK_DI();
		}
	}

}
 8000b06:	e0b9      	b.n	8000c7c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB){
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a61      	ldr	r2, [pc, #388]	@ (8000c90 <GPIO_PeriClockControl+0x1b0>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d106      	bne.n	8000b1e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000b10:	4b5e      	ldr	r3, [pc, #376]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b14:	4a5d      	ldr	r2, [pc, #372]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000b16:	f043 0302 	orr.w	r3, r3, #2
 8000b1a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b1c:	e0ae      	b.n	8000c7c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC){
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a5c      	ldr	r2, [pc, #368]	@ (8000c94 <GPIO_PeriClockControl+0x1b4>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d106      	bne.n	8000b34 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000b26:	4b59      	ldr	r3, [pc, #356]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a58      	ldr	r2, [pc, #352]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000b2c:	f043 0304 	orr.w	r3, r3, #4
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b32:	e0a3      	b.n	8000c7c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD){
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a58      	ldr	r2, [pc, #352]	@ (8000c98 <GPIO_PeriClockControl+0x1b8>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d106      	bne.n	8000b4a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000b3c:	4b53      	ldr	r3, [pc, #332]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b40:	4a52      	ldr	r2, [pc, #328]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000b42:	f043 0308 	orr.w	r3, r3, #8
 8000b46:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b48:	e098      	b.n	8000c7c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE){
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a53      	ldr	r2, [pc, #332]	@ (8000c9c <GPIO_PeriClockControl+0x1bc>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d106      	bne.n	8000b60 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000b52:	4b4e      	ldr	r3, [pc, #312]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a4d      	ldr	r2, [pc, #308]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000b58:	f043 0310 	orr.w	r3, r3, #16
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b5e:	e08d      	b.n	8000c7c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF){
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a4f      	ldr	r2, [pc, #316]	@ (8000ca0 <GPIO_PeriClockControl+0x1c0>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d106      	bne.n	8000b76 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000b68:	4b48      	ldr	r3, [pc, #288]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6c:	4a47      	ldr	r2, [pc, #284]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000b6e:	f043 0320 	orr.w	r3, r3, #32
 8000b72:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b74:	e082      	b.n	8000c7c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG){
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a4a      	ldr	r2, [pc, #296]	@ (8000ca4 <GPIO_PeriClockControl+0x1c4>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d106      	bne.n	8000b8c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000b7e:	4b43      	ldr	r3, [pc, #268]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a42      	ldr	r2, [pc, #264]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000b84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b8a:	e077      	b.n	8000c7c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH){
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a46      	ldr	r2, [pc, #280]	@ (8000ca8 <GPIO_PeriClockControl+0x1c8>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d106      	bne.n	8000ba2 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000b94:	4b3d      	ldr	r3, [pc, #244]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b98:	4a3c      	ldr	r2, [pc, #240]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b9e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ba0:	e06c      	b.n	8000c7c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI){
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a41      	ldr	r2, [pc, #260]	@ (8000cac <GPIO_PeriClockControl+0x1cc>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d168      	bne.n	8000c7c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000baa:	4b38      	ldr	r3, [pc, #224]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	4a37      	ldr	r2, [pc, #220]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bb4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000bb6:	e061      	b.n	8000c7c <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA){
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a33      	ldr	r2, [pc, #204]	@ (8000c88 <GPIO_PeriClockControl+0x1a8>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d106      	bne.n	8000bce <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000bc0:	4b32      	ldr	r3, [pc, #200]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc4:	4a31      	ldr	r2, [pc, #196]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000bc6:	f023 0301 	bic.w	r3, r3, #1
 8000bca:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000bcc:	e056      	b.n	8000c7c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB){
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a2f      	ldr	r2, [pc, #188]	@ (8000c90 <GPIO_PeriClockControl+0x1b0>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d106      	bne.n	8000be4 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	4a2c      	ldr	r2, [pc, #176]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000bdc:	f023 0302 	bic.w	r3, r3, #2
 8000be0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000be2:	e04b      	b.n	8000c7c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC){
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a2b      	ldr	r2, [pc, #172]	@ (8000c94 <GPIO_PeriClockControl+0x1b4>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d106      	bne.n	8000bfa <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000bec:	4b27      	ldr	r3, [pc, #156]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf0:	4a26      	ldr	r2, [pc, #152]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000bf2:	f023 0304 	bic.w	r3, r3, #4
 8000bf6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000bf8:	e040      	b.n	8000c7c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD){
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a26      	ldr	r2, [pc, #152]	@ (8000c98 <GPIO_PeriClockControl+0x1b8>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d106      	bne.n	8000c10 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000c02:	4b22      	ldr	r3, [pc, #136]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	4a21      	ldr	r2, [pc, #132]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000c08:	f023 0308 	bic.w	r3, r3, #8
 8000c0c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000c0e:	e035      	b.n	8000c7c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE){
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a22      	ldr	r2, [pc, #136]	@ (8000c9c <GPIO_PeriClockControl+0x1bc>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d106      	bne.n	8000c26 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000c18:	4b1c      	ldr	r3, [pc, #112]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000c1e:	f023 0310 	bic.w	r3, r3, #16
 8000c22:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000c24:	e02a      	b.n	8000c7c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF){
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a1d      	ldr	r2, [pc, #116]	@ (8000ca0 <GPIO_PeriClockControl+0x1c0>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d106      	bne.n	8000c3c <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000c2e:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	4a16      	ldr	r2, [pc, #88]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000c34:	f023 0320 	bic.w	r3, r3, #32
 8000c38:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000c3a:	e01f      	b.n	8000c7c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG){
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a19      	ldr	r2, [pc, #100]	@ (8000ca4 <GPIO_PeriClockControl+0x1c4>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d106      	bne.n	8000c52 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000c44:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c48:	4a10      	ldr	r2, [pc, #64]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000c4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000c4e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000c50:	e014      	b.n	8000c7c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH){
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a14      	ldr	r2, [pc, #80]	@ (8000ca8 <GPIO_PeriClockControl+0x1c8>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d106      	bne.n	8000c68 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000c60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000c66:	e009      	b.n	8000c7c <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI){
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a10      	ldr	r2, [pc, #64]	@ (8000cac <GPIO_PeriClockControl+0x1cc>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d105      	bne.n	8000c7c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c74:	4a05      	ldr	r2, [pc, #20]	@ (8000c8c <GPIO_PeriClockControl+0x1ac>)
 8000c76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000c7a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020400 	.word	0x40020400
 8000c94:	40020800 	.word	0x40020800
 8000c98:	40020c00 	.word	0x40020c00
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40021400 	.word	0x40021400
 8000ca4:	40021800 	.word	0x40021800
 8000ca8:	40021c00 	.word	0x40021c00
 8000cac:	40022000 	.word	0x40022000

08000cb0 <GPIO_ReadFromInputPin>:
	* @param  *pGPIOx : GPIO peripheral base address
	* @param  PinNum  : pin number that you want to read from
	* @param
	* @return : uint8_t data from GPIO pin (0 if low, 1 if high)
	*/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNum){
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNum) & 0x00000001);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	691a      	ldr	r2, [r3, #16]
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	73fb      	strb	r3, [r7, #15]
	return value;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]

}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
	...

08000cdc <SPI_PeriClockControl>:
	* @param  *pSPIx : pointer to the SPI base address
	* @param  EnorDi : takes either ENABLE(1) or DISABLE(0)to enable or disable clock
	* @param
	* @return None
	*/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi== ENABLE){
 8000ce8:	78fb      	ldrb	r3, [r7, #3]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d120      	bne.n	8000d30 <SPI_PeriClockControl+0x54>
			if(pSPIx == SPI1){
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a22      	ldr	r2, [pc, #136]	@ (8000d7c <SPI_PeriClockControl+0xa0>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d106      	bne.n	8000d04 <SPI_PeriClockControl+0x28>
				SPI1_PCLK_EN();
 8000cf6:	4b22      	ldr	r3, [pc, #136]	@ (8000d80 <SPI_PeriClockControl+0xa4>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfa:	4a21      	ldr	r2, [pc, #132]	@ (8000d80 <SPI_PeriClockControl+0xa4>)
 8000cfc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d00:	6453      	str	r3, [r2, #68]	@ 0x44
						else if (pSPIx == SPI3){
							SPI3_PCLK_DI();
						}
		}

}
 8000d02:	e035      	b.n	8000d70 <SPI_PeriClockControl+0x94>
			else if(pSPIx == SPI2){
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a1f      	ldr	r2, [pc, #124]	@ (8000d84 <SPI_PeriClockControl+0xa8>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d106      	bne.n	8000d1a <SPI_PeriClockControl+0x3e>
				SPI2_PCLK_EN();
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d80 <SPI_PeriClockControl+0xa4>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d10:	4a1b      	ldr	r2, [pc, #108]	@ (8000d80 <SPI_PeriClockControl+0xa4>)
 8000d12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d16:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d18:	e02a      	b.n	8000d70 <SPI_PeriClockControl+0x94>
			else if (pSPIx == SPI3){
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a1a      	ldr	r2, [pc, #104]	@ (8000d88 <SPI_PeriClockControl+0xac>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d126      	bne.n	8000d70 <SPI_PeriClockControl+0x94>
				SPI3_PCLK_EN();
 8000d22:	4b17      	ldr	r3, [pc, #92]	@ (8000d80 <SPI_PeriClockControl+0xa4>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d26:	4a16      	ldr	r2, [pc, #88]	@ (8000d80 <SPI_PeriClockControl+0xa4>)
 8000d28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d2c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d2e:	e01f      	b.n	8000d70 <SPI_PeriClockControl+0x94>
			if(pSPIx == SPI1){
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a12      	ldr	r2, [pc, #72]	@ (8000d7c <SPI_PeriClockControl+0xa0>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d106      	bne.n	8000d46 <SPI_PeriClockControl+0x6a>
							SPI1_PCLK_DI();
 8000d38:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <SPI_PeriClockControl+0xa4>)
 8000d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3c:	4a10      	ldr	r2, [pc, #64]	@ (8000d80 <SPI_PeriClockControl+0xa4>)
 8000d3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d42:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000d44:	e014      	b.n	8000d70 <SPI_PeriClockControl+0x94>
					else if(pSPIx == SPI2){
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a0e      	ldr	r2, [pc, #56]	@ (8000d84 <SPI_PeriClockControl+0xa8>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d106      	bne.n	8000d5c <SPI_PeriClockControl+0x80>
							SPI2_PCLK_DI();
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <SPI_PeriClockControl+0xa4>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d52:	4a0b      	ldr	r2, [pc, #44]	@ (8000d80 <SPI_PeriClockControl+0xa4>)
 8000d54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000d58:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d5a:	e009      	b.n	8000d70 <SPI_PeriClockControl+0x94>
						else if (pSPIx == SPI3){
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d88 <SPI_PeriClockControl+0xac>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d105      	bne.n	8000d70 <SPI_PeriClockControl+0x94>
							SPI3_PCLK_DI();
 8000d64:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <SPI_PeriClockControl+0xa4>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d68:	4a05      	ldr	r2, [pc, #20]	@ (8000d80 <SPI_PeriClockControl+0xa4>)
 8000d6a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000d6e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40013000 	.word	0x40013000
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40003800 	.word	0x40003800
 8000d88:	40003c00 	.word	0x40003c00

08000d8c <SPI_Init>:
	* @param  *pSPIHandle : pointer to the GPIO handle struct
	* @param
	* @param
	* @return None
	*/
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	//enable SPI clock
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2101      	movs	r1, #1
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff9e 	bl	8000cdc <SPI_PeriClockControl>
	//configure SPI_CR1 reg
	uint32_t temp = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
	//1. configure device mode
	temp |= pSPIHandle->SPIConfig.SPI_DeviceMode <<SPI_CR1_MSTR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	791b      	ldrb	r3, [r3, #4]
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]
	//2. configure bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	795b      	ldrb	r3, [r3, #5]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d104      	bne.n	8000dc2 <SPI_Init+0x36>
		//bidi mode should be cleared
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	e014      	b.n	8000dec <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	795b      	ldrb	r3, [r3, #5]
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d104      	bne.n	8000dd4 <SPI_Init+0x48>
		//bidi mode should be set
		temp |= (1<<SPI_CR1_BIDIMODE);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	e00b      	b.n	8000dec <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	795b      	ldrb	r3, [r3, #5]
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d107      	bne.n	8000dec <SPI_Init+0x60>
		//BIDI mode should be cleared and Rx_only bit must be set
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000de2:	60fb      	str	r3, [r7, #12]
		temp |= (1<<SPI_CR1_RXONLY);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dea:	60fb      	str	r3, [r7, #12]
	}
	//configure clk speed
	temp |= pSPIHandle->SPIConfig.SPI_SclkSpeed <<SPI_CR1_BR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	799b      	ldrb	r3, [r3, #6]
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	60fb      	str	r3, [r7, #12]
	//configure DFF
	temp |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	79db      	ldrb	r3, [r3, #7]
 8000dfc:	02db      	lsls	r3, r3, #11
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]
	//configure CPOl
	temp |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	7a1b      	ldrb	r3, [r3, #8]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	60fb      	str	r3, [r7, #12]
	//config CPHA
	temp |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	7a5b      	ldrb	r3, [r3, #9]
 8000e14:	461a      	mov	r2, r3
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]

	temp |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	7a9b      	ldrb	r3, [r3, #10]
 8000e20:	025b      	lsls	r3, r3, #9
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]


	pSPIHandle->pSPIx->CR1 = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	68fa      	ldr	r2, [r7, #12]
 8000e2e:	601a      	str	r2, [r3, #0]

}
 8000e30:	bf00      	nop
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <SPI_GetFlagStatus>:

}
/*
 * gets the flag stat
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName){
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e000      	b.n	8000e54 <SPI_GetFlagStatus+0x1c>
	}
	else{
		return FLAG_RESET;
 8000e52:	2300      	movs	r3, #0
	}
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr

08000e5e <SPI_SendData>:
	* @param  *pSPIx : pointer to the SPI base address
	* @param  *pTxBuffer : pointer to the Tx buffer where data is held
	* @param  Len : length of data
	* @return None
	*/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b084      	sub	sp, #16
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	60f8      	str	r0, [r7, #12]
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
	while(Len>0){
 8000e6a:	e027      	b.n	8000ebc <SPI_SendData+0x5e>
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == RESET);//blocking and polling
 8000e6c:	bf00      	nop
 8000e6e:	2102      	movs	r1, #2
 8000e70:	68f8      	ldr	r0, [r7, #12]
 8000e72:	f7ff ffe1 	bl	8000e38 <SPI_GetFlagStatus>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0f8      	beq.n	8000e6e <SPI_SendData+0x10>
		if(pSPIx->CR1 & (1<<SPI_CR1_DFF)){
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d00e      	beq.n	8000ea6 <SPI_SendData+0x48>
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	60da      	str	r2, [r3, #12]
			Len--;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3b01      	subs	r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
			Len--;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	e00a      	b.n	8000ebc <SPI_SendData+0x5e>
		}
		else {
			pSPIx->DR = *pTxBuffer;
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	60da      	str	r2, [r3, #12]
			Len--;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
	while(Len>0){
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1d4      	bne.n	8000e6c <SPI_SendData+0xe>
		}
	}
}
 8000ec2:	bf00      	nop
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <SPI_ReceiveData>:
	* @param  *pSPIx : pointer to the SPI base address
	* @param  *pRxBuffer : pointer to the Rx buffer where data is held
	* @param  Len : length of data
	* @return None
	*/
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
	while(Len>0){
 8000ed8:	e027      	b.n	8000f2a <SPI_ReceiveData+0x5e>
		while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == (uint8_t)RESET);//blocking and polling
 8000eda:	bf00      	nop
 8000edc:	2101      	movs	r1, #1
 8000ede:	68f8      	ldr	r0, [r7, #12]
 8000ee0:	f7ff ffaa 	bl	8000e38 <SPI_GetFlagStatus>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0f8      	beq.n	8000edc <SPI_ReceiveData+0x10>
		if(pSPIx->CR1 & (1<<SPI_CR1_DFF)){
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00e      	beq.n	8000f14 <SPI_ReceiveData+0x48>
			*((uint16_t*)pRxBuffer) = pSPIx->DR;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	801a      	strh	r2, [r3, #0]
			Len--;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	607b      	str	r3, [r7, #4]
			Len--;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	607b      	str	r3, [r7, #4]
			(uint16_t*)pRxBuffer++;
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	e00a      	b.n	8000f2a <SPI_ReceiveData+0x5e>
		}
		else {
			*(pRxBuffer) = pSPIx->DR;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	701a      	strb	r2, [r3, #0]
			Len--;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	607b      	str	r3, [r7, #4]
			pRxBuffer++;
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	3301      	adds	r3, #1
 8000f28:	60bb      	str	r3, [r7, #8]
	while(Len>0){
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1d4      	bne.n	8000eda <SPI_ReceiveData+0xe>
		}
	}
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <SPI_PeripheralControl>:
 * @param  IRQPriority : prioity of the interrupt
 * @return None
 */
void SPI_IRQPriorityConfig(uint8_t IRQNum, uint32_t IRQPriority);

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	460b      	mov	r3, r1
 8000f44:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000f46:	78fb      	ldrb	r3, [r7, #3]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d106      	bne.n	8000f5a <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1<<SPI_CR1_SPE);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	601a      	str	r2, [r3, #0]
	}
	else{
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
	}
}
 8000f58:	e005      	b.n	8000f66 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	601a      	str	r2, [r3, #0]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <SPI_SSOEConfig>:
		}
		else{
			pSPIx->CR1 &= ~(1<<SPI_CR1_SSI);
		}
}
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000f7c:	78fb      	ldrb	r3, [r7, #3]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d106      	bne.n	8000f90 <SPI_SSOEConfig+0x20>
		pSPIx->CR2 |= (1<<2);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f043 0204 	orr.w	r2, r3, #4
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	605a      	str	r2, [r3, #4]
	}
	else{
		pSPIx->CR2 &= ~(1<<2);
	}
}
 8000f8e:	e005      	b.n	8000f9c <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1<<2);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f023 0204 	bic.w	r2, r3, #4
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	605a      	str	r2, [r3, #4]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
	...

08000fa8 <std>:
 8000fa8:	2300      	movs	r3, #0
 8000faa:	b510      	push	{r4, lr}
 8000fac:	4604      	mov	r4, r0
 8000fae:	e9c0 3300 	strd	r3, r3, [r0]
 8000fb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000fb6:	6083      	str	r3, [r0, #8]
 8000fb8:	8181      	strh	r1, [r0, #12]
 8000fba:	6643      	str	r3, [r0, #100]	@ 0x64
 8000fbc:	81c2      	strh	r2, [r0, #14]
 8000fbe:	6183      	str	r3, [r0, #24]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	2208      	movs	r2, #8
 8000fc4:	305c      	adds	r0, #92	@ 0x5c
 8000fc6:	f000 f9f9 	bl	80013bc <memset>
 8000fca:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <std+0x58>)
 8000fcc:	6263      	str	r3, [r4, #36]	@ 0x24
 8000fce:	4b0d      	ldr	r3, [pc, #52]	@ (8001004 <std+0x5c>)
 8000fd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001008 <std+0x60>)
 8000fd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800100c <std+0x64>)
 8000fd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8000fda:	4b0d      	ldr	r3, [pc, #52]	@ (8001010 <std+0x68>)
 8000fdc:	6224      	str	r4, [r4, #32]
 8000fde:	429c      	cmp	r4, r3
 8000fe0:	d006      	beq.n	8000ff0 <std+0x48>
 8000fe2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000fe6:	4294      	cmp	r4, r2
 8000fe8:	d002      	beq.n	8000ff0 <std+0x48>
 8000fea:	33d0      	adds	r3, #208	@ 0xd0
 8000fec:	429c      	cmp	r4, r3
 8000fee:	d105      	bne.n	8000ffc <std+0x54>
 8000ff0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ff8:	f000 ba52 	b.w	80014a0 <__retarget_lock_init_recursive>
 8000ffc:	bd10      	pop	{r4, pc}
 8000ffe:	bf00      	nop
 8001000:	0800120d 	.word	0x0800120d
 8001004:	0800122f 	.word	0x0800122f
 8001008:	08001267 	.word	0x08001267
 800100c:	0800128b 	.word	0x0800128b
 8001010:	20000084 	.word	0x20000084

08001014 <stdio_exit_handler>:
 8001014:	4a02      	ldr	r2, [pc, #8]	@ (8001020 <stdio_exit_handler+0xc>)
 8001016:	4903      	ldr	r1, [pc, #12]	@ (8001024 <stdio_exit_handler+0x10>)
 8001018:	4803      	ldr	r0, [pc, #12]	@ (8001028 <stdio_exit_handler+0x14>)
 800101a:	f000 b869 	b.w	80010f0 <_fwalk_sglue>
 800101e:	bf00      	nop
 8001020:	20000000 	.word	0x20000000
 8001024:	08001d31 	.word	0x08001d31
 8001028:	20000010 	.word	0x20000010

0800102c <cleanup_stdio>:
 800102c:	6841      	ldr	r1, [r0, #4]
 800102e:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <cleanup_stdio+0x34>)
 8001030:	4299      	cmp	r1, r3
 8001032:	b510      	push	{r4, lr}
 8001034:	4604      	mov	r4, r0
 8001036:	d001      	beq.n	800103c <cleanup_stdio+0x10>
 8001038:	f000 fe7a 	bl	8001d30 <_fflush_r>
 800103c:	68a1      	ldr	r1, [r4, #8]
 800103e:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <cleanup_stdio+0x38>)
 8001040:	4299      	cmp	r1, r3
 8001042:	d002      	beq.n	800104a <cleanup_stdio+0x1e>
 8001044:	4620      	mov	r0, r4
 8001046:	f000 fe73 	bl	8001d30 <_fflush_r>
 800104a:	68e1      	ldr	r1, [r4, #12]
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <cleanup_stdio+0x3c>)
 800104e:	4299      	cmp	r1, r3
 8001050:	d004      	beq.n	800105c <cleanup_stdio+0x30>
 8001052:	4620      	mov	r0, r4
 8001054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001058:	f000 be6a 	b.w	8001d30 <_fflush_r>
 800105c:	bd10      	pop	{r4, pc}
 800105e:	bf00      	nop
 8001060:	20000084 	.word	0x20000084
 8001064:	200000ec 	.word	0x200000ec
 8001068:	20000154 	.word	0x20000154

0800106c <global_stdio_init.part.0>:
 800106c:	b510      	push	{r4, lr}
 800106e:	4b0b      	ldr	r3, [pc, #44]	@ (800109c <global_stdio_init.part.0+0x30>)
 8001070:	4c0b      	ldr	r4, [pc, #44]	@ (80010a0 <global_stdio_init.part.0+0x34>)
 8001072:	4a0c      	ldr	r2, [pc, #48]	@ (80010a4 <global_stdio_init.part.0+0x38>)
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	4620      	mov	r0, r4
 8001078:	2200      	movs	r2, #0
 800107a:	2104      	movs	r1, #4
 800107c:	f7ff ff94 	bl	8000fa8 <std>
 8001080:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001084:	2201      	movs	r2, #1
 8001086:	2109      	movs	r1, #9
 8001088:	f7ff ff8e 	bl	8000fa8 <std>
 800108c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001090:	2202      	movs	r2, #2
 8001092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001096:	2112      	movs	r1, #18
 8001098:	f7ff bf86 	b.w	8000fa8 <std>
 800109c:	200001bc 	.word	0x200001bc
 80010a0:	20000084 	.word	0x20000084
 80010a4:	08001015 	.word	0x08001015

080010a8 <__sfp_lock_acquire>:
 80010a8:	4801      	ldr	r0, [pc, #4]	@ (80010b0 <__sfp_lock_acquire+0x8>)
 80010aa:	f000 b9fa 	b.w	80014a2 <__retarget_lock_acquire_recursive>
 80010ae:	bf00      	nop
 80010b0:	200001c5 	.word	0x200001c5

080010b4 <__sfp_lock_release>:
 80010b4:	4801      	ldr	r0, [pc, #4]	@ (80010bc <__sfp_lock_release+0x8>)
 80010b6:	f000 b9f5 	b.w	80014a4 <__retarget_lock_release_recursive>
 80010ba:	bf00      	nop
 80010bc:	200001c5 	.word	0x200001c5

080010c0 <__sinit>:
 80010c0:	b510      	push	{r4, lr}
 80010c2:	4604      	mov	r4, r0
 80010c4:	f7ff fff0 	bl	80010a8 <__sfp_lock_acquire>
 80010c8:	6a23      	ldr	r3, [r4, #32]
 80010ca:	b11b      	cbz	r3, 80010d4 <__sinit+0x14>
 80010cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010d0:	f7ff bff0 	b.w	80010b4 <__sfp_lock_release>
 80010d4:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <__sinit+0x28>)
 80010d6:	6223      	str	r3, [r4, #32]
 80010d8:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <__sinit+0x2c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1f5      	bne.n	80010cc <__sinit+0xc>
 80010e0:	f7ff ffc4 	bl	800106c <global_stdio_init.part.0>
 80010e4:	e7f2      	b.n	80010cc <__sinit+0xc>
 80010e6:	bf00      	nop
 80010e8:	0800102d 	.word	0x0800102d
 80010ec:	200001bc 	.word	0x200001bc

080010f0 <_fwalk_sglue>:
 80010f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010f4:	4607      	mov	r7, r0
 80010f6:	4688      	mov	r8, r1
 80010f8:	4614      	mov	r4, r2
 80010fa:	2600      	movs	r6, #0
 80010fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001100:	f1b9 0901 	subs.w	r9, r9, #1
 8001104:	d505      	bpl.n	8001112 <_fwalk_sglue+0x22>
 8001106:	6824      	ldr	r4, [r4, #0]
 8001108:	2c00      	cmp	r4, #0
 800110a:	d1f7      	bne.n	80010fc <_fwalk_sglue+0xc>
 800110c:	4630      	mov	r0, r6
 800110e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001112:	89ab      	ldrh	r3, [r5, #12]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d907      	bls.n	8001128 <_fwalk_sglue+0x38>
 8001118:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800111c:	3301      	adds	r3, #1
 800111e:	d003      	beq.n	8001128 <_fwalk_sglue+0x38>
 8001120:	4629      	mov	r1, r5
 8001122:	4638      	mov	r0, r7
 8001124:	47c0      	blx	r8
 8001126:	4306      	orrs	r6, r0
 8001128:	3568      	adds	r5, #104	@ 0x68
 800112a:	e7e9      	b.n	8001100 <_fwalk_sglue+0x10>

0800112c <iprintf>:
 800112c:	b40f      	push	{r0, r1, r2, r3}
 800112e:	b507      	push	{r0, r1, r2, lr}
 8001130:	4906      	ldr	r1, [pc, #24]	@ (800114c <iprintf+0x20>)
 8001132:	ab04      	add	r3, sp, #16
 8001134:	6808      	ldr	r0, [r1, #0]
 8001136:	f853 2b04 	ldr.w	r2, [r3], #4
 800113a:	6881      	ldr	r1, [r0, #8]
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	f000 fad3 	bl	80016e8 <_vfiprintf_r>
 8001142:	b003      	add	sp, #12
 8001144:	f85d eb04 	ldr.w	lr, [sp], #4
 8001148:	b004      	add	sp, #16
 800114a:	4770      	bx	lr
 800114c:	2000000c 	.word	0x2000000c

08001150 <_puts_r>:
 8001150:	6a03      	ldr	r3, [r0, #32]
 8001152:	b570      	push	{r4, r5, r6, lr}
 8001154:	6884      	ldr	r4, [r0, #8]
 8001156:	4605      	mov	r5, r0
 8001158:	460e      	mov	r6, r1
 800115a:	b90b      	cbnz	r3, 8001160 <_puts_r+0x10>
 800115c:	f7ff ffb0 	bl	80010c0 <__sinit>
 8001160:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001162:	07db      	lsls	r3, r3, #31
 8001164:	d405      	bmi.n	8001172 <_puts_r+0x22>
 8001166:	89a3      	ldrh	r3, [r4, #12]
 8001168:	0598      	lsls	r0, r3, #22
 800116a:	d402      	bmi.n	8001172 <_puts_r+0x22>
 800116c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800116e:	f000 f998 	bl	80014a2 <__retarget_lock_acquire_recursive>
 8001172:	89a3      	ldrh	r3, [r4, #12]
 8001174:	0719      	lsls	r1, r3, #28
 8001176:	d502      	bpl.n	800117e <_puts_r+0x2e>
 8001178:	6923      	ldr	r3, [r4, #16]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d135      	bne.n	80011ea <_puts_r+0x9a>
 800117e:	4621      	mov	r1, r4
 8001180:	4628      	mov	r0, r5
 8001182:	f000 f8c5 	bl	8001310 <__swsetup_r>
 8001186:	b380      	cbz	r0, 80011ea <_puts_r+0x9a>
 8001188:	f04f 35ff 	mov.w	r5, #4294967295
 800118c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800118e:	07da      	lsls	r2, r3, #31
 8001190:	d405      	bmi.n	800119e <_puts_r+0x4e>
 8001192:	89a3      	ldrh	r3, [r4, #12]
 8001194:	059b      	lsls	r3, r3, #22
 8001196:	d402      	bmi.n	800119e <_puts_r+0x4e>
 8001198:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800119a:	f000 f983 	bl	80014a4 <__retarget_lock_release_recursive>
 800119e:	4628      	mov	r0, r5
 80011a0:	bd70      	pop	{r4, r5, r6, pc}
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	da04      	bge.n	80011b0 <_puts_r+0x60>
 80011a6:	69a2      	ldr	r2, [r4, #24]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	dc17      	bgt.n	80011dc <_puts_r+0x8c>
 80011ac:	290a      	cmp	r1, #10
 80011ae:	d015      	beq.n	80011dc <_puts_r+0x8c>
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	1c5a      	adds	r2, r3, #1
 80011b4:	6022      	str	r2, [r4, #0]
 80011b6:	7019      	strb	r1, [r3, #0]
 80011b8:	68a3      	ldr	r3, [r4, #8]
 80011ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80011be:	3b01      	subs	r3, #1
 80011c0:	60a3      	str	r3, [r4, #8]
 80011c2:	2900      	cmp	r1, #0
 80011c4:	d1ed      	bne.n	80011a2 <_puts_r+0x52>
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	da11      	bge.n	80011ee <_puts_r+0x9e>
 80011ca:	4622      	mov	r2, r4
 80011cc:	210a      	movs	r1, #10
 80011ce:	4628      	mov	r0, r5
 80011d0:	f000 f85f 	bl	8001292 <__swbuf_r>
 80011d4:	3001      	adds	r0, #1
 80011d6:	d0d7      	beq.n	8001188 <_puts_r+0x38>
 80011d8:	250a      	movs	r5, #10
 80011da:	e7d7      	b.n	800118c <_puts_r+0x3c>
 80011dc:	4622      	mov	r2, r4
 80011de:	4628      	mov	r0, r5
 80011e0:	f000 f857 	bl	8001292 <__swbuf_r>
 80011e4:	3001      	adds	r0, #1
 80011e6:	d1e7      	bne.n	80011b8 <_puts_r+0x68>
 80011e8:	e7ce      	b.n	8001188 <_puts_r+0x38>
 80011ea:	3e01      	subs	r6, #1
 80011ec:	e7e4      	b.n	80011b8 <_puts_r+0x68>
 80011ee:	6823      	ldr	r3, [r4, #0]
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	6022      	str	r2, [r4, #0]
 80011f4:	220a      	movs	r2, #10
 80011f6:	701a      	strb	r2, [r3, #0]
 80011f8:	e7ee      	b.n	80011d8 <_puts_r+0x88>
	...

080011fc <puts>:
 80011fc:	4b02      	ldr	r3, [pc, #8]	@ (8001208 <puts+0xc>)
 80011fe:	4601      	mov	r1, r0
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	f7ff bfa5 	b.w	8001150 <_puts_r>
 8001206:	bf00      	nop
 8001208:	2000000c 	.word	0x2000000c

0800120c <__sread>:
 800120c:	b510      	push	{r4, lr}
 800120e:	460c      	mov	r4, r1
 8001210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001214:	f000 f8fc 	bl	8001410 <_read_r>
 8001218:	2800      	cmp	r0, #0
 800121a:	bfab      	itete	ge
 800121c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800121e:	89a3      	ldrhlt	r3, [r4, #12]
 8001220:	181b      	addge	r3, r3, r0
 8001222:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001226:	bfac      	ite	ge
 8001228:	6563      	strge	r3, [r4, #84]	@ 0x54
 800122a:	81a3      	strhlt	r3, [r4, #12]
 800122c:	bd10      	pop	{r4, pc}

0800122e <__swrite>:
 800122e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001232:	461f      	mov	r7, r3
 8001234:	898b      	ldrh	r3, [r1, #12]
 8001236:	05db      	lsls	r3, r3, #23
 8001238:	4605      	mov	r5, r0
 800123a:	460c      	mov	r4, r1
 800123c:	4616      	mov	r6, r2
 800123e:	d505      	bpl.n	800124c <__swrite+0x1e>
 8001240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001244:	2302      	movs	r3, #2
 8001246:	2200      	movs	r2, #0
 8001248:	f000 f8d0 	bl	80013ec <_lseek_r>
 800124c:	89a3      	ldrh	r3, [r4, #12]
 800124e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001252:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001256:	81a3      	strh	r3, [r4, #12]
 8001258:	4632      	mov	r2, r6
 800125a:	463b      	mov	r3, r7
 800125c:	4628      	mov	r0, r5
 800125e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001262:	f000 b8e7 	b.w	8001434 <_write_r>

08001266 <__sseek>:
 8001266:	b510      	push	{r4, lr}
 8001268:	460c      	mov	r4, r1
 800126a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800126e:	f000 f8bd 	bl	80013ec <_lseek_r>
 8001272:	1c43      	adds	r3, r0, #1
 8001274:	89a3      	ldrh	r3, [r4, #12]
 8001276:	bf15      	itete	ne
 8001278:	6560      	strne	r0, [r4, #84]	@ 0x54
 800127a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800127e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001282:	81a3      	strheq	r3, [r4, #12]
 8001284:	bf18      	it	ne
 8001286:	81a3      	strhne	r3, [r4, #12]
 8001288:	bd10      	pop	{r4, pc}

0800128a <__sclose>:
 800128a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800128e:	f000 b89d 	b.w	80013cc <_close_r>

08001292 <__swbuf_r>:
 8001292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001294:	460e      	mov	r6, r1
 8001296:	4614      	mov	r4, r2
 8001298:	4605      	mov	r5, r0
 800129a:	b118      	cbz	r0, 80012a4 <__swbuf_r+0x12>
 800129c:	6a03      	ldr	r3, [r0, #32]
 800129e:	b90b      	cbnz	r3, 80012a4 <__swbuf_r+0x12>
 80012a0:	f7ff ff0e 	bl	80010c0 <__sinit>
 80012a4:	69a3      	ldr	r3, [r4, #24]
 80012a6:	60a3      	str	r3, [r4, #8]
 80012a8:	89a3      	ldrh	r3, [r4, #12]
 80012aa:	071a      	lsls	r2, r3, #28
 80012ac:	d501      	bpl.n	80012b2 <__swbuf_r+0x20>
 80012ae:	6923      	ldr	r3, [r4, #16]
 80012b0:	b943      	cbnz	r3, 80012c4 <__swbuf_r+0x32>
 80012b2:	4621      	mov	r1, r4
 80012b4:	4628      	mov	r0, r5
 80012b6:	f000 f82b 	bl	8001310 <__swsetup_r>
 80012ba:	b118      	cbz	r0, 80012c4 <__swbuf_r+0x32>
 80012bc:	f04f 37ff 	mov.w	r7, #4294967295
 80012c0:	4638      	mov	r0, r7
 80012c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012c4:	6823      	ldr	r3, [r4, #0]
 80012c6:	6922      	ldr	r2, [r4, #16]
 80012c8:	1a98      	subs	r0, r3, r2
 80012ca:	6963      	ldr	r3, [r4, #20]
 80012cc:	b2f6      	uxtb	r6, r6
 80012ce:	4283      	cmp	r3, r0
 80012d0:	4637      	mov	r7, r6
 80012d2:	dc05      	bgt.n	80012e0 <__swbuf_r+0x4e>
 80012d4:	4621      	mov	r1, r4
 80012d6:	4628      	mov	r0, r5
 80012d8:	f000 fd2a 	bl	8001d30 <_fflush_r>
 80012dc:	2800      	cmp	r0, #0
 80012de:	d1ed      	bne.n	80012bc <__swbuf_r+0x2a>
 80012e0:	68a3      	ldr	r3, [r4, #8]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	60a3      	str	r3, [r4, #8]
 80012e6:	6823      	ldr	r3, [r4, #0]
 80012e8:	1c5a      	adds	r2, r3, #1
 80012ea:	6022      	str	r2, [r4, #0]
 80012ec:	701e      	strb	r6, [r3, #0]
 80012ee:	6962      	ldr	r2, [r4, #20]
 80012f0:	1c43      	adds	r3, r0, #1
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d004      	beq.n	8001300 <__swbuf_r+0x6e>
 80012f6:	89a3      	ldrh	r3, [r4, #12]
 80012f8:	07db      	lsls	r3, r3, #31
 80012fa:	d5e1      	bpl.n	80012c0 <__swbuf_r+0x2e>
 80012fc:	2e0a      	cmp	r6, #10
 80012fe:	d1df      	bne.n	80012c0 <__swbuf_r+0x2e>
 8001300:	4621      	mov	r1, r4
 8001302:	4628      	mov	r0, r5
 8001304:	f000 fd14 	bl	8001d30 <_fflush_r>
 8001308:	2800      	cmp	r0, #0
 800130a:	d0d9      	beq.n	80012c0 <__swbuf_r+0x2e>
 800130c:	e7d6      	b.n	80012bc <__swbuf_r+0x2a>
	...

08001310 <__swsetup_r>:
 8001310:	b538      	push	{r3, r4, r5, lr}
 8001312:	4b29      	ldr	r3, [pc, #164]	@ (80013b8 <__swsetup_r+0xa8>)
 8001314:	4605      	mov	r5, r0
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	460c      	mov	r4, r1
 800131a:	b118      	cbz	r0, 8001324 <__swsetup_r+0x14>
 800131c:	6a03      	ldr	r3, [r0, #32]
 800131e:	b90b      	cbnz	r3, 8001324 <__swsetup_r+0x14>
 8001320:	f7ff fece 	bl	80010c0 <__sinit>
 8001324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001328:	0719      	lsls	r1, r3, #28
 800132a:	d422      	bmi.n	8001372 <__swsetup_r+0x62>
 800132c:	06da      	lsls	r2, r3, #27
 800132e:	d407      	bmi.n	8001340 <__swsetup_r+0x30>
 8001330:	2209      	movs	r2, #9
 8001332:	602a      	str	r2, [r5, #0]
 8001334:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001338:	81a3      	strh	r3, [r4, #12]
 800133a:	f04f 30ff 	mov.w	r0, #4294967295
 800133e:	e033      	b.n	80013a8 <__swsetup_r+0x98>
 8001340:	0758      	lsls	r0, r3, #29
 8001342:	d512      	bpl.n	800136a <__swsetup_r+0x5a>
 8001344:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001346:	b141      	cbz	r1, 800135a <__swsetup_r+0x4a>
 8001348:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800134c:	4299      	cmp	r1, r3
 800134e:	d002      	beq.n	8001356 <__swsetup_r+0x46>
 8001350:	4628      	mov	r0, r5
 8001352:	f000 f8a9 	bl	80014a8 <_free_r>
 8001356:	2300      	movs	r3, #0
 8001358:	6363      	str	r3, [r4, #52]	@ 0x34
 800135a:	89a3      	ldrh	r3, [r4, #12]
 800135c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001360:	81a3      	strh	r3, [r4, #12]
 8001362:	2300      	movs	r3, #0
 8001364:	6063      	str	r3, [r4, #4]
 8001366:	6923      	ldr	r3, [r4, #16]
 8001368:	6023      	str	r3, [r4, #0]
 800136a:	89a3      	ldrh	r3, [r4, #12]
 800136c:	f043 0308 	orr.w	r3, r3, #8
 8001370:	81a3      	strh	r3, [r4, #12]
 8001372:	6923      	ldr	r3, [r4, #16]
 8001374:	b94b      	cbnz	r3, 800138a <__swsetup_r+0x7a>
 8001376:	89a3      	ldrh	r3, [r4, #12]
 8001378:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800137c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001380:	d003      	beq.n	800138a <__swsetup_r+0x7a>
 8001382:	4621      	mov	r1, r4
 8001384:	4628      	mov	r0, r5
 8001386:	f000 fd21 	bl	8001dcc <__smakebuf_r>
 800138a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800138e:	f013 0201 	ands.w	r2, r3, #1
 8001392:	d00a      	beq.n	80013aa <__swsetup_r+0x9a>
 8001394:	2200      	movs	r2, #0
 8001396:	60a2      	str	r2, [r4, #8]
 8001398:	6962      	ldr	r2, [r4, #20]
 800139a:	4252      	negs	r2, r2
 800139c:	61a2      	str	r2, [r4, #24]
 800139e:	6922      	ldr	r2, [r4, #16]
 80013a0:	b942      	cbnz	r2, 80013b4 <__swsetup_r+0xa4>
 80013a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80013a6:	d1c5      	bne.n	8001334 <__swsetup_r+0x24>
 80013a8:	bd38      	pop	{r3, r4, r5, pc}
 80013aa:	0799      	lsls	r1, r3, #30
 80013ac:	bf58      	it	pl
 80013ae:	6962      	ldrpl	r2, [r4, #20]
 80013b0:	60a2      	str	r2, [r4, #8]
 80013b2:	e7f4      	b.n	800139e <__swsetup_r+0x8e>
 80013b4:	2000      	movs	r0, #0
 80013b6:	e7f7      	b.n	80013a8 <__swsetup_r+0x98>
 80013b8:	2000000c 	.word	0x2000000c

080013bc <memset>:
 80013bc:	4402      	add	r2, r0
 80013be:	4603      	mov	r3, r0
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d100      	bne.n	80013c6 <memset+0xa>
 80013c4:	4770      	bx	lr
 80013c6:	f803 1b01 	strb.w	r1, [r3], #1
 80013ca:	e7f9      	b.n	80013c0 <memset+0x4>

080013cc <_close_r>:
 80013cc:	b538      	push	{r3, r4, r5, lr}
 80013ce:	4d06      	ldr	r5, [pc, #24]	@ (80013e8 <_close_r+0x1c>)
 80013d0:	2300      	movs	r3, #0
 80013d2:	4604      	mov	r4, r0
 80013d4:	4608      	mov	r0, r1
 80013d6:	602b      	str	r3, [r5, #0]
 80013d8:	f000 fe38 	bl	800204c <_close>
 80013dc:	1c43      	adds	r3, r0, #1
 80013de:	d102      	bne.n	80013e6 <_close_r+0x1a>
 80013e0:	682b      	ldr	r3, [r5, #0]
 80013e2:	b103      	cbz	r3, 80013e6 <_close_r+0x1a>
 80013e4:	6023      	str	r3, [r4, #0]
 80013e6:	bd38      	pop	{r3, r4, r5, pc}
 80013e8:	200001c0 	.word	0x200001c0

080013ec <_lseek_r>:
 80013ec:	b538      	push	{r3, r4, r5, lr}
 80013ee:	4d07      	ldr	r5, [pc, #28]	@ (800140c <_lseek_r+0x20>)
 80013f0:	4604      	mov	r4, r0
 80013f2:	4608      	mov	r0, r1
 80013f4:	4611      	mov	r1, r2
 80013f6:	2200      	movs	r2, #0
 80013f8:	602a      	str	r2, [r5, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	f000 fde7 	bl	8001fce <_lseek>
 8001400:	1c43      	adds	r3, r0, #1
 8001402:	d102      	bne.n	800140a <_lseek_r+0x1e>
 8001404:	682b      	ldr	r3, [r5, #0]
 8001406:	b103      	cbz	r3, 800140a <_lseek_r+0x1e>
 8001408:	6023      	str	r3, [r4, #0]
 800140a:	bd38      	pop	{r3, r4, r5, pc}
 800140c:	200001c0 	.word	0x200001c0

08001410 <_read_r>:
 8001410:	b538      	push	{r3, r4, r5, lr}
 8001412:	4d07      	ldr	r5, [pc, #28]	@ (8001430 <_read_r+0x20>)
 8001414:	4604      	mov	r4, r0
 8001416:	4608      	mov	r0, r1
 8001418:	4611      	mov	r1, r2
 800141a:	2200      	movs	r2, #0
 800141c:	602a      	str	r2, [r5, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	f000 fd7f 	bl	8001f22 <_read>
 8001424:	1c43      	adds	r3, r0, #1
 8001426:	d102      	bne.n	800142e <_read_r+0x1e>
 8001428:	682b      	ldr	r3, [r5, #0]
 800142a:	b103      	cbz	r3, 800142e <_read_r+0x1e>
 800142c:	6023      	str	r3, [r4, #0]
 800142e:	bd38      	pop	{r3, r4, r5, pc}
 8001430:	200001c0 	.word	0x200001c0

08001434 <_write_r>:
 8001434:	b538      	push	{r3, r4, r5, lr}
 8001436:	4d07      	ldr	r5, [pc, #28]	@ (8001454 <_write_r+0x20>)
 8001438:	4604      	mov	r4, r0
 800143a:	4608      	mov	r0, r1
 800143c:	4611      	mov	r1, r2
 800143e:	2200      	movs	r2, #0
 8001440:	602a      	str	r2, [r5, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	f000 fdd5 	bl	8001ff2 <_write>
 8001448:	1c43      	adds	r3, r0, #1
 800144a:	d102      	bne.n	8001452 <_write_r+0x1e>
 800144c:	682b      	ldr	r3, [r5, #0]
 800144e:	b103      	cbz	r3, 8001452 <_write_r+0x1e>
 8001450:	6023      	str	r3, [r4, #0]
 8001452:	bd38      	pop	{r3, r4, r5, pc}
 8001454:	200001c0 	.word	0x200001c0

08001458 <__libc_init_array>:
 8001458:	b570      	push	{r4, r5, r6, lr}
 800145a:	4d0d      	ldr	r5, [pc, #52]	@ (8001490 <__libc_init_array+0x38>)
 800145c:	4c0d      	ldr	r4, [pc, #52]	@ (8001494 <__libc_init_array+0x3c>)
 800145e:	1b64      	subs	r4, r4, r5
 8001460:	10a4      	asrs	r4, r4, #2
 8001462:	2600      	movs	r6, #0
 8001464:	42a6      	cmp	r6, r4
 8001466:	d109      	bne.n	800147c <__libc_init_array+0x24>
 8001468:	4d0b      	ldr	r5, [pc, #44]	@ (8001498 <__libc_init_array+0x40>)
 800146a:	4c0c      	ldr	r4, [pc, #48]	@ (800149c <__libc_init_array+0x44>)
 800146c:	f000 ffe2 	bl	8002434 <_init>
 8001470:	1b64      	subs	r4, r4, r5
 8001472:	10a4      	asrs	r4, r4, #2
 8001474:	2600      	movs	r6, #0
 8001476:	42a6      	cmp	r6, r4
 8001478:	d105      	bne.n	8001486 <__libc_init_array+0x2e>
 800147a:	bd70      	pop	{r4, r5, r6, pc}
 800147c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001480:	4798      	blx	r3
 8001482:	3601      	adds	r6, #1
 8001484:	e7ee      	b.n	8001464 <__libc_init_array+0xc>
 8001486:	f855 3b04 	ldr.w	r3, [r5], #4
 800148a:	4798      	blx	r3
 800148c:	3601      	adds	r6, #1
 800148e:	e7f2      	b.n	8001476 <__libc_init_array+0x1e>
 8001490:	08002564 	.word	0x08002564
 8001494:	08002564 	.word	0x08002564
 8001498:	08002564 	.word	0x08002564
 800149c:	08002568 	.word	0x08002568

080014a0 <__retarget_lock_init_recursive>:
 80014a0:	4770      	bx	lr

080014a2 <__retarget_lock_acquire_recursive>:
 80014a2:	4770      	bx	lr

080014a4 <__retarget_lock_release_recursive>:
 80014a4:	4770      	bx	lr
	...

080014a8 <_free_r>:
 80014a8:	b538      	push	{r3, r4, r5, lr}
 80014aa:	4605      	mov	r5, r0
 80014ac:	2900      	cmp	r1, #0
 80014ae:	d041      	beq.n	8001534 <_free_r+0x8c>
 80014b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014b4:	1f0c      	subs	r4, r1, #4
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	bfb8      	it	lt
 80014ba:	18e4      	addlt	r4, r4, r3
 80014bc:	f000 f8e0 	bl	8001680 <__malloc_lock>
 80014c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001538 <_free_r+0x90>)
 80014c2:	6813      	ldr	r3, [r2, #0]
 80014c4:	b933      	cbnz	r3, 80014d4 <_free_r+0x2c>
 80014c6:	6063      	str	r3, [r4, #4]
 80014c8:	6014      	str	r4, [r2, #0]
 80014ca:	4628      	mov	r0, r5
 80014cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80014d0:	f000 b8dc 	b.w	800168c <__malloc_unlock>
 80014d4:	42a3      	cmp	r3, r4
 80014d6:	d908      	bls.n	80014ea <_free_r+0x42>
 80014d8:	6820      	ldr	r0, [r4, #0]
 80014da:	1821      	adds	r1, r4, r0
 80014dc:	428b      	cmp	r3, r1
 80014de:	bf01      	itttt	eq
 80014e0:	6819      	ldreq	r1, [r3, #0]
 80014e2:	685b      	ldreq	r3, [r3, #4]
 80014e4:	1809      	addeq	r1, r1, r0
 80014e6:	6021      	streq	r1, [r4, #0]
 80014e8:	e7ed      	b.n	80014c6 <_free_r+0x1e>
 80014ea:	461a      	mov	r2, r3
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	b10b      	cbz	r3, 80014f4 <_free_r+0x4c>
 80014f0:	42a3      	cmp	r3, r4
 80014f2:	d9fa      	bls.n	80014ea <_free_r+0x42>
 80014f4:	6811      	ldr	r1, [r2, #0]
 80014f6:	1850      	adds	r0, r2, r1
 80014f8:	42a0      	cmp	r0, r4
 80014fa:	d10b      	bne.n	8001514 <_free_r+0x6c>
 80014fc:	6820      	ldr	r0, [r4, #0]
 80014fe:	4401      	add	r1, r0
 8001500:	1850      	adds	r0, r2, r1
 8001502:	4283      	cmp	r3, r0
 8001504:	6011      	str	r1, [r2, #0]
 8001506:	d1e0      	bne.n	80014ca <_free_r+0x22>
 8001508:	6818      	ldr	r0, [r3, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	6053      	str	r3, [r2, #4]
 800150e:	4408      	add	r0, r1
 8001510:	6010      	str	r0, [r2, #0]
 8001512:	e7da      	b.n	80014ca <_free_r+0x22>
 8001514:	d902      	bls.n	800151c <_free_r+0x74>
 8001516:	230c      	movs	r3, #12
 8001518:	602b      	str	r3, [r5, #0]
 800151a:	e7d6      	b.n	80014ca <_free_r+0x22>
 800151c:	6820      	ldr	r0, [r4, #0]
 800151e:	1821      	adds	r1, r4, r0
 8001520:	428b      	cmp	r3, r1
 8001522:	bf04      	itt	eq
 8001524:	6819      	ldreq	r1, [r3, #0]
 8001526:	685b      	ldreq	r3, [r3, #4]
 8001528:	6063      	str	r3, [r4, #4]
 800152a:	bf04      	itt	eq
 800152c:	1809      	addeq	r1, r1, r0
 800152e:	6021      	streq	r1, [r4, #0]
 8001530:	6054      	str	r4, [r2, #4]
 8001532:	e7ca      	b.n	80014ca <_free_r+0x22>
 8001534:	bd38      	pop	{r3, r4, r5, pc}
 8001536:	bf00      	nop
 8001538:	200001cc 	.word	0x200001cc

0800153c <sbrk_aligned>:
 800153c:	b570      	push	{r4, r5, r6, lr}
 800153e:	4e0f      	ldr	r6, [pc, #60]	@ (800157c <sbrk_aligned+0x40>)
 8001540:	460c      	mov	r4, r1
 8001542:	6831      	ldr	r1, [r6, #0]
 8001544:	4605      	mov	r5, r0
 8001546:	b911      	cbnz	r1, 800154e <sbrk_aligned+0x12>
 8001548:	f000 fc9e 	bl	8001e88 <_sbrk_r>
 800154c:	6030      	str	r0, [r6, #0]
 800154e:	4621      	mov	r1, r4
 8001550:	4628      	mov	r0, r5
 8001552:	f000 fc99 	bl	8001e88 <_sbrk_r>
 8001556:	1c43      	adds	r3, r0, #1
 8001558:	d103      	bne.n	8001562 <sbrk_aligned+0x26>
 800155a:	f04f 34ff 	mov.w	r4, #4294967295
 800155e:	4620      	mov	r0, r4
 8001560:	bd70      	pop	{r4, r5, r6, pc}
 8001562:	1cc4      	adds	r4, r0, #3
 8001564:	f024 0403 	bic.w	r4, r4, #3
 8001568:	42a0      	cmp	r0, r4
 800156a:	d0f8      	beq.n	800155e <sbrk_aligned+0x22>
 800156c:	1a21      	subs	r1, r4, r0
 800156e:	4628      	mov	r0, r5
 8001570:	f000 fc8a 	bl	8001e88 <_sbrk_r>
 8001574:	3001      	adds	r0, #1
 8001576:	d1f2      	bne.n	800155e <sbrk_aligned+0x22>
 8001578:	e7ef      	b.n	800155a <sbrk_aligned+0x1e>
 800157a:	bf00      	nop
 800157c:	200001c8 	.word	0x200001c8

08001580 <_malloc_r>:
 8001580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001584:	1ccd      	adds	r5, r1, #3
 8001586:	f025 0503 	bic.w	r5, r5, #3
 800158a:	3508      	adds	r5, #8
 800158c:	2d0c      	cmp	r5, #12
 800158e:	bf38      	it	cc
 8001590:	250c      	movcc	r5, #12
 8001592:	2d00      	cmp	r5, #0
 8001594:	4606      	mov	r6, r0
 8001596:	db01      	blt.n	800159c <_malloc_r+0x1c>
 8001598:	42a9      	cmp	r1, r5
 800159a:	d904      	bls.n	80015a6 <_malloc_r+0x26>
 800159c:	230c      	movs	r3, #12
 800159e:	6033      	str	r3, [r6, #0]
 80015a0:	2000      	movs	r0, #0
 80015a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800167c <_malloc_r+0xfc>
 80015aa:	f000 f869 	bl	8001680 <__malloc_lock>
 80015ae:	f8d8 3000 	ldr.w	r3, [r8]
 80015b2:	461c      	mov	r4, r3
 80015b4:	bb44      	cbnz	r4, 8001608 <_malloc_r+0x88>
 80015b6:	4629      	mov	r1, r5
 80015b8:	4630      	mov	r0, r6
 80015ba:	f7ff ffbf 	bl	800153c <sbrk_aligned>
 80015be:	1c43      	adds	r3, r0, #1
 80015c0:	4604      	mov	r4, r0
 80015c2:	d158      	bne.n	8001676 <_malloc_r+0xf6>
 80015c4:	f8d8 4000 	ldr.w	r4, [r8]
 80015c8:	4627      	mov	r7, r4
 80015ca:	2f00      	cmp	r7, #0
 80015cc:	d143      	bne.n	8001656 <_malloc_r+0xd6>
 80015ce:	2c00      	cmp	r4, #0
 80015d0:	d04b      	beq.n	800166a <_malloc_r+0xea>
 80015d2:	6823      	ldr	r3, [r4, #0]
 80015d4:	4639      	mov	r1, r7
 80015d6:	4630      	mov	r0, r6
 80015d8:	eb04 0903 	add.w	r9, r4, r3
 80015dc:	f000 fc54 	bl	8001e88 <_sbrk_r>
 80015e0:	4581      	cmp	r9, r0
 80015e2:	d142      	bne.n	800166a <_malloc_r+0xea>
 80015e4:	6821      	ldr	r1, [r4, #0]
 80015e6:	1a6d      	subs	r5, r5, r1
 80015e8:	4629      	mov	r1, r5
 80015ea:	4630      	mov	r0, r6
 80015ec:	f7ff ffa6 	bl	800153c <sbrk_aligned>
 80015f0:	3001      	adds	r0, #1
 80015f2:	d03a      	beq.n	800166a <_malloc_r+0xea>
 80015f4:	6823      	ldr	r3, [r4, #0]
 80015f6:	442b      	add	r3, r5
 80015f8:	6023      	str	r3, [r4, #0]
 80015fa:	f8d8 3000 	ldr.w	r3, [r8]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	bb62      	cbnz	r2, 800165c <_malloc_r+0xdc>
 8001602:	f8c8 7000 	str.w	r7, [r8]
 8001606:	e00f      	b.n	8001628 <_malloc_r+0xa8>
 8001608:	6822      	ldr	r2, [r4, #0]
 800160a:	1b52      	subs	r2, r2, r5
 800160c:	d420      	bmi.n	8001650 <_malloc_r+0xd0>
 800160e:	2a0b      	cmp	r2, #11
 8001610:	d917      	bls.n	8001642 <_malloc_r+0xc2>
 8001612:	1961      	adds	r1, r4, r5
 8001614:	42a3      	cmp	r3, r4
 8001616:	6025      	str	r5, [r4, #0]
 8001618:	bf18      	it	ne
 800161a:	6059      	strne	r1, [r3, #4]
 800161c:	6863      	ldr	r3, [r4, #4]
 800161e:	bf08      	it	eq
 8001620:	f8c8 1000 	streq.w	r1, [r8]
 8001624:	5162      	str	r2, [r4, r5]
 8001626:	604b      	str	r3, [r1, #4]
 8001628:	4630      	mov	r0, r6
 800162a:	f000 f82f 	bl	800168c <__malloc_unlock>
 800162e:	f104 000b 	add.w	r0, r4, #11
 8001632:	1d23      	adds	r3, r4, #4
 8001634:	f020 0007 	bic.w	r0, r0, #7
 8001638:	1ac2      	subs	r2, r0, r3
 800163a:	bf1c      	itt	ne
 800163c:	1a1b      	subne	r3, r3, r0
 800163e:	50a3      	strne	r3, [r4, r2]
 8001640:	e7af      	b.n	80015a2 <_malloc_r+0x22>
 8001642:	6862      	ldr	r2, [r4, #4]
 8001644:	42a3      	cmp	r3, r4
 8001646:	bf0c      	ite	eq
 8001648:	f8c8 2000 	streq.w	r2, [r8]
 800164c:	605a      	strne	r2, [r3, #4]
 800164e:	e7eb      	b.n	8001628 <_malloc_r+0xa8>
 8001650:	4623      	mov	r3, r4
 8001652:	6864      	ldr	r4, [r4, #4]
 8001654:	e7ae      	b.n	80015b4 <_malloc_r+0x34>
 8001656:	463c      	mov	r4, r7
 8001658:	687f      	ldr	r7, [r7, #4]
 800165a:	e7b6      	b.n	80015ca <_malloc_r+0x4a>
 800165c:	461a      	mov	r2, r3
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	42a3      	cmp	r3, r4
 8001662:	d1fb      	bne.n	800165c <_malloc_r+0xdc>
 8001664:	2300      	movs	r3, #0
 8001666:	6053      	str	r3, [r2, #4]
 8001668:	e7de      	b.n	8001628 <_malloc_r+0xa8>
 800166a:	230c      	movs	r3, #12
 800166c:	6033      	str	r3, [r6, #0]
 800166e:	4630      	mov	r0, r6
 8001670:	f000 f80c 	bl	800168c <__malloc_unlock>
 8001674:	e794      	b.n	80015a0 <_malloc_r+0x20>
 8001676:	6005      	str	r5, [r0, #0]
 8001678:	e7d6      	b.n	8001628 <_malloc_r+0xa8>
 800167a:	bf00      	nop
 800167c:	200001cc 	.word	0x200001cc

08001680 <__malloc_lock>:
 8001680:	4801      	ldr	r0, [pc, #4]	@ (8001688 <__malloc_lock+0x8>)
 8001682:	f7ff bf0e 	b.w	80014a2 <__retarget_lock_acquire_recursive>
 8001686:	bf00      	nop
 8001688:	200001c4 	.word	0x200001c4

0800168c <__malloc_unlock>:
 800168c:	4801      	ldr	r0, [pc, #4]	@ (8001694 <__malloc_unlock+0x8>)
 800168e:	f7ff bf09 	b.w	80014a4 <__retarget_lock_release_recursive>
 8001692:	bf00      	nop
 8001694:	200001c4 	.word	0x200001c4

08001698 <__sfputc_r>:
 8001698:	6893      	ldr	r3, [r2, #8]
 800169a:	3b01      	subs	r3, #1
 800169c:	2b00      	cmp	r3, #0
 800169e:	b410      	push	{r4}
 80016a0:	6093      	str	r3, [r2, #8]
 80016a2:	da07      	bge.n	80016b4 <__sfputc_r+0x1c>
 80016a4:	6994      	ldr	r4, [r2, #24]
 80016a6:	42a3      	cmp	r3, r4
 80016a8:	db01      	blt.n	80016ae <__sfputc_r+0x16>
 80016aa:	290a      	cmp	r1, #10
 80016ac:	d102      	bne.n	80016b4 <__sfputc_r+0x1c>
 80016ae:	bc10      	pop	{r4}
 80016b0:	f7ff bdef 	b.w	8001292 <__swbuf_r>
 80016b4:	6813      	ldr	r3, [r2, #0]
 80016b6:	1c58      	adds	r0, r3, #1
 80016b8:	6010      	str	r0, [r2, #0]
 80016ba:	7019      	strb	r1, [r3, #0]
 80016bc:	4608      	mov	r0, r1
 80016be:	bc10      	pop	{r4}
 80016c0:	4770      	bx	lr

080016c2 <__sfputs_r>:
 80016c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016c4:	4606      	mov	r6, r0
 80016c6:	460f      	mov	r7, r1
 80016c8:	4614      	mov	r4, r2
 80016ca:	18d5      	adds	r5, r2, r3
 80016cc:	42ac      	cmp	r4, r5
 80016ce:	d101      	bne.n	80016d4 <__sfputs_r+0x12>
 80016d0:	2000      	movs	r0, #0
 80016d2:	e007      	b.n	80016e4 <__sfputs_r+0x22>
 80016d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016d8:	463a      	mov	r2, r7
 80016da:	4630      	mov	r0, r6
 80016dc:	f7ff ffdc 	bl	8001698 <__sfputc_r>
 80016e0:	1c43      	adds	r3, r0, #1
 80016e2:	d1f3      	bne.n	80016cc <__sfputs_r+0xa>
 80016e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080016e8 <_vfiprintf_r>:
 80016e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016ec:	460d      	mov	r5, r1
 80016ee:	b09d      	sub	sp, #116	@ 0x74
 80016f0:	4614      	mov	r4, r2
 80016f2:	4698      	mov	r8, r3
 80016f4:	4606      	mov	r6, r0
 80016f6:	b118      	cbz	r0, 8001700 <_vfiprintf_r+0x18>
 80016f8:	6a03      	ldr	r3, [r0, #32]
 80016fa:	b90b      	cbnz	r3, 8001700 <_vfiprintf_r+0x18>
 80016fc:	f7ff fce0 	bl	80010c0 <__sinit>
 8001700:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001702:	07d9      	lsls	r1, r3, #31
 8001704:	d405      	bmi.n	8001712 <_vfiprintf_r+0x2a>
 8001706:	89ab      	ldrh	r3, [r5, #12]
 8001708:	059a      	lsls	r2, r3, #22
 800170a:	d402      	bmi.n	8001712 <_vfiprintf_r+0x2a>
 800170c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800170e:	f7ff fec8 	bl	80014a2 <__retarget_lock_acquire_recursive>
 8001712:	89ab      	ldrh	r3, [r5, #12]
 8001714:	071b      	lsls	r3, r3, #28
 8001716:	d501      	bpl.n	800171c <_vfiprintf_r+0x34>
 8001718:	692b      	ldr	r3, [r5, #16]
 800171a:	b99b      	cbnz	r3, 8001744 <_vfiprintf_r+0x5c>
 800171c:	4629      	mov	r1, r5
 800171e:	4630      	mov	r0, r6
 8001720:	f7ff fdf6 	bl	8001310 <__swsetup_r>
 8001724:	b170      	cbz	r0, 8001744 <_vfiprintf_r+0x5c>
 8001726:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001728:	07dc      	lsls	r4, r3, #31
 800172a:	d504      	bpl.n	8001736 <_vfiprintf_r+0x4e>
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	b01d      	add	sp, #116	@ 0x74
 8001732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001736:	89ab      	ldrh	r3, [r5, #12]
 8001738:	0598      	lsls	r0, r3, #22
 800173a:	d4f7      	bmi.n	800172c <_vfiprintf_r+0x44>
 800173c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800173e:	f7ff feb1 	bl	80014a4 <__retarget_lock_release_recursive>
 8001742:	e7f3      	b.n	800172c <_vfiprintf_r+0x44>
 8001744:	2300      	movs	r3, #0
 8001746:	9309      	str	r3, [sp, #36]	@ 0x24
 8001748:	2320      	movs	r3, #32
 800174a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800174e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001752:	2330      	movs	r3, #48	@ 0x30
 8001754:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001904 <_vfiprintf_r+0x21c>
 8001758:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800175c:	f04f 0901 	mov.w	r9, #1
 8001760:	4623      	mov	r3, r4
 8001762:	469a      	mov	sl, r3
 8001764:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001768:	b10a      	cbz	r2, 800176e <_vfiprintf_r+0x86>
 800176a:	2a25      	cmp	r2, #37	@ 0x25
 800176c:	d1f9      	bne.n	8001762 <_vfiprintf_r+0x7a>
 800176e:	ebba 0b04 	subs.w	fp, sl, r4
 8001772:	d00b      	beq.n	800178c <_vfiprintf_r+0xa4>
 8001774:	465b      	mov	r3, fp
 8001776:	4622      	mov	r2, r4
 8001778:	4629      	mov	r1, r5
 800177a:	4630      	mov	r0, r6
 800177c:	f7ff ffa1 	bl	80016c2 <__sfputs_r>
 8001780:	3001      	adds	r0, #1
 8001782:	f000 80a7 	beq.w	80018d4 <_vfiprintf_r+0x1ec>
 8001786:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001788:	445a      	add	r2, fp
 800178a:	9209      	str	r2, [sp, #36]	@ 0x24
 800178c:	f89a 3000 	ldrb.w	r3, [sl]
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 809f 	beq.w	80018d4 <_vfiprintf_r+0x1ec>
 8001796:	2300      	movs	r3, #0
 8001798:	f04f 32ff 	mov.w	r2, #4294967295
 800179c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80017a0:	f10a 0a01 	add.w	sl, sl, #1
 80017a4:	9304      	str	r3, [sp, #16]
 80017a6:	9307      	str	r3, [sp, #28]
 80017a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80017ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80017ae:	4654      	mov	r4, sl
 80017b0:	2205      	movs	r2, #5
 80017b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017b6:	4853      	ldr	r0, [pc, #332]	@ (8001904 <_vfiprintf_r+0x21c>)
 80017b8:	f7fe fd12 	bl	80001e0 <memchr>
 80017bc:	9a04      	ldr	r2, [sp, #16]
 80017be:	b9d8      	cbnz	r0, 80017f8 <_vfiprintf_r+0x110>
 80017c0:	06d1      	lsls	r1, r2, #27
 80017c2:	bf44      	itt	mi
 80017c4:	2320      	movmi	r3, #32
 80017c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80017ca:	0713      	lsls	r3, r2, #28
 80017cc:	bf44      	itt	mi
 80017ce:	232b      	movmi	r3, #43	@ 0x2b
 80017d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80017d4:	f89a 3000 	ldrb.w	r3, [sl]
 80017d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80017da:	d015      	beq.n	8001808 <_vfiprintf_r+0x120>
 80017dc:	9a07      	ldr	r2, [sp, #28]
 80017de:	4654      	mov	r4, sl
 80017e0:	2000      	movs	r0, #0
 80017e2:	f04f 0c0a 	mov.w	ip, #10
 80017e6:	4621      	mov	r1, r4
 80017e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80017ec:	3b30      	subs	r3, #48	@ 0x30
 80017ee:	2b09      	cmp	r3, #9
 80017f0:	d94b      	bls.n	800188a <_vfiprintf_r+0x1a2>
 80017f2:	b1b0      	cbz	r0, 8001822 <_vfiprintf_r+0x13a>
 80017f4:	9207      	str	r2, [sp, #28]
 80017f6:	e014      	b.n	8001822 <_vfiprintf_r+0x13a>
 80017f8:	eba0 0308 	sub.w	r3, r0, r8
 80017fc:	fa09 f303 	lsl.w	r3, r9, r3
 8001800:	4313      	orrs	r3, r2
 8001802:	9304      	str	r3, [sp, #16]
 8001804:	46a2      	mov	sl, r4
 8001806:	e7d2      	b.n	80017ae <_vfiprintf_r+0xc6>
 8001808:	9b03      	ldr	r3, [sp, #12]
 800180a:	1d19      	adds	r1, r3, #4
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	9103      	str	r1, [sp, #12]
 8001810:	2b00      	cmp	r3, #0
 8001812:	bfbb      	ittet	lt
 8001814:	425b      	neglt	r3, r3
 8001816:	f042 0202 	orrlt.w	r2, r2, #2
 800181a:	9307      	strge	r3, [sp, #28]
 800181c:	9307      	strlt	r3, [sp, #28]
 800181e:	bfb8      	it	lt
 8001820:	9204      	strlt	r2, [sp, #16]
 8001822:	7823      	ldrb	r3, [r4, #0]
 8001824:	2b2e      	cmp	r3, #46	@ 0x2e
 8001826:	d10a      	bne.n	800183e <_vfiprintf_r+0x156>
 8001828:	7863      	ldrb	r3, [r4, #1]
 800182a:	2b2a      	cmp	r3, #42	@ 0x2a
 800182c:	d132      	bne.n	8001894 <_vfiprintf_r+0x1ac>
 800182e:	9b03      	ldr	r3, [sp, #12]
 8001830:	1d1a      	adds	r2, r3, #4
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	9203      	str	r2, [sp, #12]
 8001836:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800183a:	3402      	adds	r4, #2
 800183c:	9305      	str	r3, [sp, #20]
 800183e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001908 <_vfiprintf_r+0x220>
 8001842:	7821      	ldrb	r1, [r4, #0]
 8001844:	2203      	movs	r2, #3
 8001846:	4650      	mov	r0, sl
 8001848:	f7fe fcca 	bl	80001e0 <memchr>
 800184c:	b138      	cbz	r0, 800185e <_vfiprintf_r+0x176>
 800184e:	9b04      	ldr	r3, [sp, #16]
 8001850:	eba0 000a 	sub.w	r0, r0, sl
 8001854:	2240      	movs	r2, #64	@ 0x40
 8001856:	4082      	lsls	r2, r0
 8001858:	4313      	orrs	r3, r2
 800185a:	3401      	adds	r4, #1
 800185c:	9304      	str	r3, [sp, #16]
 800185e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001862:	482a      	ldr	r0, [pc, #168]	@ (800190c <_vfiprintf_r+0x224>)
 8001864:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001868:	2206      	movs	r2, #6
 800186a:	f7fe fcb9 	bl	80001e0 <memchr>
 800186e:	2800      	cmp	r0, #0
 8001870:	d03f      	beq.n	80018f2 <_vfiprintf_r+0x20a>
 8001872:	4b27      	ldr	r3, [pc, #156]	@ (8001910 <_vfiprintf_r+0x228>)
 8001874:	bb1b      	cbnz	r3, 80018be <_vfiprintf_r+0x1d6>
 8001876:	9b03      	ldr	r3, [sp, #12]
 8001878:	3307      	adds	r3, #7
 800187a:	f023 0307 	bic.w	r3, r3, #7
 800187e:	3308      	adds	r3, #8
 8001880:	9303      	str	r3, [sp, #12]
 8001882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001884:	443b      	add	r3, r7
 8001886:	9309      	str	r3, [sp, #36]	@ 0x24
 8001888:	e76a      	b.n	8001760 <_vfiprintf_r+0x78>
 800188a:	fb0c 3202 	mla	r2, ip, r2, r3
 800188e:	460c      	mov	r4, r1
 8001890:	2001      	movs	r0, #1
 8001892:	e7a8      	b.n	80017e6 <_vfiprintf_r+0xfe>
 8001894:	2300      	movs	r3, #0
 8001896:	3401      	adds	r4, #1
 8001898:	9305      	str	r3, [sp, #20]
 800189a:	4619      	mov	r1, r3
 800189c:	f04f 0c0a 	mov.w	ip, #10
 80018a0:	4620      	mov	r0, r4
 80018a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018a6:	3a30      	subs	r2, #48	@ 0x30
 80018a8:	2a09      	cmp	r2, #9
 80018aa:	d903      	bls.n	80018b4 <_vfiprintf_r+0x1cc>
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0c6      	beq.n	800183e <_vfiprintf_r+0x156>
 80018b0:	9105      	str	r1, [sp, #20]
 80018b2:	e7c4      	b.n	800183e <_vfiprintf_r+0x156>
 80018b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80018b8:	4604      	mov	r4, r0
 80018ba:	2301      	movs	r3, #1
 80018bc:	e7f0      	b.n	80018a0 <_vfiprintf_r+0x1b8>
 80018be:	ab03      	add	r3, sp, #12
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	462a      	mov	r2, r5
 80018c4:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <_vfiprintf_r+0x22c>)
 80018c6:	a904      	add	r1, sp, #16
 80018c8:	4630      	mov	r0, r6
 80018ca:	f3af 8000 	nop.w
 80018ce:	4607      	mov	r7, r0
 80018d0:	1c78      	adds	r0, r7, #1
 80018d2:	d1d6      	bne.n	8001882 <_vfiprintf_r+0x19a>
 80018d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80018d6:	07d9      	lsls	r1, r3, #31
 80018d8:	d405      	bmi.n	80018e6 <_vfiprintf_r+0x1fe>
 80018da:	89ab      	ldrh	r3, [r5, #12]
 80018dc:	059a      	lsls	r2, r3, #22
 80018de:	d402      	bmi.n	80018e6 <_vfiprintf_r+0x1fe>
 80018e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80018e2:	f7ff fddf 	bl	80014a4 <__retarget_lock_release_recursive>
 80018e6:	89ab      	ldrh	r3, [r5, #12]
 80018e8:	065b      	lsls	r3, r3, #25
 80018ea:	f53f af1f 	bmi.w	800172c <_vfiprintf_r+0x44>
 80018ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80018f0:	e71e      	b.n	8001730 <_vfiprintf_r+0x48>
 80018f2:	ab03      	add	r3, sp, #12
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	462a      	mov	r2, r5
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <_vfiprintf_r+0x22c>)
 80018fa:	a904      	add	r1, sp, #16
 80018fc:	4630      	mov	r0, r6
 80018fe:	f000 f879 	bl	80019f4 <_printf_i>
 8001902:	e7e4      	b.n	80018ce <_vfiprintf_r+0x1e6>
 8001904:	0800250e 	.word	0x0800250e
 8001908:	08002514 	.word	0x08002514
 800190c:	08002518 	.word	0x08002518
 8001910:	00000000 	.word	0x00000000
 8001914:	080016c3 	.word	0x080016c3

08001918 <_printf_common>:
 8001918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800191c:	4616      	mov	r6, r2
 800191e:	4698      	mov	r8, r3
 8001920:	688a      	ldr	r2, [r1, #8]
 8001922:	690b      	ldr	r3, [r1, #16]
 8001924:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001928:	4293      	cmp	r3, r2
 800192a:	bfb8      	it	lt
 800192c:	4613      	movlt	r3, r2
 800192e:	6033      	str	r3, [r6, #0]
 8001930:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001934:	4607      	mov	r7, r0
 8001936:	460c      	mov	r4, r1
 8001938:	b10a      	cbz	r2, 800193e <_printf_common+0x26>
 800193a:	3301      	adds	r3, #1
 800193c:	6033      	str	r3, [r6, #0]
 800193e:	6823      	ldr	r3, [r4, #0]
 8001940:	0699      	lsls	r1, r3, #26
 8001942:	bf42      	ittt	mi
 8001944:	6833      	ldrmi	r3, [r6, #0]
 8001946:	3302      	addmi	r3, #2
 8001948:	6033      	strmi	r3, [r6, #0]
 800194a:	6825      	ldr	r5, [r4, #0]
 800194c:	f015 0506 	ands.w	r5, r5, #6
 8001950:	d106      	bne.n	8001960 <_printf_common+0x48>
 8001952:	f104 0a19 	add.w	sl, r4, #25
 8001956:	68e3      	ldr	r3, [r4, #12]
 8001958:	6832      	ldr	r2, [r6, #0]
 800195a:	1a9b      	subs	r3, r3, r2
 800195c:	42ab      	cmp	r3, r5
 800195e:	dc26      	bgt.n	80019ae <_printf_common+0x96>
 8001960:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001964:	6822      	ldr	r2, [r4, #0]
 8001966:	3b00      	subs	r3, #0
 8001968:	bf18      	it	ne
 800196a:	2301      	movne	r3, #1
 800196c:	0692      	lsls	r2, r2, #26
 800196e:	d42b      	bmi.n	80019c8 <_printf_common+0xb0>
 8001970:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001974:	4641      	mov	r1, r8
 8001976:	4638      	mov	r0, r7
 8001978:	47c8      	blx	r9
 800197a:	3001      	adds	r0, #1
 800197c:	d01e      	beq.n	80019bc <_printf_common+0xa4>
 800197e:	6823      	ldr	r3, [r4, #0]
 8001980:	6922      	ldr	r2, [r4, #16]
 8001982:	f003 0306 	and.w	r3, r3, #6
 8001986:	2b04      	cmp	r3, #4
 8001988:	bf02      	ittt	eq
 800198a:	68e5      	ldreq	r5, [r4, #12]
 800198c:	6833      	ldreq	r3, [r6, #0]
 800198e:	1aed      	subeq	r5, r5, r3
 8001990:	68a3      	ldr	r3, [r4, #8]
 8001992:	bf0c      	ite	eq
 8001994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001998:	2500      	movne	r5, #0
 800199a:	4293      	cmp	r3, r2
 800199c:	bfc4      	itt	gt
 800199e:	1a9b      	subgt	r3, r3, r2
 80019a0:	18ed      	addgt	r5, r5, r3
 80019a2:	2600      	movs	r6, #0
 80019a4:	341a      	adds	r4, #26
 80019a6:	42b5      	cmp	r5, r6
 80019a8:	d11a      	bne.n	80019e0 <_printf_common+0xc8>
 80019aa:	2000      	movs	r0, #0
 80019ac:	e008      	b.n	80019c0 <_printf_common+0xa8>
 80019ae:	2301      	movs	r3, #1
 80019b0:	4652      	mov	r2, sl
 80019b2:	4641      	mov	r1, r8
 80019b4:	4638      	mov	r0, r7
 80019b6:	47c8      	blx	r9
 80019b8:	3001      	adds	r0, #1
 80019ba:	d103      	bne.n	80019c4 <_printf_common+0xac>
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019c4:	3501      	adds	r5, #1
 80019c6:	e7c6      	b.n	8001956 <_printf_common+0x3e>
 80019c8:	18e1      	adds	r1, r4, r3
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	2030      	movs	r0, #48	@ 0x30
 80019ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80019d2:	4422      	add	r2, r4
 80019d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80019d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80019dc:	3302      	adds	r3, #2
 80019de:	e7c7      	b.n	8001970 <_printf_common+0x58>
 80019e0:	2301      	movs	r3, #1
 80019e2:	4622      	mov	r2, r4
 80019e4:	4641      	mov	r1, r8
 80019e6:	4638      	mov	r0, r7
 80019e8:	47c8      	blx	r9
 80019ea:	3001      	adds	r0, #1
 80019ec:	d0e6      	beq.n	80019bc <_printf_common+0xa4>
 80019ee:	3601      	adds	r6, #1
 80019f0:	e7d9      	b.n	80019a6 <_printf_common+0x8e>
	...

080019f4 <_printf_i>:
 80019f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019f8:	7e0f      	ldrb	r7, [r1, #24]
 80019fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80019fc:	2f78      	cmp	r7, #120	@ 0x78
 80019fe:	4691      	mov	r9, r2
 8001a00:	4680      	mov	r8, r0
 8001a02:	460c      	mov	r4, r1
 8001a04:	469a      	mov	sl, r3
 8001a06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001a0a:	d807      	bhi.n	8001a1c <_printf_i+0x28>
 8001a0c:	2f62      	cmp	r7, #98	@ 0x62
 8001a0e:	d80a      	bhi.n	8001a26 <_printf_i+0x32>
 8001a10:	2f00      	cmp	r7, #0
 8001a12:	f000 80d1 	beq.w	8001bb8 <_printf_i+0x1c4>
 8001a16:	2f58      	cmp	r7, #88	@ 0x58
 8001a18:	f000 80b8 	beq.w	8001b8c <_printf_i+0x198>
 8001a1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001a20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001a24:	e03a      	b.n	8001a9c <_printf_i+0xa8>
 8001a26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001a2a:	2b15      	cmp	r3, #21
 8001a2c:	d8f6      	bhi.n	8001a1c <_printf_i+0x28>
 8001a2e:	a101      	add	r1, pc, #4	@ (adr r1, 8001a34 <_printf_i+0x40>)
 8001a30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a34:	08001a8d 	.word	0x08001a8d
 8001a38:	08001aa1 	.word	0x08001aa1
 8001a3c:	08001a1d 	.word	0x08001a1d
 8001a40:	08001a1d 	.word	0x08001a1d
 8001a44:	08001a1d 	.word	0x08001a1d
 8001a48:	08001a1d 	.word	0x08001a1d
 8001a4c:	08001aa1 	.word	0x08001aa1
 8001a50:	08001a1d 	.word	0x08001a1d
 8001a54:	08001a1d 	.word	0x08001a1d
 8001a58:	08001a1d 	.word	0x08001a1d
 8001a5c:	08001a1d 	.word	0x08001a1d
 8001a60:	08001b9f 	.word	0x08001b9f
 8001a64:	08001acb 	.word	0x08001acb
 8001a68:	08001b59 	.word	0x08001b59
 8001a6c:	08001a1d 	.word	0x08001a1d
 8001a70:	08001a1d 	.word	0x08001a1d
 8001a74:	08001bc1 	.word	0x08001bc1
 8001a78:	08001a1d 	.word	0x08001a1d
 8001a7c:	08001acb 	.word	0x08001acb
 8001a80:	08001a1d 	.word	0x08001a1d
 8001a84:	08001a1d 	.word	0x08001a1d
 8001a88:	08001b61 	.word	0x08001b61
 8001a8c:	6833      	ldr	r3, [r6, #0]
 8001a8e:	1d1a      	adds	r2, r3, #4
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6032      	str	r2, [r6, #0]
 8001a94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001a98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e09c      	b.n	8001bda <_printf_i+0x1e6>
 8001aa0:	6833      	ldr	r3, [r6, #0]
 8001aa2:	6820      	ldr	r0, [r4, #0]
 8001aa4:	1d19      	adds	r1, r3, #4
 8001aa6:	6031      	str	r1, [r6, #0]
 8001aa8:	0606      	lsls	r6, r0, #24
 8001aaa:	d501      	bpl.n	8001ab0 <_printf_i+0xbc>
 8001aac:	681d      	ldr	r5, [r3, #0]
 8001aae:	e003      	b.n	8001ab8 <_printf_i+0xc4>
 8001ab0:	0645      	lsls	r5, r0, #25
 8001ab2:	d5fb      	bpl.n	8001aac <_printf_i+0xb8>
 8001ab4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001ab8:	2d00      	cmp	r5, #0
 8001aba:	da03      	bge.n	8001ac4 <_printf_i+0xd0>
 8001abc:	232d      	movs	r3, #45	@ 0x2d
 8001abe:	426d      	negs	r5, r5
 8001ac0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001ac4:	4858      	ldr	r0, [pc, #352]	@ (8001c28 <_printf_i+0x234>)
 8001ac6:	230a      	movs	r3, #10
 8001ac8:	e011      	b.n	8001aee <_printf_i+0xfa>
 8001aca:	6821      	ldr	r1, [r4, #0]
 8001acc:	6833      	ldr	r3, [r6, #0]
 8001ace:	0608      	lsls	r0, r1, #24
 8001ad0:	f853 5b04 	ldr.w	r5, [r3], #4
 8001ad4:	d402      	bmi.n	8001adc <_printf_i+0xe8>
 8001ad6:	0649      	lsls	r1, r1, #25
 8001ad8:	bf48      	it	mi
 8001ada:	b2ad      	uxthmi	r5, r5
 8001adc:	2f6f      	cmp	r7, #111	@ 0x6f
 8001ade:	4852      	ldr	r0, [pc, #328]	@ (8001c28 <_printf_i+0x234>)
 8001ae0:	6033      	str	r3, [r6, #0]
 8001ae2:	bf14      	ite	ne
 8001ae4:	230a      	movne	r3, #10
 8001ae6:	2308      	moveq	r3, #8
 8001ae8:	2100      	movs	r1, #0
 8001aea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001aee:	6866      	ldr	r6, [r4, #4]
 8001af0:	60a6      	str	r6, [r4, #8]
 8001af2:	2e00      	cmp	r6, #0
 8001af4:	db05      	blt.n	8001b02 <_printf_i+0x10e>
 8001af6:	6821      	ldr	r1, [r4, #0]
 8001af8:	432e      	orrs	r6, r5
 8001afa:	f021 0104 	bic.w	r1, r1, #4
 8001afe:	6021      	str	r1, [r4, #0]
 8001b00:	d04b      	beq.n	8001b9a <_printf_i+0x1a6>
 8001b02:	4616      	mov	r6, r2
 8001b04:	fbb5 f1f3 	udiv	r1, r5, r3
 8001b08:	fb03 5711 	mls	r7, r3, r1, r5
 8001b0c:	5dc7      	ldrb	r7, [r0, r7]
 8001b0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001b12:	462f      	mov	r7, r5
 8001b14:	42bb      	cmp	r3, r7
 8001b16:	460d      	mov	r5, r1
 8001b18:	d9f4      	bls.n	8001b04 <_printf_i+0x110>
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d10b      	bne.n	8001b36 <_printf_i+0x142>
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	07df      	lsls	r7, r3, #31
 8001b22:	d508      	bpl.n	8001b36 <_printf_i+0x142>
 8001b24:	6923      	ldr	r3, [r4, #16]
 8001b26:	6861      	ldr	r1, [r4, #4]
 8001b28:	4299      	cmp	r1, r3
 8001b2a:	bfde      	ittt	le
 8001b2c:	2330      	movle	r3, #48	@ 0x30
 8001b2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001b32:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001b36:	1b92      	subs	r2, r2, r6
 8001b38:	6122      	str	r2, [r4, #16]
 8001b3a:	f8cd a000 	str.w	sl, [sp]
 8001b3e:	464b      	mov	r3, r9
 8001b40:	aa03      	add	r2, sp, #12
 8001b42:	4621      	mov	r1, r4
 8001b44:	4640      	mov	r0, r8
 8001b46:	f7ff fee7 	bl	8001918 <_printf_common>
 8001b4a:	3001      	adds	r0, #1
 8001b4c:	d14a      	bne.n	8001be4 <_printf_i+0x1f0>
 8001b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b52:	b004      	add	sp, #16
 8001b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b58:	6823      	ldr	r3, [r4, #0]
 8001b5a:	f043 0320 	orr.w	r3, r3, #32
 8001b5e:	6023      	str	r3, [r4, #0]
 8001b60:	4832      	ldr	r0, [pc, #200]	@ (8001c2c <_printf_i+0x238>)
 8001b62:	2778      	movs	r7, #120	@ 0x78
 8001b64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001b68:	6823      	ldr	r3, [r4, #0]
 8001b6a:	6831      	ldr	r1, [r6, #0]
 8001b6c:	061f      	lsls	r7, r3, #24
 8001b6e:	f851 5b04 	ldr.w	r5, [r1], #4
 8001b72:	d402      	bmi.n	8001b7a <_printf_i+0x186>
 8001b74:	065f      	lsls	r7, r3, #25
 8001b76:	bf48      	it	mi
 8001b78:	b2ad      	uxthmi	r5, r5
 8001b7a:	6031      	str	r1, [r6, #0]
 8001b7c:	07d9      	lsls	r1, r3, #31
 8001b7e:	bf44      	itt	mi
 8001b80:	f043 0320 	orrmi.w	r3, r3, #32
 8001b84:	6023      	strmi	r3, [r4, #0]
 8001b86:	b11d      	cbz	r5, 8001b90 <_printf_i+0x19c>
 8001b88:	2310      	movs	r3, #16
 8001b8a:	e7ad      	b.n	8001ae8 <_printf_i+0xf4>
 8001b8c:	4826      	ldr	r0, [pc, #152]	@ (8001c28 <_printf_i+0x234>)
 8001b8e:	e7e9      	b.n	8001b64 <_printf_i+0x170>
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	f023 0320 	bic.w	r3, r3, #32
 8001b96:	6023      	str	r3, [r4, #0]
 8001b98:	e7f6      	b.n	8001b88 <_printf_i+0x194>
 8001b9a:	4616      	mov	r6, r2
 8001b9c:	e7bd      	b.n	8001b1a <_printf_i+0x126>
 8001b9e:	6833      	ldr	r3, [r6, #0]
 8001ba0:	6825      	ldr	r5, [r4, #0]
 8001ba2:	6961      	ldr	r1, [r4, #20]
 8001ba4:	1d18      	adds	r0, r3, #4
 8001ba6:	6030      	str	r0, [r6, #0]
 8001ba8:	062e      	lsls	r6, r5, #24
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	d501      	bpl.n	8001bb2 <_printf_i+0x1be>
 8001bae:	6019      	str	r1, [r3, #0]
 8001bb0:	e002      	b.n	8001bb8 <_printf_i+0x1c4>
 8001bb2:	0668      	lsls	r0, r5, #25
 8001bb4:	d5fb      	bpl.n	8001bae <_printf_i+0x1ba>
 8001bb6:	8019      	strh	r1, [r3, #0]
 8001bb8:	2300      	movs	r3, #0
 8001bba:	6123      	str	r3, [r4, #16]
 8001bbc:	4616      	mov	r6, r2
 8001bbe:	e7bc      	b.n	8001b3a <_printf_i+0x146>
 8001bc0:	6833      	ldr	r3, [r6, #0]
 8001bc2:	1d1a      	adds	r2, r3, #4
 8001bc4:	6032      	str	r2, [r6, #0]
 8001bc6:	681e      	ldr	r6, [r3, #0]
 8001bc8:	6862      	ldr	r2, [r4, #4]
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4630      	mov	r0, r6
 8001bce:	f7fe fb07 	bl	80001e0 <memchr>
 8001bd2:	b108      	cbz	r0, 8001bd8 <_printf_i+0x1e4>
 8001bd4:	1b80      	subs	r0, r0, r6
 8001bd6:	6060      	str	r0, [r4, #4]
 8001bd8:	6863      	ldr	r3, [r4, #4]
 8001bda:	6123      	str	r3, [r4, #16]
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001be2:	e7aa      	b.n	8001b3a <_printf_i+0x146>
 8001be4:	6923      	ldr	r3, [r4, #16]
 8001be6:	4632      	mov	r2, r6
 8001be8:	4649      	mov	r1, r9
 8001bea:	4640      	mov	r0, r8
 8001bec:	47d0      	blx	sl
 8001bee:	3001      	adds	r0, #1
 8001bf0:	d0ad      	beq.n	8001b4e <_printf_i+0x15a>
 8001bf2:	6823      	ldr	r3, [r4, #0]
 8001bf4:	079b      	lsls	r3, r3, #30
 8001bf6:	d413      	bmi.n	8001c20 <_printf_i+0x22c>
 8001bf8:	68e0      	ldr	r0, [r4, #12]
 8001bfa:	9b03      	ldr	r3, [sp, #12]
 8001bfc:	4298      	cmp	r0, r3
 8001bfe:	bfb8      	it	lt
 8001c00:	4618      	movlt	r0, r3
 8001c02:	e7a6      	b.n	8001b52 <_printf_i+0x15e>
 8001c04:	2301      	movs	r3, #1
 8001c06:	4632      	mov	r2, r6
 8001c08:	4649      	mov	r1, r9
 8001c0a:	4640      	mov	r0, r8
 8001c0c:	47d0      	blx	sl
 8001c0e:	3001      	adds	r0, #1
 8001c10:	d09d      	beq.n	8001b4e <_printf_i+0x15a>
 8001c12:	3501      	adds	r5, #1
 8001c14:	68e3      	ldr	r3, [r4, #12]
 8001c16:	9903      	ldr	r1, [sp, #12]
 8001c18:	1a5b      	subs	r3, r3, r1
 8001c1a:	42ab      	cmp	r3, r5
 8001c1c:	dcf2      	bgt.n	8001c04 <_printf_i+0x210>
 8001c1e:	e7eb      	b.n	8001bf8 <_printf_i+0x204>
 8001c20:	2500      	movs	r5, #0
 8001c22:	f104 0619 	add.w	r6, r4, #25
 8001c26:	e7f5      	b.n	8001c14 <_printf_i+0x220>
 8001c28:	0800251f 	.word	0x0800251f
 8001c2c:	08002530 	.word	0x08002530

08001c30 <__sflush_r>:
 8001c30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c36:	0716      	lsls	r6, r2, #28
 8001c38:	4605      	mov	r5, r0
 8001c3a:	460c      	mov	r4, r1
 8001c3c:	d454      	bmi.n	8001ce8 <__sflush_r+0xb8>
 8001c3e:	684b      	ldr	r3, [r1, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	dc02      	bgt.n	8001c4a <__sflush_r+0x1a>
 8001c44:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	dd48      	ble.n	8001cdc <__sflush_r+0xac>
 8001c4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001c4c:	2e00      	cmp	r6, #0
 8001c4e:	d045      	beq.n	8001cdc <__sflush_r+0xac>
 8001c50:	2300      	movs	r3, #0
 8001c52:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001c56:	682f      	ldr	r7, [r5, #0]
 8001c58:	6a21      	ldr	r1, [r4, #32]
 8001c5a:	602b      	str	r3, [r5, #0]
 8001c5c:	d030      	beq.n	8001cc0 <__sflush_r+0x90>
 8001c5e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001c60:	89a3      	ldrh	r3, [r4, #12]
 8001c62:	0759      	lsls	r1, r3, #29
 8001c64:	d505      	bpl.n	8001c72 <__sflush_r+0x42>
 8001c66:	6863      	ldr	r3, [r4, #4]
 8001c68:	1ad2      	subs	r2, r2, r3
 8001c6a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001c6c:	b10b      	cbz	r3, 8001c72 <__sflush_r+0x42>
 8001c6e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c70:	1ad2      	subs	r2, r2, r3
 8001c72:	2300      	movs	r3, #0
 8001c74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001c76:	6a21      	ldr	r1, [r4, #32]
 8001c78:	4628      	mov	r0, r5
 8001c7a:	47b0      	blx	r6
 8001c7c:	1c43      	adds	r3, r0, #1
 8001c7e:	89a3      	ldrh	r3, [r4, #12]
 8001c80:	d106      	bne.n	8001c90 <__sflush_r+0x60>
 8001c82:	6829      	ldr	r1, [r5, #0]
 8001c84:	291d      	cmp	r1, #29
 8001c86:	d82b      	bhi.n	8001ce0 <__sflush_r+0xb0>
 8001c88:	4a28      	ldr	r2, [pc, #160]	@ (8001d2c <__sflush_r+0xfc>)
 8001c8a:	40ca      	lsrs	r2, r1
 8001c8c:	07d6      	lsls	r6, r2, #31
 8001c8e:	d527      	bpl.n	8001ce0 <__sflush_r+0xb0>
 8001c90:	2200      	movs	r2, #0
 8001c92:	6062      	str	r2, [r4, #4]
 8001c94:	04d9      	lsls	r1, r3, #19
 8001c96:	6922      	ldr	r2, [r4, #16]
 8001c98:	6022      	str	r2, [r4, #0]
 8001c9a:	d504      	bpl.n	8001ca6 <__sflush_r+0x76>
 8001c9c:	1c42      	adds	r2, r0, #1
 8001c9e:	d101      	bne.n	8001ca4 <__sflush_r+0x74>
 8001ca0:	682b      	ldr	r3, [r5, #0]
 8001ca2:	b903      	cbnz	r3, 8001ca6 <__sflush_r+0x76>
 8001ca4:	6560      	str	r0, [r4, #84]	@ 0x54
 8001ca6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001ca8:	602f      	str	r7, [r5, #0]
 8001caa:	b1b9      	cbz	r1, 8001cdc <__sflush_r+0xac>
 8001cac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001cb0:	4299      	cmp	r1, r3
 8001cb2:	d002      	beq.n	8001cba <__sflush_r+0x8a>
 8001cb4:	4628      	mov	r0, r5
 8001cb6:	f7ff fbf7 	bl	80014a8 <_free_r>
 8001cba:	2300      	movs	r3, #0
 8001cbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8001cbe:	e00d      	b.n	8001cdc <__sflush_r+0xac>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	4628      	mov	r0, r5
 8001cc4:	47b0      	blx	r6
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	1c50      	adds	r0, r2, #1
 8001cca:	d1c9      	bne.n	8001c60 <__sflush_r+0x30>
 8001ccc:	682b      	ldr	r3, [r5, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0c6      	beq.n	8001c60 <__sflush_r+0x30>
 8001cd2:	2b1d      	cmp	r3, #29
 8001cd4:	d001      	beq.n	8001cda <__sflush_r+0xaa>
 8001cd6:	2b16      	cmp	r3, #22
 8001cd8:	d11d      	bne.n	8001d16 <__sflush_r+0xe6>
 8001cda:	602f      	str	r7, [r5, #0]
 8001cdc:	2000      	movs	r0, #0
 8001cde:	e021      	b.n	8001d24 <__sflush_r+0xf4>
 8001ce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ce4:	b21b      	sxth	r3, r3
 8001ce6:	e01a      	b.n	8001d1e <__sflush_r+0xee>
 8001ce8:	690f      	ldr	r7, [r1, #16]
 8001cea:	2f00      	cmp	r7, #0
 8001cec:	d0f6      	beq.n	8001cdc <__sflush_r+0xac>
 8001cee:	0793      	lsls	r3, r2, #30
 8001cf0:	680e      	ldr	r6, [r1, #0]
 8001cf2:	bf08      	it	eq
 8001cf4:	694b      	ldreq	r3, [r1, #20]
 8001cf6:	600f      	str	r7, [r1, #0]
 8001cf8:	bf18      	it	ne
 8001cfa:	2300      	movne	r3, #0
 8001cfc:	1bf6      	subs	r6, r6, r7
 8001cfe:	608b      	str	r3, [r1, #8]
 8001d00:	2e00      	cmp	r6, #0
 8001d02:	ddeb      	ble.n	8001cdc <__sflush_r+0xac>
 8001d04:	6a21      	ldr	r1, [r4, #32]
 8001d06:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001d0a:	4633      	mov	r3, r6
 8001d0c:	463a      	mov	r2, r7
 8001d0e:	4628      	mov	r0, r5
 8001d10:	47e0      	blx	ip
 8001d12:	2800      	cmp	r0, #0
 8001d14:	dc07      	bgt.n	8001d26 <__sflush_r+0xf6>
 8001d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d1e:	81a3      	strh	r3, [r4, #12]
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d26:	4407      	add	r7, r0
 8001d28:	1a36      	subs	r6, r6, r0
 8001d2a:	e7e9      	b.n	8001d00 <__sflush_r+0xd0>
 8001d2c:	20400001 	.word	0x20400001

08001d30 <_fflush_r>:
 8001d30:	b538      	push	{r3, r4, r5, lr}
 8001d32:	690b      	ldr	r3, [r1, #16]
 8001d34:	4605      	mov	r5, r0
 8001d36:	460c      	mov	r4, r1
 8001d38:	b913      	cbnz	r3, 8001d40 <_fflush_r+0x10>
 8001d3a:	2500      	movs	r5, #0
 8001d3c:	4628      	mov	r0, r5
 8001d3e:	bd38      	pop	{r3, r4, r5, pc}
 8001d40:	b118      	cbz	r0, 8001d4a <_fflush_r+0x1a>
 8001d42:	6a03      	ldr	r3, [r0, #32]
 8001d44:	b90b      	cbnz	r3, 8001d4a <_fflush_r+0x1a>
 8001d46:	f7ff f9bb 	bl	80010c0 <__sinit>
 8001d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f3      	beq.n	8001d3a <_fflush_r+0xa>
 8001d52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001d54:	07d0      	lsls	r0, r2, #31
 8001d56:	d404      	bmi.n	8001d62 <_fflush_r+0x32>
 8001d58:	0599      	lsls	r1, r3, #22
 8001d5a:	d402      	bmi.n	8001d62 <_fflush_r+0x32>
 8001d5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001d5e:	f7ff fba0 	bl	80014a2 <__retarget_lock_acquire_recursive>
 8001d62:	4628      	mov	r0, r5
 8001d64:	4621      	mov	r1, r4
 8001d66:	f7ff ff63 	bl	8001c30 <__sflush_r>
 8001d6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001d6c:	07da      	lsls	r2, r3, #31
 8001d6e:	4605      	mov	r5, r0
 8001d70:	d4e4      	bmi.n	8001d3c <_fflush_r+0xc>
 8001d72:	89a3      	ldrh	r3, [r4, #12]
 8001d74:	059b      	lsls	r3, r3, #22
 8001d76:	d4e1      	bmi.n	8001d3c <_fflush_r+0xc>
 8001d78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001d7a:	f7ff fb93 	bl	80014a4 <__retarget_lock_release_recursive>
 8001d7e:	e7dd      	b.n	8001d3c <_fflush_r+0xc>

08001d80 <__swhatbuf_r>:
 8001d80:	b570      	push	{r4, r5, r6, lr}
 8001d82:	460c      	mov	r4, r1
 8001d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d88:	2900      	cmp	r1, #0
 8001d8a:	b096      	sub	sp, #88	@ 0x58
 8001d8c:	4615      	mov	r5, r2
 8001d8e:	461e      	mov	r6, r3
 8001d90:	da0d      	bge.n	8001dae <__swhatbuf_r+0x2e>
 8001d92:	89a3      	ldrh	r3, [r4, #12]
 8001d94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001d98:	f04f 0100 	mov.w	r1, #0
 8001d9c:	bf14      	ite	ne
 8001d9e:	2340      	movne	r3, #64	@ 0x40
 8001da0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001da4:	2000      	movs	r0, #0
 8001da6:	6031      	str	r1, [r6, #0]
 8001da8:	602b      	str	r3, [r5, #0]
 8001daa:	b016      	add	sp, #88	@ 0x58
 8001dac:	bd70      	pop	{r4, r5, r6, pc}
 8001dae:	466a      	mov	r2, sp
 8001db0:	f000 f848 	bl	8001e44 <_fstat_r>
 8001db4:	2800      	cmp	r0, #0
 8001db6:	dbec      	blt.n	8001d92 <__swhatbuf_r+0x12>
 8001db8:	9901      	ldr	r1, [sp, #4]
 8001dba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001dbe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001dc2:	4259      	negs	r1, r3
 8001dc4:	4159      	adcs	r1, r3
 8001dc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dca:	e7eb      	b.n	8001da4 <__swhatbuf_r+0x24>

08001dcc <__smakebuf_r>:
 8001dcc:	898b      	ldrh	r3, [r1, #12]
 8001dce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001dd0:	079d      	lsls	r5, r3, #30
 8001dd2:	4606      	mov	r6, r0
 8001dd4:	460c      	mov	r4, r1
 8001dd6:	d507      	bpl.n	8001de8 <__smakebuf_r+0x1c>
 8001dd8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001ddc:	6023      	str	r3, [r4, #0]
 8001dde:	6123      	str	r3, [r4, #16]
 8001de0:	2301      	movs	r3, #1
 8001de2:	6163      	str	r3, [r4, #20]
 8001de4:	b003      	add	sp, #12
 8001de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001de8:	ab01      	add	r3, sp, #4
 8001dea:	466a      	mov	r2, sp
 8001dec:	f7ff ffc8 	bl	8001d80 <__swhatbuf_r>
 8001df0:	9f00      	ldr	r7, [sp, #0]
 8001df2:	4605      	mov	r5, r0
 8001df4:	4639      	mov	r1, r7
 8001df6:	4630      	mov	r0, r6
 8001df8:	f7ff fbc2 	bl	8001580 <_malloc_r>
 8001dfc:	b948      	cbnz	r0, 8001e12 <__smakebuf_r+0x46>
 8001dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e02:	059a      	lsls	r2, r3, #22
 8001e04:	d4ee      	bmi.n	8001de4 <__smakebuf_r+0x18>
 8001e06:	f023 0303 	bic.w	r3, r3, #3
 8001e0a:	f043 0302 	orr.w	r3, r3, #2
 8001e0e:	81a3      	strh	r3, [r4, #12]
 8001e10:	e7e2      	b.n	8001dd8 <__smakebuf_r+0xc>
 8001e12:	89a3      	ldrh	r3, [r4, #12]
 8001e14:	6020      	str	r0, [r4, #0]
 8001e16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e1a:	81a3      	strh	r3, [r4, #12]
 8001e1c:	9b01      	ldr	r3, [sp, #4]
 8001e1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001e22:	b15b      	cbz	r3, 8001e3c <__smakebuf_r+0x70>
 8001e24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e28:	4630      	mov	r0, r6
 8001e2a:	f000 f81d 	bl	8001e68 <_isatty_r>
 8001e2e:	b128      	cbz	r0, 8001e3c <__smakebuf_r+0x70>
 8001e30:	89a3      	ldrh	r3, [r4, #12]
 8001e32:	f023 0303 	bic.w	r3, r3, #3
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	81a3      	strh	r3, [r4, #12]
 8001e3c:	89a3      	ldrh	r3, [r4, #12]
 8001e3e:	431d      	orrs	r5, r3
 8001e40:	81a5      	strh	r5, [r4, #12]
 8001e42:	e7cf      	b.n	8001de4 <__smakebuf_r+0x18>

08001e44 <_fstat_r>:
 8001e44:	b538      	push	{r3, r4, r5, lr}
 8001e46:	4d07      	ldr	r5, [pc, #28]	@ (8001e64 <_fstat_r+0x20>)
 8001e48:	2300      	movs	r3, #0
 8001e4a:	4604      	mov	r4, r0
 8001e4c:	4608      	mov	r0, r1
 8001e4e:	4611      	mov	r1, r2
 8001e50:	602b      	str	r3, [r5, #0]
 8001e52:	f000 f966 	bl	8002122 <_fstat>
 8001e56:	1c43      	adds	r3, r0, #1
 8001e58:	d102      	bne.n	8001e60 <_fstat_r+0x1c>
 8001e5a:	682b      	ldr	r3, [r5, #0]
 8001e5c:	b103      	cbz	r3, 8001e60 <_fstat_r+0x1c>
 8001e5e:	6023      	str	r3, [r4, #0]
 8001e60:	bd38      	pop	{r3, r4, r5, pc}
 8001e62:	bf00      	nop
 8001e64:	200001c0 	.word	0x200001c0

08001e68 <_isatty_r>:
 8001e68:	b538      	push	{r3, r4, r5, lr}
 8001e6a:	4d06      	ldr	r5, [pc, #24]	@ (8001e84 <_isatty_r+0x1c>)
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	4604      	mov	r4, r0
 8001e70:	4608      	mov	r0, r1
 8001e72:	602b      	str	r3, [r5, #0]
 8001e74:	f000 faba 	bl	80023ec <_isatty>
 8001e78:	1c43      	adds	r3, r0, #1
 8001e7a:	d102      	bne.n	8001e82 <_isatty_r+0x1a>
 8001e7c:	682b      	ldr	r3, [r5, #0]
 8001e7e:	b103      	cbz	r3, 8001e82 <_isatty_r+0x1a>
 8001e80:	6023      	str	r3, [r4, #0]
 8001e82:	bd38      	pop	{r3, r4, r5, pc}
 8001e84:	200001c0 	.word	0x200001c0

08001e88 <_sbrk_r>:
 8001e88:	b538      	push	{r3, r4, r5, lr}
 8001e8a:	4d06      	ldr	r5, [pc, #24]	@ (8001ea4 <_sbrk_r+0x1c>)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	4604      	mov	r4, r0
 8001e90:	4608      	mov	r0, r1
 8001e92:	602b      	str	r3, [r5, #0]
 8001e94:	f000 f900 	bl	8002098 <_sbrk>
 8001e98:	1c43      	adds	r3, r0, #1
 8001e9a:	d102      	bne.n	8001ea2 <_sbrk_r+0x1a>
 8001e9c:	682b      	ldr	r3, [r5, #0]
 8001e9e:	b103      	cbz	r3, 8001ea2 <_sbrk_r+0x1a>
 8001ea0:	6023      	str	r3, [r4, #0]
 8001ea2:	bd38      	pop	{r3, r4, r5, pc}
 8001ea4:	200001c0 	.word	0x200001c0

08001ea8 <findslot>:
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed4 <findslot+0x2c>)
 8001eaa:	b510      	push	{r4, lr}
 8001eac:	4604      	mov	r4, r0
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	b118      	cbz	r0, 8001eba <findslot+0x12>
 8001eb2:	6a03      	ldr	r3, [r0, #32]
 8001eb4:	b90b      	cbnz	r3, 8001eba <findslot+0x12>
 8001eb6:	f7ff f903 	bl	80010c0 <__sinit>
 8001eba:	2c13      	cmp	r4, #19
 8001ebc:	d807      	bhi.n	8001ece <findslot+0x26>
 8001ebe:	4806      	ldr	r0, [pc, #24]	@ (8001ed8 <findslot+0x30>)
 8001ec0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8001ec4:	3201      	adds	r2, #1
 8001ec6:	d002      	beq.n	8001ece <findslot+0x26>
 8001ec8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001ecc:	bd10      	pop	{r4, pc}
 8001ece:	2000      	movs	r0, #0
 8001ed0:	e7fc      	b.n	8001ecc <findslot+0x24>
 8001ed2:	bf00      	nop
 8001ed4:	2000000c 	.word	0x2000000c
 8001ed8:	200001e0 	.word	0x200001e0

08001edc <error>:
 8001edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ede:	4604      	mov	r4, r0
 8001ee0:	f000 faa2 	bl	8002428 <__errno>
 8001ee4:	2613      	movs	r6, #19
 8001ee6:	4605      	mov	r5, r0
 8001ee8:	2700      	movs	r7, #0
 8001eea:	4630      	mov	r0, r6
 8001eec:	4639      	mov	r1, r7
 8001eee:	beab      	bkpt	0x00ab
 8001ef0:	4606      	mov	r6, r0
 8001ef2:	602e      	str	r6, [r5, #0]
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001ef8 <checkerror>:
 8001ef8:	1c43      	adds	r3, r0, #1
 8001efa:	d101      	bne.n	8001f00 <checkerror+0x8>
 8001efc:	f7ff bfee 	b.w	8001edc <error>
 8001f00:	4770      	bx	lr

08001f02 <_swiread>:
 8001f02:	b530      	push	{r4, r5, lr}
 8001f04:	b085      	sub	sp, #20
 8001f06:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001f0a:	9203      	str	r2, [sp, #12]
 8001f0c:	2406      	movs	r4, #6
 8001f0e:	ad01      	add	r5, sp, #4
 8001f10:	4620      	mov	r0, r4
 8001f12:	4629      	mov	r1, r5
 8001f14:	beab      	bkpt	0x00ab
 8001f16:	4604      	mov	r4, r0
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f7ff ffed 	bl	8001ef8 <checkerror>
 8001f1e:	b005      	add	sp, #20
 8001f20:	bd30      	pop	{r4, r5, pc}

08001f22 <_read>:
 8001f22:	b570      	push	{r4, r5, r6, lr}
 8001f24:	460e      	mov	r6, r1
 8001f26:	4614      	mov	r4, r2
 8001f28:	f7ff ffbe 	bl	8001ea8 <findslot>
 8001f2c:	4605      	mov	r5, r0
 8001f2e:	b930      	cbnz	r0, 8001f3e <_read+0x1c>
 8001f30:	f000 fa7a 	bl	8002428 <__errno>
 8001f34:	2309      	movs	r3, #9
 8001f36:	6003      	str	r3, [r0, #0]
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3c:	bd70      	pop	{r4, r5, r6, pc}
 8001f3e:	6800      	ldr	r0, [r0, #0]
 8001f40:	4622      	mov	r2, r4
 8001f42:	4631      	mov	r1, r6
 8001f44:	f7ff ffdd 	bl	8001f02 <_swiread>
 8001f48:	1c43      	adds	r3, r0, #1
 8001f4a:	d0f5      	beq.n	8001f38 <_read+0x16>
 8001f4c:	686b      	ldr	r3, [r5, #4]
 8001f4e:	1a20      	subs	r0, r4, r0
 8001f50:	4403      	add	r3, r0
 8001f52:	606b      	str	r3, [r5, #4]
 8001f54:	e7f2      	b.n	8001f3c <_read+0x1a>

08001f56 <_swilseek>:
 8001f56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f58:	460c      	mov	r4, r1
 8001f5a:	4616      	mov	r6, r2
 8001f5c:	f7ff ffa4 	bl	8001ea8 <findslot>
 8001f60:	4605      	mov	r5, r0
 8001f62:	b940      	cbnz	r0, 8001f76 <_swilseek+0x20>
 8001f64:	f000 fa60 	bl	8002428 <__errno>
 8001f68:	2309      	movs	r3, #9
 8001f6a:	6003      	str	r3, [r0, #0]
 8001f6c:	f04f 34ff 	mov.w	r4, #4294967295
 8001f70:	4620      	mov	r0, r4
 8001f72:	b003      	add	sp, #12
 8001f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f76:	2e02      	cmp	r6, #2
 8001f78:	d903      	bls.n	8001f82 <_swilseek+0x2c>
 8001f7a:	f000 fa55 	bl	8002428 <__errno>
 8001f7e:	2316      	movs	r3, #22
 8001f80:	e7f3      	b.n	8001f6a <_swilseek+0x14>
 8001f82:	2e01      	cmp	r6, #1
 8001f84:	d112      	bne.n	8001fac <_swilseek+0x56>
 8001f86:	6843      	ldr	r3, [r0, #4]
 8001f88:	18e4      	adds	r4, r4, r3
 8001f8a:	d4f6      	bmi.n	8001f7a <_swilseek+0x24>
 8001f8c:	682b      	ldr	r3, [r5, #0]
 8001f8e:	260a      	movs	r6, #10
 8001f90:	e9cd 3400 	strd	r3, r4, [sp]
 8001f94:	466f      	mov	r7, sp
 8001f96:	4630      	mov	r0, r6
 8001f98:	4639      	mov	r1, r7
 8001f9a:	beab      	bkpt	0x00ab
 8001f9c:	4606      	mov	r6, r0
 8001f9e:	4630      	mov	r0, r6
 8001fa0:	f7ff ffaa 	bl	8001ef8 <checkerror>
 8001fa4:	2800      	cmp	r0, #0
 8001fa6:	dbe1      	blt.n	8001f6c <_swilseek+0x16>
 8001fa8:	606c      	str	r4, [r5, #4]
 8001faa:	e7e1      	b.n	8001f70 <_swilseek+0x1a>
 8001fac:	2e02      	cmp	r6, #2
 8001fae:	6803      	ldr	r3, [r0, #0]
 8001fb0:	d1ec      	bne.n	8001f8c <_swilseek+0x36>
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	260c      	movs	r6, #12
 8001fb6:	466f      	mov	r7, sp
 8001fb8:	4630      	mov	r0, r6
 8001fba:	4639      	mov	r1, r7
 8001fbc:	beab      	bkpt	0x00ab
 8001fbe:	4606      	mov	r6, r0
 8001fc0:	4630      	mov	r0, r6
 8001fc2:	f7ff ff99 	bl	8001ef8 <checkerror>
 8001fc6:	1c43      	adds	r3, r0, #1
 8001fc8:	d0d0      	beq.n	8001f6c <_swilseek+0x16>
 8001fca:	4404      	add	r4, r0
 8001fcc:	e7de      	b.n	8001f8c <_swilseek+0x36>

08001fce <_lseek>:
 8001fce:	f7ff bfc2 	b.w	8001f56 <_swilseek>

08001fd2 <_swiwrite>:
 8001fd2:	b530      	push	{r4, r5, lr}
 8001fd4:	b085      	sub	sp, #20
 8001fd6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001fda:	9203      	str	r2, [sp, #12]
 8001fdc:	2405      	movs	r4, #5
 8001fde:	ad01      	add	r5, sp, #4
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	4629      	mov	r1, r5
 8001fe4:	beab      	bkpt	0x00ab
 8001fe6:	4604      	mov	r4, r0
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f7ff ff85 	bl	8001ef8 <checkerror>
 8001fee:	b005      	add	sp, #20
 8001ff0:	bd30      	pop	{r4, r5, pc}

08001ff2 <_write>:
 8001ff2:	b570      	push	{r4, r5, r6, lr}
 8001ff4:	460e      	mov	r6, r1
 8001ff6:	4615      	mov	r5, r2
 8001ff8:	f7ff ff56 	bl	8001ea8 <findslot>
 8001ffc:	4604      	mov	r4, r0
 8001ffe:	b930      	cbnz	r0, 800200e <_write+0x1c>
 8002000:	f000 fa12 	bl	8002428 <__errno>
 8002004:	2309      	movs	r3, #9
 8002006:	6003      	str	r3, [r0, #0]
 8002008:	f04f 30ff 	mov.w	r0, #4294967295
 800200c:	bd70      	pop	{r4, r5, r6, pc}
 800200e:	6800      	ldr	r0, [r0, #0]
 8002010:	462a      	mov	r2, r5
 8002012:	4631      	mov	r1, r6
 8002014:	f7ff ffdd 	bl	8001fd2 <_swiwrite>
 8002018:	1e03      	subs	r3, r0, #0
 800201a:	dbf5      	blt.n	8002008 <_write+0x16>
 800201c:	6862      	ldr	r2, [r4, #4]
 800201e:	1ae8      	subs	r0, r5, r3
 8002020:	4402      	add	r2, r0
 8002022:	42ab      	cmp	r3, r5
 8002024:	6062      	str	r2, [r4, #4]
 8002026:	d1f1      	bne.n	800200c <_write+0x1a>
 8002028:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800202c:	2000      	movs	r0, #0
 800202e:	f7ff bf55 	b.w	8001edc <error>

08002032 <_swiclose>:
 8002032:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002034:	2402      	movs	r4, #2
 8002036:	9001      	str	r0, [sp, #4]
 8002038:	ad01      	add	r5, sp, #4
 800203a:	4620      	mov	r0, r4
 800203c:	4629      	mov	r1, r5
 800203e:	beab      	bkpt	0x00ab
 8002040:	4604      	mov	r4, r0
 8002042:	4620      	mov	r0, r4
 8002044:	f7ff ff58 	bl	8001ef8 <checkerror>
 8002048:	b003      	add	sp, #12
 800204a:	bd30      	pop	{r4, r5, pc}

0800204c <_close>:
 800204c:	b538      	push	{r3, r4, r5, lr}
 800204e:	4605      	mov	r5, r0
 8002050:	f7ff ff2a 	bl	8001ea8 <findslot>
 8002054:	4604      	mov	r4, r0
 8002056:	b930      	cbnz	r0, 8002066 <_close+0x1a>
 8002058:	f000 f9e6 	bl	8002428 <__errno>
 800205c:	2309      	movs	r3, #9
 800205e:	6003      	str	r3, [r0, #0]
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	bd38      	pop	{r3, r4, r5, pc}
 8002066:	3d01      	subs	r5, #1
 8002068:	2d01      	cmp	r5, #1
 800206a:	d809      	bhi.n	8002080 <_close+0x34>
 800206c:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <_close+0x48>)
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	429a      	cmp	r2, r3
 8002074:	d104      	bne.n	8002080 <_close+0x34>
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
 800207a:	6003      	str	r3, [r0, #0]
 800207c:	2000      	movs	r0, #0
 800207e:	e7f1      	b.n	8002064 <_close+0x18>
 8002080:	6820      	ldr	r0, [r4, #0]
 8002082:	f7ff ffd6 	bl	8002032 <_swiclose>
 8002086:	2800      	cmp	r0, #0
 8002088:	d1ec      	bne.n	8002064 <_close+0x18>
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
 800208e:	6023      	str	r3, [r4, #0]
 8002090:	e7e8      	b.n	8002064 <_close+0x18>
 8002092:	bf00      	nop
 8002094:	200001e0 	.word	0x200001e0

08002098 <_sbrk>:
 8002098:	4a0d      	ldr	r2, [pc, #52]	@ (80020d0 <_sbrk+0x38>)
 800209a:	6811      	ldr	r1, [r2, #0]
 800209c:	b510      	push	{r4, lr}
 800209e:	4603      	mov	r3, r0
 80020a0:	b909      	cbnz	r1, 80020a6 <_sbrk+0xe>
 80020a2:	490c      	ldr	r1, [pc, #48]	@ (80020d4 <_sbrk+0x3c>)
 80020a4:	6011      	str	r1, [r2, #0]
 80020a6:	6810      	ldr	r0, [r2, #0]
 80020a8:	4669      	mov	r1, sp
 80020aa:	4403      	add	r3, r0
 80020ac:	428b      	cmp	r3, r1
 80020ae:	d806      	bhi.n	80020be <_sbrk+0x26>
 80020b0:	4909      	ldr	r1, [pc, #36]	@ (80020d8 <_sbrk+0x40>)
 80020b2:	4c0a      	ldr	r4, [pc, #40]	@ (80020dc <_sbrk+0x44>)
 80020b4:	6809      	ldr	r1, [r1, #0]
 80020b6:	42a1      	cmp	r1, r4
 80020b8:	d008      	beq.n	80020cc <_sbrk+0x34>
 80020ba:	428b      	cmp	r3, r1
 80020bc:	d906      	bls.n	80020cc <_sbrk+0x34>
 80020be:	f000 f9b3 	bl	8002428 <__errno>
 80020c2:	230c      	movs	r3, #12
 80020c4:	6003      	str	r3, [r0, #0]
 80020c6:	f04f 30ff 	mov.w	r0, #4294967295
 80020ca:	bd10      	pop	{r4, pc}
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	e7fc      	b.n	80020ca <_sbrk+0x32>
 80020d0:	200001d0 	.word	0x200001d0
 80020d4:	20000280 	.word	0x20000280
 80020d8:	2000005c 	.word	0x2000005c
 80020dc:	cafedead 	.word	0xcafedead

080020e0 <_swistat>:
 80020e0:	b570      	push	{r4, r5, r6, lr}
 80020e2:	460c      	mov	r4, r1
 80020e4:	f7ff fee0 	bl	8001ea8 <findslot>
 80020e8:	4605      	mov	r5, r0
 80020ea:	b930      	cbnz	r0, 80020fa <_swistat+0x1a>
 80020ec:	f000 f99c 	bl	8002428 <__errno>
 80020f0:	2309      	movs	r3, #9
 80020f2:	6003      	str	r3, [r0, #0]
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295
 80020f8:	bd70      	pop	{r4, r5, r6, pc}
 80020fa:	6863      	ldr	r3, [r4, #4]
 80020fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002100:	6063      	str	r3, [r4, #4]
 8002102:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002106:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002108:	260c      	movs	r6, #12
 800210a:	4630      	mov	r0, r6
 800210c:	4629      	mov	r1, r5
 800210e:	beab      	bkpt	0x00ab
 8002110:	4605      	mov	r5, r0
 8002112:	4628      	mov	r0, r5
 8002114:	f7ff fef0 	bl	8001ef8 <checkerror>
 8002118:	1c43      	adds	r3, r0, #1
 800211a:	d0eb      	beq.n	80020f4 <_swistat+0x14>
 800211c:	6120      	str	r0, [r4, #16]
 800211e:	2000      	movs	r0, #0
 8002120:	e7ea      	b.n	80020f8 <_swistat+0x18>

08002122 <_fstat>:
 8002122:	460b      	mov	r3, r1
 8002124:	b510      	push	{r4, lr}
 8002126:	2100      	movs	r1, #0
 8002128:	4604      	mov	r4, r0
 800212a:	2258      	movs	r2, #88	@ 0x58
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff f945 	bl	80013bc <memset>
 8002132:	4601      	mov	r1, r0
 8002134:	4620      	mov	r0, r4
 8002136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800213a:	f7ff bfd1 	b.w	80020e0 <_swistat>

0800213e <_stat>:
 800213e:	b538      	push	{r3, r4, r5, lr}
 8002140:	460d      	mov	r5, r1
 8002142:	4604      	mov	r4, r0
 8002144:	2258      	movs	r2, #88	@ 0x58
 8002146:	2100      	movs	r1, #0
 8002148:	4628      	mov	r0, r5
 800214a:	f7ff f937 	bl	80013bc <memset>
 800214e:	4620      	mov	r0, r4
 8002150:	2100      	movs	r1, #0
 8002152:	f000 f811 	bl	8002178 <_swiopen>
 8002156:	1c43      	adds	r3, r0, #1
 8002158:	4604      	mov	r4, r0
 800215a:	d00b      	beq.n	8002174 <_stat+0x36>
 800215c:	686b      	ldr	r3, [r5, #4]
 800215e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8002162:	606b      	str	r3, [r5, #4]
 8002164:	4629      	mov	r1, r5
 8002166:	f7ff ffbb 	bl	80020e0 <_swistat>
 800216a:	4605      	mov	r5, r0
 800216c:	4620      	mov	r0, r4
 800216e:	f7ff ff6d 	bl	800204c <_close>
 8002172:	462c      	mov	r4, r5
 8002174:	4620      	mov	r0, r4
 8002176:	bd38      	pop	{r3, r4, r5, pc}

08002178 <_swiopen>:
 8002178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800217c:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 8002228 <_swiopen+0xb0>
 8002180:	b096      	sub	sp, #88	@ 0x58
 8002182:	4607      	mov	r7, r0
 8002184:	460e      	mov	r6, r1
 8002186:	2400      	movs	r4, #0
 8002188:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 800218c:	3301      	adds	r3, #1
 800218e:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8002192:	d032      	beq.n	80021fa <_swiopen+0x82>
 8002194:	3401      	adds	r4, #1
 8002196:	2c14      	cmp	r4, #20
 8002198:	d1f6      	bne.n	8002188 <_swiopen+0x10>
 800219a:	f000 f945 	bl	8002428 <__errno>
 800219e:	2318      	movs	r3, #24
 80021a0:	e03a      	b.n	8002218 <_swiopen+0xa0>
 80021a2:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80021a6:	f240 6301 	movw	r3, #1537	@ 0x601
 80021aa:	07b2      	lsls	r2, r6, #30
 80021ac:	bf48      	it	mi
 80021ae:	f045 0502 	orrmi.w	r5, r5, #2
 80021b2:	421e      	tst	r6, r3
 80021b4:	bf18      	it	ne
 80021b6:	f045 0504 	orrne.w	r5, r5, #4
 80021ba:	0733      	lsls	r3, r6, #28
 80021bc:	bf48      	it	mi
 80021be:	f025 0504 	bicmi.w	r5, r5, #4
 80021c2:	4638      	mov	r0, r7
 80021c4:	bf48      	it	mi
 80021c6:	f045 0508 	orrmi.w	r5, r5, #8
 80021ca:	9700      	str	r7, [sp, #0]
 80021cc:	f7fe f800 	bl	80001d0 <strlen>
 80021d0:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80021d4:	2501      	movs	r5, #1
 80021d6:	4628      	mov	r0, r5
 80021d8:	4651      	mov	r1, sl
 80021da:	beab      	bkpt	0x00ab
 80021dc:	4605      	mov	r5, r0
 80021de:	2d00      	cmp	r5, #0
 80021e0:	db06      	blt.n	80021f0 <_swiopen+0x78>
 80021e2:	44c8      	add	r8, r9
 80021e4:	2300      	movs	r3, #0
 80021e6:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 80021ea:	f8c8 3004 	str.w	r3, [r8, #4]
 80021ee:	e016      	b.n	800221e <_swiopen+0xa6>
 80021f0:	4628      	mov	r0, r5
 80021f2:	f7ff fe73 	bl	8001edc <error>
 80021f6:	4604      	mov	r4, r0
 80021f8:	e011      	b.n	800221e <_swiopen+0xa6>
 80021fa:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80021fe:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002202:	46ea      	mov	sl, sp
 8002204:	d1cd      	bne.n	80021a2 <_swiopen+0x2a>
 8002206:	4651      	mov	r1, sl
 8002208:	4638      	mov	r0, r7
 800220a:	f7ff ff98 	bl	800213e <_stat>
 800220e:	3001      	adds	r0, #1
 8002210:	d0c7      	beq.n	80021a2 <_swiopen+0x2a>
 8002212:	f000 f909 	bl	8002428 <__errno>
 8002216:	2311      	movs	r3, #17
 8002218:	6003      	str	r3, [r0, #0]
 800221a:	f04f 34ff 	mov.w	r4, #4294967295
 800221e:	4620      	mov	r0, r4
 8002220:	b016      	add	sp, #88	@ 0x58
 8002222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002226:	bf00      	nop
 8002228:	200001e0 	.word	0x200001e0

0800222c <_get_semihosting_exts>:
 800222c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002230:	4606      	mov	r6, r0
 8002232:	460f      	mov	r7, r1
 8002234:	4829      	ldr	r0, [pc, #164]	@ (80022dc <_get_semihosting_exts+0xb0>)
 8002236:	2100      	movs	r1, #0
 8002238:	4615      	mov	r5, r2
 800223a:	f7ff ff9d 	bl	8002178 <_swiopen>
 800223e:	462a      	mov	r2, r5
 8002240:	4604      	mov	r4, r0
 8002242:	2100      	movs	r1, #0
 8002244:	4630      	mov	r0, r6
 8002246:	f7ff f8b9 	bl	80013bc <memset>
 800224a:	1c63      	adds	r3, r4, #1
 800224c:	d014      	beq.n	8002278 <_get_semihosting_exts+0x4c>
 800224e:	4620      	mov	r0, r4
 8002250:	f7ff fe2a 	bl	8001ea8 <findslot>
 8002254:	f04f 080c 	mov.w	r8, #12
 8002258:	4681      	mov	r9, r0
 800225a:	4640      	mov	r0, r8
 800225c:	4649      	mov	r1, r9
 800225e:	beab      	bkpt	0x00ab
 8002260:	4680      	mov	r8, r0
 8002262:	4640      	mov	r0, r8
 8002264:	f7ff fe48 	bl	8001ef8 <checkerror>
 8002268:	2803      	cmp	r0, #3
 800226a:	dd02      	ble.n	8002272 <_get_semihosting_exts+0x46>
 800226c:	1ec3      	subs	r3, r0, #3
 800226e:	42ab      	cmp	r3, r5
 8002270:	dc07      	bgt.n	8002282 <_get_semihosting_exts+0x56>
 8002272:	4620      	mov	r0, r4
 8002274:	f7ff feea 	bl	800204c <_close>
 8002278:	f04f 30ff 	mov.w	r0, #4294967295
 800227c:	b003      	add	sp, #12
 800227e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002282:	2204      	movs	r2, #4
 8002284:	eb0d 0102 	add.w	r1, sp, r2
 8002288:	4620      	mov	r0, r4
 800228a:	f7ff fe4a 	bl	8001f22 <_read>
 800228e:	2803      	cmp	r0, #3
 8002290:	ddef      	ble.n	8002272 <_get_semihosting_exts+0x46>
 8002292:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002296:	2b53      	cmp	r3, #83	@ 0x53
 8002298:	d1eb      	bne.n	8002272 <_get_semihosting_exts+0x46>
 800229a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800229e:	2b48      	cmp	r3, #72	@ 0x48
 80022a0:	d1e7      	bne.n	8002272 <_get_semihosting_exts+0x46>
 80022a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80022a6:	2b46      	cmp	r3, #70	@ 0x46
 80022a8:	d1e3      	bne.n	8002272 <_get_semihosting_exts+0x46>
 80022aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80022ae:	2b42      	cmp	r3, #66	@ 0x42
 80022b0:	d1df      	bne.n	8002272 <_get_semihosting_exts+0x46>
 80022b2:	2201      	movs	r2, #1
 80022b4:	4639      	mov	r1, r7
 80022b6:	4620      	mov	r0, r4
 80022b8:	f7ff fe4d 	bl	8001f56 <_swilseek>
 80022bc:	2800      	cmp	r0, #0
 80022be:	dbd8      	blt.n	8002272 <_get_semihosting_exts+0x46>
 80022c0:	462a      	mov	r2, r5
 80022c2:	4631      	mov	r1, r6
 80022c4:	4620      	mov	r0, r4
 80022c6:	f7ff fe2c 	bl	8001f22 <_read>
 80022ca:	4605      	mov	r5, r0
 80022cc:	4620      	mov	r0, r4
 80022ce:	f7ff febd 	bl	800204c <_close>
 80022d2:	4628      	mov	r0, r5
 80022d4:	f7ff fe10 	bl	8001ef8 <checkerror>
 80022d8:	e7d0      	b.n	800227c <_get_semihosting_exts+0x50>
 80022da:	bf00      	nop
 80022dc:	08002541 	.word	0x08002541

080022e0 <initialise_semihosting_exts>:
 80022e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80022e2:	4d0a      	ldr	r5, [pc, #40]	@ (800230c <initialise_semihosting_exts+0x2c>)
 80022e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002310 <initialise_semihosting_exts+0x30>)
 80022e6:	2100      	movs	r1, #0
 80022e8:	2201      	movs	r2, #1
 80022ea:	a801      	add	r0, sp, #4
 80022ec:	6029      	str	r1, [r5, #0]
 80022ee:	6022      	str	r2, [r4, #0]
 80022f0:	f7ff ff9c 	bl	800222c <_get_semihosting_exts>
 80022f4:	2800      	cmp	r0, #0
 80022f6:	dd07      	ble.n	8002308 <initialise_semihosting_exts+0x28>
 80022f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80022fc:	f003 0201 	and.w	r2, r3, #1
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	602a      	str	r2, [r5, #0]
 8002306:	6023      	str	r3, [r4, #0]
 8002308:	b003      	add	sp, #12
 800230a:	bd30      	pop	{r4, r5, pc}
 800230c:	20000064 	.word	0x20000064
 8002310:	20000060 	.word	0x20000060

08002314 <_has_ext_stdout_stderr>:
 8002314:	b510      	push	{r4, lr}
 8002316:	4c04      	ldr	r4, [pc, #16]	@ (8002328 <_has_ext_stdout_stderr+0x14>)
 8002318:	6823      	ldr	r3, [r4, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	da01      	bge.n	8002322 <_has_ext_stdout_stderr+0xe>
 800231e:	f7ff ffdf 	bl	80022e0 <initialise_semihosting_exts>
 8002322:	6820      	ldr	r0, [r4, #0]
 8002324:	bd10      	pop	{r4, pc}
 8002326:	bf00      	nop
 8002328:	20000060 	.word	0x20000060

0800232c <initialise_monitor_handles>:
 800232c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002330:	b085      	sub	sp, #20
 8002332:	f8df 90a4 	ldr.w	r9, [pc, #164]	@ 80023d8 <initialise_monitor_handles+0xac>
 8002336:	f8cd 9004 	str.w	r9, [sp, #4]
 800233a:	2303      	movs	r3, #3
 800233c:	2400      	movs	r4, #0
 800233e:	9303      	str	r3, [sp, #12]
 8002340:	af01      	add	r7, sp, #4
 8002342:	9402      	str	r4, [sp, #8]
 8002344:	2501      	movs	r5, #1
 8002346:	4628      	mov	r0, r5
 8002348:	4639      	mov	r1, r7
 800234a:	beab      	bkpt	0x00ab
 800234c:	4605      	mov	r5, r0
 800234e:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 80023dc <initialise_monitor_handles+0xb0>
 8002352:	4623      	mov	r3, r4
 8002354:	4c22      	ldr	r4, [pc, #136]	@ (80023e0 <initialise_monitor_handles+0xb4>)
 8002356:	f8c8 5000 	str.w	r5, [r8]
 800235a:	f04f 32ff 	mov.w	r2, #4294967295
 800235e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002362:	3301      	adds	r3, #1
 8002364:	2b14      	cmp	r3, #20
 8002366:	d1fa      	bne.n	800235e <initialise_monitor_handles+0x32>
 8002368:	f7ff ffd4 	bl	8002314 <_has_ext_stdout_stderr>
 800236c:	4d1d      	ldr	r5, [pc, #116]	@ (80023e4 <initialise_monitor_handles+0xb8>)
 800236e:	b1d0      	cbz	r0, 80023a6 <initialise_monitor_handles+0x7a>
 8002370:	f04f 0a03 	mov.w	sl, #3
 8002374:	2304      	movs	r3, #4
 8002376:	f8cd 9004 	str.w	r9, [sp, #4]
 800237a:	2601      	movs	r6, #1
 800237c:	f8cd a00c 	str.w	sl, [sp, #12]
 8002380:	9302      	str	r3, [sp, #8]
 8002382:	4630      	mov	r0, r6
 8002384:	4639      	mov	r1, r7
 8002386:	beab      	bkpt	0x00ab
 8002388:	4683      	mov	fp, r0
 800238a:	4b17      	ldr	r3, [pc, #92]	@ (80023e8 <initialise_monitor_handles+0xbc>)
 800238c:	f8cd 9004 	str.w	r9, [sp, #4]
 8002390:	f8c3 b000 	str.w	fp, [r3]
 8002394:	2308      	movs	r3, #8
 8002396:	f8cd a00c 	str.w	sl, [sp, #12]
 800239a:	9302      	str	r3, [sp, #8]
 800239c:	4630      	mov	r0, r6
 800239e:	4639      	mov	r1, r7
 80023a0:	beab      	bkpt	0x00ab
 80023a2:	4606      	mov	r6, r0
 80023a4:	602e      	str	r6, [r5, #0]
 80023a6:	682b      	ldr	r3, [r5, #0]
 80023a8:	3301      	adds	r3, #1
 80023aa:	bf02      	ittt	eq
 80023ac:	4b0e      	ldreq	r3, [pc, #56]	@ (80023e8 <initialise_monitor_handles+0xbc>)
 80023ae:	681b      	ldreq	r3, [r3, #0]
 80023b0:	602b      	streq	r3, [r5, #0]
 80023b2:	2600      	movs	r6, #0
 80023b4:	f8d8 3000 	ldr.w	r3, [r8]
 80023b8:	6023      	str	r3, [r4, #0]
 80023ba:	6066      	str	r6, [r4, #4]
 80023bc:	f7ff ffaa 	bl	8002314 <_has_ext_stdout_stderr>
 80023c0:	b130      	cbz	r0, 80023d0 <initialise_monitor_handles+0xa4>
 80023c2:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <initialise_monitor_handles+0xbc>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80023ca:	682b      	ldr	r3, [r5, #0]
 80023cc:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80023d0:	b005      	add	sp, #20
 80023d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023d6:	bf00      	nop
 80023d8:	08002557 	.word	0x08002557
 80023dc:	200001dc 	.word	0x200001dc
 80023e0:	200001e0 	.word	0x200001e0
 80023e4:	200001d4 	.word	0x200001d4
 80023e8:	200001d8 	.word	0x200001d8

080023ec <_isatty>:
 80023ec:	b570      	push	{r4, r5, r6, lr}
 80023ee:	f7ff fd5b 	bl	8001ea8 <findslot>
 80023f2:	2409      	movs	r4, #9
 80023f4:	4605      	mov	r5, r0
 80023f6:	b920      	cbnz	r0, 8002402 <_isatty+0x16>
 80023f8:	f000 f816 	bl	8002428 <__errno>
 80023fc:	6004      	str	r4, [r0, #0]
 80023fe:	2000      	movs	r0, #0
 8002400:	bd70      	pop	{r4, r5, r6, pc}
 8002402:	4620      	mov	r0, r4
 8002404:	4629      	mov	r1, r5
 8002406:	beab      	bkpt	0x00ab
 8002408:	4604      	mov	r4, r0
 800240a:	2c01      	cmp	r4, #1
 800240c:	4620      	mov	r0, r4
 800240e:	d0f7      	beq.n	8002400 <_isatty+0x14>
 8002410:	f000 f80a 	bl	8002428 <__errno>
 8002414:	2513      	movs	r5, #19
 8002416:	4604      	mov	r4, r0
 8002418:	2600      	movs	r6, #0
 800241a:	4628      	mov	r0, r5
 800241c:	4631      	mov	r1, r6
 800241e:	beab      	bkpt	0x00ab
 8002420:	4605      	mov	r5, r0
 8002422:	6025      	str	r5, [r4, #0]
 8002424:	e7eb      	b.n	80023fe <_isatty+0x12>
	...

08002428 <__errno>:
 8002428:	4b01      	ldr	r3, [pc, #4]	@ (8002430 <__errno+0x8>)
 800242a:	6818      	ldr	r0, [r3, #0]
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	2000000c 	.word	0x2000000c

08002434 <_init>:
 8002434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002436:	bf00      	nop
 8002438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800243a:	bc08      	pop	{r3}
 800243c:	469e      	mov	lr, r3
 800243e:	4770      	bx	lr

08002440 <_fini>:
 8002440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002442:	bf00      	nop
 8002444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002446:	bc08      	pop	{r3}
 8002448:	469e      	mov	lr, r3
 800244a:	4770      	bx	lr
