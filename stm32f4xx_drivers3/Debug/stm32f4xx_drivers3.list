
stm32f4xx_drivers3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f84  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002114  08002114  00003114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002158  08002158  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002158  08002158  00003158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002160  08002160  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002160  08002160  00003160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002164  08002164  00003164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002168  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000405c  2**0
                  CONTENTS
 10 .bss          00000388  2000005c  2000005c  0000405c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003e4  200003e4  0000405c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001e1c  00000000  00000000  00004086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000078d  00000000  00000000  00005ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000278  00000000  00000000  00006630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001c8  00000000  00000000  000068a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000034fc  00000000  00000000  00006a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002a3d  00000000  00000000  00009f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000bc97  00000000  00000000  0000c9a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00018640  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000010d4  00000000  00000000  00018684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00019758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080020fc 	.word	0x080020fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080020fc 	.word	0x080020fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000276:	4b14      	ldr	r3, [pc, #80]	@ (80002c8 <SPI2_GPIOInits+0x58>)
 8000278:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800027a:	2302      	movs	r3, #2
 800027c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800027e:	2305      	movs	r3, #5
 8000280:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000282:	2300      	movs	r3, #0
 8000284:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;
 8000286:	2301      	movs	r3, #1
 8000288:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800028a:	2302      	movs	r3, #2
 800028c:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_13;
 800028e:	230d      	movs	r3, #13
 8000290:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f9dd 	bl	8000654 <GPIO_Init>

	//MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_15;
 800029a:	230f      	movs	r3, #15
 800029c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 f9d7 	bl	8000654 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_14;
 80002a6:	230e      	movs	r3, #14
 80002a8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 f9d1 	bl	8000654 <GPIO_Init>


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_12;
 80002b2:	230c      	movs	r3, #12
 80002b4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 f9cb 	bl	8000654 <GPIO_Init>


}
 80002be:	bf00      	nop
 80002c0:	3710      	adds	r7, #16
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40020400 	.word	0x40020400

080002cc <SPI2_Inits>:

void SPI2_Inits(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	SPI2handle.pSPIx = SPI2;
 80002d0:	4b0e      	ldr	r3, [pc, #56]	@ (800030c <SPI2_Inits+0x40>)
 80002d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000310 <SPI2_Inits+0x44>)
 80002d4:	601a      	str	r2, [r3, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80002d6:	4b0d      	ldr	r3, [pc, #52]	@ (800030c <SPI2_Inits+0x40>)
 80002d8:	2201      	movs	r2, #1
 80002da:	715a      	strb	r2, [r3, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002dc:	4b0b      	ldr	r3, [pc, #44]	@ (800030c <SPI2_Inits+0x40>)
 80002de:	2201      	movs	r2, #1
 80002e0:	711a      	strb	r2, [r3, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 80002e2:	4b0a      	ldr	r3, [pc, #40]	@ (800030c <SPI2_Inits+0x40>)
 80002e4:	2204      	movs	r2, #4
 80002e6:	719a      	strb	r2, [r3, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80002e8:	4b08      	ldr	r3, [pc, #32]	@ (800030c <SPI2_Inits+0x40>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	71da      	strb	r2, [r3, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80002ee:	4b07      	ldr	r3, [pc, #28]	@ (800030c <SPI2_Inits+0x40>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	721a      	strb	r2, [r3, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80002f4:	4b05      	ldr	r3, [pc, #20]	@ (800030c <SPI2_Inits+0x40>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	725a      	strb	r2, [r3, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 80002fa:	4b04      	ldr	r3, [pc, #16]	@ (800030c <SPI2_Inits+0x40>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2handle);
 8000300:	4802      	ldr	r0, [pc, #8]	@ (800030c <SPI2_Inits+0x40>)
 8000302:	f000 fd4d 	bl	8000da0 <SPI_Init>
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000078 	.word	0x20000078
 8000310:	40003800 	.word	0x40003800

08000314 <Slave_GPIO_InterruptPinInit>:


/*This function configures the gpio pin over which SPI peripheral issues data available interrupt */
void Slave_GPIO_InterruptPinInit(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
	GPIO_Handle_t spiIntPin;
	memset(&spiIntPin,0,sizeof(spiIntPin));
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	220c      	movs	r2, #12
 800031e:	2100      	movs	r1, #0
 8000320:	4618      	mov	r0, r3
 8000322:	f001 f8da 	bl	80014da <memset>

	//this is led gpio configuration
	spiIntPin.pGPIOx = GPIOD;
 8000326:	4b0d      	ldr	r3, [pc, #52]	@ (800035c <Slave_GPIO_InterruptPinInit+0x48>)
 8000328:	607b      	str	r3, [r7, #4]
	spiIntPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_No_6;
 800032a:	2306      	movs	r3, #6
 800032c:	723b      	strb	r3, [r7, #8]
	spiIntPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800032e:	2304      	movs	r3, #4
 8000330:	727b      	strb	r3, [r7, #9]
	spiIntPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000332:	2300      	movs	r3, #0
 8000334:	72bb      	strb	r3, [r7, #10]
	spiIntPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000336:	2300      	movs	r3, #0
 8000338:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&spiIntPin);
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	4618      	mov	r0, r3
 800033e:	f000 f989 	bl	8000654 <GPIO_Init>

	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5,NVIC_IRQ_PRIO15);
 8000342:	210f      	movs	r1, #15
 8000344:	2017      	movs	r0, #23
 8000346:	f000 fc89 	bl	8000c5c <GPIO_IRQPriorityConfig>
	GPIO_IRQITConfig(IRQ_NO_EXTI9_5, ENABLE);
 800034a:	2101      	movs	r1, #1
 800034c:	2017      	movs	r0, #23
 800034e:	f000 fc01 	bl	8000b54 <GPIO_IRQITConfig>

}
 8000352:	bf00      	nop
 8000354:	3710      	adds	r7, #16
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40020c00 	.word	0x40020c00

08000360 <main>:


int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0

	uint8_t dummy = 0xff;
 8000366:	23ff      	movs	r3, #255	@ 0xff
 8000368:	71fb      	strb	r3, [r7, #7]

	Slave_GPIO_InterruptPinInit();
 800036a:	f7ff ffd3 	bl	8000314 <Slave_GPIO_InterruptPinInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 800036e:	f7ff ff7f 	bl	8000270 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 8000372:	f7ff ffab 	bl	80002cc <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 8000376:	2101      	movs	r1, #1
 8000378:	4824      	ldr	r0, [pc, #144]	@ (800040c <main+0xac>)
 800037a:	f000 fe67 	bl	800104c <SPI_SSOEConfig>

	SPI_IRQITConfig(SPI2_IRQ, ENABLE);
 800037e:	2101      	movs	r1, #1
 8000380:	2024      	movs	r0, #36	@ 0x24
 8000382:	f000 fd77 	bl	8000e74 <SPI_IRQITConfig>

	while(1){

		rcvStop = 0;
 8000386:	4b22      	ldr	r3, [pc, #136]	@ (8000410 <main+0xb0>)
 8000388:	2200      	movs	r2, #0
 800038a:	701a      	strb	r2, [r3, #0]

		while(!dataAvailable); //wait till data available interrupt from transmitter device(slave)
 800038c:	bf00      	nop
 800038e:	4b21      	ldr	r3, [pc, #132]	@ (8000414 <main+0xb4>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	b2db      	uxtb	r3, r3
 8000394:	2b00      	cmp	r3, #0
 8000396:	d0fa      	beq.n	800038e <main+0x2e>

		GPIO_IRQITConfig(IRQ_NO_EXTI9_5, DISABLE);
 8000398:	2100      	movs	r1, #0
 800039a:	2017      	movs	r0, #23
 800039c:	f000 fbda 	bl	8000b54 <GPIO_IRQITConfig>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 80003a0:	2101      	movs	r1, #1
 80003a2:	481a      	ldr	r0, [pc, #104]	@ (800040c <main+0xac>)
 80003a4:	f000 fe37 	bl	8001016 <SPI_PeripheralControl>


		while(!rcvStop)
 80003a8:	e012      	b.n	80003d0 <main+0x70>
		{
			/* fetch the data from the SPI peripheral byte by byte in interrupt mode */
			while ( SPI_SendDataIT(&SPI2handle,&dummy,1) == SPI_BUSY_IN_TX);
 80003aa:	bf00      	nop
 80003ac:	1dfb      	adds	r3, r7, #7
 80003ae:	2201      	movs	r2, #1
 80003b0:	4619      	mov	r1, r3
 80003b2:	4819      	ldr	r0, [pc, #100]	@ (8000418 <main+0xb8>)
 80003b4:	f000 fe65 	bl	8001082 <SPI_SendDataIT>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b02      	cmp	r3, #2
 80003bc:	d0f6      	beq.n	80003ac <main+0x4c>
			while ( SPI_ReceiveDataIT(&SPI2handle,&ReadByte,1) == SPI_BUSY_IN_RX );
 80003be:	bf00      	nop
 80003c0:	2201      	movs	r2, #1
 80003c2:	4916      	ldr	r1, [pc, #88]	@ (800041c <main+0xbc>)
 80003c4:	4814      	ldr	r0, [pc, #80]	@ (8000418 <main+0xb8>)
 80003c6:	f000 fe7f 	bl	80010c8 <SPI_ReceiveDataIT>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d0f7      	beq.n	80003c0 <main+0x60>
		while(!rcvStop)
 80003d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000410 <main+0xb0>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d0e7      	beq.n	80003aa <main+0x4a>
		}


		// confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_BSY_FLAG) );
 80003da:	bf00      	nop
 80003dc:	2180      	movs	r1, #128	@ 0x80
 80003de:	480b      	ldr	r0, [pc, #44]	@ (800040c <main+0xac>)
 80003e0:	f000 fd34 	bl	8000e4c <SPI_GetFlagStatus>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d1f8      	bne.n	80003dc <main+0x7c>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 80003ea:	2100      	movs	r1, #0
 80003ec:	4807      	ldr	r0, [pc, #28]	@ (800040c <main+0xac>)
 80003ee:	f000 fe12 	bl	8001016 <SPI_PeripheralControl>

		printf("Rcvd data = %s\n",RcvBuff);
 80003f2:	490b      	ldr	r1, [pc, #44]	@ (8000420 <main+0xc0>)
 80003f4:	480b      	ldr	r0, [pc, #44]	@ (8000424 <main+0xc4>)
 80003f6:	f001 f81b 	bl	8001430 <iprintf>

		dataAvailable = 0;
 80003fa:	4b06      	ldr	r3, [pc, #24]	@ (8000414 <main+0xb4>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	701a      	strb	r2, [r3, #0]

		GPIO_IRQITConfig(IRQ_NO_EXTI9_5, ENABLE);
 8000400:	2101      	movs	r1, #1
 8000402:	2017      	movs	r0, #23
 8000404:	f000 fba6 	bl	8000b54 <GPIO_IRQITConfig>
		rcvStop = 0;
 8000408:	e7bd      	b.n	8000386 <main+0x26>
 800040a:	bf00      	nop
 800040c:	40003800 	.word	0x40003800
 8000410:	2000028d 	.word	0x2000028d
 8000414:	2000028e 	.word	0x2000028e
 8000418:	20000078 	.word	0x20000078
 800041c:	2000028c 	.word	0x2000028c
 8000420:	20000098 	.word	0x20000098
 8000424:	08002114 	.word	0x08002114

08000428 <SPI2_IRQHandler>:

}

/* Runs when a data byte is received from the peripheral over SPI*/
void SPI2_IRQHandler(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0

	SPI_IRQHandling(&SPI2handle);
 800042c:	4802      	ldr	r0, [pc, #8]	@ (8000438 <SPI2_IRQHandler+0x10>)
 800042e:	f000 fda5 	bl	8000f7c <SPI_IRQHandling>
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20000078 	.word	0x20000078

0800043c <SPI_ApplicationEventCallback>:



void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle,uint8_t event)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	460b      	mov	r3, r1
 8000446:	70fb      	strb	r3, [r7, #3]
	static uint32_t i = 0;
	/* In the RX complete event , copy data in to rcv buffer . '\0' indicates end of message(rcvStop = 1) */
	if(event == SPI_EVENT_RX_CMPLT)
 8000448:	78fb      	ldrb	r3, [r7, #3]
 800044a:	2b02      	cmp	r3, #2
 800044c:	d11f      	bne.n	800048e <SPI_ApplicationEventCallback+0x52>
	{
				RcvBuff[i++] = ReadByte;
 800044e:	4b12      	ldr	r3, [pc, #72]	@ (8000498 <SPI_ApplicationEventCallback+0x5c>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	1c5a      	adds	r2, r3, #1
 8000454:	4910      	ldr	r1, [pc, #64]	@ (8000498 <SPI_ApplicationEventCallback+0x5c>)
 8000456:	600a      	str	r2, [r1, #0]
 8000458:	4a10      	ldr	r2, [pc, #64]	@ (800049c <SPI_ApplicationEventCallback+0x60>)
 800045a:	7812      	ldrb	r2, [r2, #0]
 800045c:	b2d1      	uxtb	r1, r2
 800045e:	4a10      	ldr	r2, [pc, #64]	@ (80004a0 <SPI_ApplicationEventCallback+0x64>)
 8000460:	54d1      	strb	r1, [r2, r3]
				if(ReadByte == '\0' || ( i == MAX_LEN)){
 8000462:	4b0e      	ldr	r3, [pc, #56]	@ (800049c <SPI_ApplicationEventCallback+0x60>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	b2db      	uxtb	r3, r3
 8000468:	2b00      	cmp	r3, #0
 800046a:	d004      	beq.n	8000476 <SPI_ApplicationEventCallback+0x3a>
 800046c:	4b0a      	ldr	r3, [pc, #40]	@ (8000498 <SPI_ApplicationEventCallback+0x5c>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000474:	d10b      	bne.n	800048e <SPI_ApplicationEventCallback+0x52>
					rcvStop = 1;
 8000476:	4b0b      	ldr	r3, [pc, #44]	@ (80004a4 <SPI_ApplicationEventCallback+0x68>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
					RcvBuff[i-1] = '\0';
 800047c:	4b06      	ldr	r3, [pc, #24]	@ (8000498 <SPI_ApplicationEventCallback+0x5c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	3b01      	subs	r3, #1
 8000482:	4a07      	ldr	r2, [pc, #28]	@ (80004a0 <SPI_ApplicationEventCallback+0x64>)
 8000484:	2100      	movs	r1, #0
 8000486:	54d1      	strb	r1, [r2, r3]
					i = 0;
 8000488:	4b03      	ldr	r3, [pc, #12]	@ (8000498 <SPI_ApplicationEventCallback+0x5c>)
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
				}
	}

}
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	20000290 	.word	0x20000290
 800049c:	2000028c 	.word	0x2000028c
 80004a0:	20000098 	.word	0x20000098
 80004a4:	2000028d 	.word	0x2000028d

080004a8 <EXTI9_5_IRQHandler>:

/* Slave data available interrupt handler */
void EXTI9_5_IRQHandler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_No_6);
 80004ac:	2006      	movs	r0, #6
 80004ae:	f000 fbff 	bl	8000cb0 <GPIO_IRQHandling>
	dataAvailable = 1;
 80004b2:	4b02      	ldr	r3, [pc, #8]	@ (80004bc <EXTI9_5_IRQHandler+0x14>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	701a      	strb	r2, [r3, #0]
}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	2000028e 	.word	0x2000028e

080004c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]
 80004d0:	e00a      	b.n	80004e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004d2:	f3af 8000 	nop.w
 80004d6:	4601      	mov	r1, r0
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	1c5a      	adds	r2, r3, #1
 80004dc:	60ba      	str	r2, [r7, #8]
 80004de:	b2ca      	uxtb	r2, r1
 80004e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	3301      	adds	r3, #1
 80004e6:	617b      	str	r3, [r7, #20]
 80004e8:	697a      	ldr	r2, [r7, #20]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	dbf0      	blt.n	80004d2 <_read+0x12>
  }

  return len;
 80004f0:	687b      	ldr	r3, [r7, #4]
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	3718      	adds	r7, #24
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b086      	sub	sp, #24
 80004fe:	af00      	add	r7, sp, #0
 8000500:	60f8      	str	r0, [r7, #12]
 8000502:	60b9      	str	r1, [r7, #8]
 8000504:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
 800050a:	e009      	b.n	8000520 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	1c5a      	adds	r2, r3, #1
 8000510:	60ba      	str	r2, [r7, #8]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4618      	mov	r0, r3
 8000516:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	3301      	adds	r3, #1
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	697a      	ldr	r2, [r7, #20]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	429a      	cmp	r2, r3
 8000526:	dbf1      	blt.n	800050c <_write+0x12>
  }
  return len;
 8000528:	687b      	ldr	r3, [r7, #4]
}
 800052a:	4618      	mov	r0, r3
 800052c:	3718      	adds	r7, #24
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <_close>:

int _close(int file)
{
 8000532:	b480      	push	{r7}
 8000534:	b083      	sub	sp, #12
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800053a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800053e:	4618      	mov	r0, r3
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr

08000548 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000558:	605a      	str	r2, [r3, #4]
  return 0;
 800055a:	2300      	movs	r3, #0
}
 800055c:	4618      	mov	r0, r3
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr

08000566 <_isatty>:

int _isatty(int file)
{
 8000566:	b480      	push	{r7}
 8000568:	b083      	sub	sp, #12
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800056e:	2301      	movs	r3, #1
}
 8000570:	4618      	mov	r0, r3
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr

0800057a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800057a:	b480      	push	{r7}
 800057c:	b085      	sub	sp, #20
 800057e:	af00      	add	r7, sp, #0
 8000580:	60f8      	str	r0, [r7, #12]
 8000582:	60b9      	str	r1, [r7, #8]
 8000584:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000586:	2300      	movs	r3, #0
}
 8000588:	4618      	mov	r0, r3
 800058a:	3714      	adds	r7, #20
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr
	...

08000594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800059c:	4a14      	ldr	r2, [pc, #80]	@ (80005f0 <_sbrk+0x5c>)
 800059e:	4b15      	ldr	r3, [pc, #84]	@ (80005f4 <_sbrk+0x60>)
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005a8:	4b13      	ldr	r3, [pc, #76]	@ (80005f8 <_sbrk+0x64>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d102      	bne.n	80005b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005b0:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <_sbrk+0x64>)
 80005b2:	4a12      	ldr	r2, [pc, #72]	@ (80005fc <_sbrk+0x68>)
 80005b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005b6:	4b10      	ldr	r3, [pc, #64]	@ (80005f8 <_sbrk+0x64>)
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4413      	add	r3, r2
 80005be:	693a      	ldr	r2, [r7, #16]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d207      	bcs.n	80005d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005c4:	f000 ffd8 	bl	8001578 <__errno>
 80005c8:	4603      	mov	r3, r0
 80005ca:	220c      	movs	r2, #12
 80005cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295
 80005d2:	e009      	b.n	80005e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005d4:	4b08      	ldr	r3, [pc, #32]	@ (80005f8 <_sbrk+0x64>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005da:	4b07      	ldr	r3, [pc, #28]	@ (80005f8 <_sbrk+0x64>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	4a05      	ldr	r2, [pc, #20]	@ (80005f8 <_sbrk+0x64>)
 80005e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005e6:	68fb      	ldr	r3, [r7, #12]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3718      	adds	r7, #24
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20020000 	.word	0x20020000
 80005f4:	00000400 	.word	0x00000400
 80005f8:	20000294 	.word	0x20000294
 80005fc:	200003e8 	.word	0x200003e8

08000600 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000600:	480d      	ldr	r0, [pc, #52]	@ (8000638 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000602:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000604:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000608:	480c      	ldr	r0, [pc, #48]	@ (800063c <LoopForever+0x6>)
  ldr r1, =_edata
 800060a:	490d      	ldr	r1, [pc, #52]	@ (8000640 <LoopForever+0xa>)
  ldr r2, =_sidata
 800060c:	4a0d      	ldr	r2, [pc, #52]	@ (8000644 <LoopForever+0xe>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000610:	e002      	b.n	8000618 <LoopCopyDataInit>

08000612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000616:	3304      	adds	r3, #4

08000618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800061c:	d3f9      	bcc.n	8000612 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061e:	4a0a      	ldr	r2, [pc, #40]	@ (8000648 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000620:	4c0a      	ldr	r4, [pc, #40]	@ (800064c <LoopForever+0x16>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000624:	e001      	b.n	800062a <LoopFillZerobss>

08000626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000628:	3204      	adds	r2, #4

0800062a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800062c:	d3fb      	bcc.n	8000626 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800062e:	f000 ffa9 	bl	8001584 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000632:	f7ff fe95 	bl	8000360 <main>

08000636 <LoopForever>:

LoopForever:
  b LoopForever
 8000636:	e7fe      	b.n	8000636 <LoopForever>
  ldr   r0, =_estack
 8000638:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800063c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000640:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000644:	08002168 	.word	0x08002168
  ldr r2, =_sbss
 8000648:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800064c:	200003e4 	.word	0x200003e4

08000650 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000650:	e7fe      	b.n	8000650 <ADC_IRQHandler>
	...

08000654 <GPIO_Init>:
	* @param  *pGPIOHandle : pointer to the GPIO handle struct
	* @param
	* @param
	* @return None
	*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	//enable peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2101      	movs	r1, #1
 8000662:	4618      	mov	r0, r3
 8000664:	f000 f98e 	bl	8000984 <GPIO_PeriClockControl>
		//1 configure the mode of GPIO pin
	uint32_t temp = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	795b      	ldrb	r3, [r3, #5]
 8000670:	2b03      	cmp	r3, #3
 8000672:	d822      	bhi.n	80006ba <GPIO_Init+0x66>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	795b      	ldrb	r3, [r3, #5]
 8000678:	461a      	mov	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	791b      	ldrb	r3, [r3, #4]
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	fa02 f303 	lsl.w	r3, r2, r3
 8000684:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3<<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	791b      	ldrb	r3, [r3, #4]
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	2103      	movs	r1, #3
 8000694:	fa01 f303 	lsl.w	r3, r1, r3
 8000698:	43db      	mvns	r3, r3
 800069a:	4619      	mov	r1, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	400a      	ands	r2, r1
 80006a2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	6819      	ldr	r1, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	697a      	ldr	r2, [r7, #20]
 80006b0:	430a      	orrs	r2, r1
 80006b2:	601a      	str	r2, [r3, #0]
		temp = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	e0c1      	b.n	800083e <GPIO_Init+0x1ea>
	}
	else{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	795b      	ldrb	r3, [r3, #5]
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d117      	bne.n	80006f2 <GPIO_Init+0x9e>
			//1. configure falling edge reg
			EXTI->FTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006c2:	4b47      	ldr	r3, [pc, #284]	@ (80007e0 <GPIO_Init+0x18c>)
 80006c4:	68db      	ldr	r3, [r3, #12]
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	7912      	ldrb	r2, [r2, #4]
 80006ca:	4611      	mov	r1, r2
 80006cc:	2201      	movs	r2, #1
 80006ce:	408a      	lsls	r2, r1
 80006d0:	4611      	mov	r1, r2
 80006d2:	4a43      	ldr	r2, [pc, #268]	@ (80007e0 <GPIO_Init+0x18c>)
 80006d4:	430b      	orrs	r3, r1
 80006d6:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006d8:	4b41      	ldr	r3, [pc, #260]	@ (80007e0 <GPIO_Init+0x18c>)
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	7912      	ldrb	r2, [r2, #4]
 80006e0:	4611      	mov	r1, r2
 80006e2:	2201      	movs	r2, #1
 80006e4:	408a      	lsls	r2, r1
 80006e6:	43d2      	mvns	r2, r2
 80006e8:	4611      	mov	r1, r2
 80006ea:	4a3d      	ldr	r2, [pc, #244]	@ (80007e0 <GPIO_Init+0x18c>)
 80006ec:	400b      	ands	r3, r1
 80006ee:	6093      	str	r3, [r2, #8]
 80006f0:	e035      	b.n	800075e <GPIO_Init+0x10a>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	795b      	ldrb	r3, [r3, #5]
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	d117      	bne.n	800072a <GPIO_Init+0xd6>
			EXTI->FTSR &= ~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006fa:	4b39      	ldr	r3, [pc, #228]	@ (80007e0 <GPIO_Init+0x18c>)
 80006fc:	68db      	ldr	r3, [r3, #12]
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	7912      	ldrb	r2, [r2, #4]
 8000702:	4611      	mov	r1, r2
 8000704:	2201      	movs	r2, #1
 8000706:	408a      	lsls	r2, r1
 8000708:	43d2      	mvns	r2, r2
 800070a:	4611      	mov	r1, r2
 800070c:	4a34      	ldr	r2, [pc, #208]	@ (80007e0 <GPIO_Init+0x18c>)
 800070e:	400b      	ands	r3, r1
 8000710:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000712:	4b33      	ldr	r3, [pc, #204]	@ (80007e0 <GPIO_Init+0x18c>)
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	7912      	ldrb	r2, [r2, #4]
 800071a:	4611      	mov	r1, r2
 800071c:	2201      	movs	r2, #1
 800071e:	408a      	lsls	r2, r1
 8000720:	4611      	mov	r1, r2
 8000722:	4a2f      	ldr	r2, [pc, #188]	@ (80007e0 <GPIO_Init+0x18c>)
 8000724:	430b      	orrs	r3, r1
 8000726:	6093      	str	r3, [r2, #8]
 8000728:	e019      	b.n	800075e <GPIO_Init+0x10a>

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	795b      	ldrb	r3, [r3, #5]
 800072e:	2b06      	cmp	r3, #6
 8000730:	d115      	bne.n	800075e <GPIO_Init+0x10a>
			EXTI->FTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000732:	4b2b      	ldr	r3, [pc, #172]	@ (80007e0 <GPIO_Init+0x18c>)
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	7912      	ldrb	r2, [r2, #4]
 800073a:	4611      	mov	r1, r2
 800073c:	2201      	movs	r2, #1
 800073e:	408a      	lsls	r2, r1
 8000740:	4611      	mov	r1, r2
 8000742:	4a27      	ldr	r2, [pc, #156]	@ (80007e0 <GPIO_Init+0x18c>)
 8000744:	430b      	orrs	r3, r1
 8000746:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000748:	4b25      	ldr	r3, [pc, #148]	@ (80007e0 <GPIO_Init+0x18c>)
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	7912      	ldrb	r2, [r2, #4]
 8000750:	4611      	mov	r1, r2
 8000752:	2201      	movs	r2, #1
 8000754:	408a      	lsls	r2, r1
 8000756:	4611      	mov	r1, r2
 8000758:	4a21      	ldr	r2, [pc, #132]	@ (80007e0 <GPIO_Init+0x18c>)
 800075a:	430b      	orrs	r3, r1
 800075c:	6093      	str	r3, [r2, #8]

		}
		//Configure GPIO port slection in SYSCFG
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	791b      	ldrb	r3, [r3, #4]
 8000762:	089b      	lsrs	r3, r3, #2
 8000764:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	791b      	ldrb	r3, [r3, #4]
 800076a:	f003 0303 	and.w	r3, r3, #3
 800076e:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a1b      	ldr	r2, [pc, #108]	@ (80007e4 <GPIO_Init+0x190>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d044      	beq.n	8000804 <GPIO_Init+0x1b0>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a1a      	ldr	r2, [pc, #104]	@ (80007e8 <GPIO_Init+0x194>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d02b      	beq.n	80007dc <GPIO_Init+0x188>
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a18      	ldr	r2, [pc, #96]	@ (80007ec <GPIO_Init+0x198>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d024      	beq.n	80007d8 <GPIO_Init+0x184>
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a17      	ldr	r2, [pc, #92]	@ (80007f0 <GPIO_Init+0x19c>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d01d      	beq.n	80007d4 <GPIO_Init+0x180>
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a15      	ldr	r2, [pc, #84]	@ (80007f4 <GPIO_Init+0x1a0>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d016      	beq.n	80007d0 <GPIO_Init+0x17c>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a14      	ldr	r2, [pc, #80]	@ (80007f8 <GPIO_Init+0x1a4>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d00f      	beq.n	80007cc <GPIO_Init+0x178>
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a12      	ldr	r2, [pc, #72]	@ (80007fc <GPIO_Init+0x1a8>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d008      	beq.n	80007c8 <GPIO_Init+0x174>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a11      	ldr	r2, [pc, #68]	@ (8000800 <GPIO_Init+0x1ac>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d101      	bne.n	80007c4 <GPIO_Init+0x170>
 80007c0:	2307      	movs	r3, #7
 80007c2:	e020      	b.n	8000806 <GPIO_Init+0x1b2>
 80007c4:	2300      	movs	r3, #0
 80007c6:	e01e      	b.n	8000806 <GPIO_Init+0x1b2>
 80007c8:	2306      	movs	r3, #6
 80007ca:	e01c      	b.n	8000806 <GPIO_Init+0x1b2>
 80007cc:	2305      	movs	r3, #5
 80007ce:	e01a      	b.n	8000806 <GPIO_Init+0x1b2>
 80007d0:	2304      	movs	r3, #4
 80007d2:	e018      	b.n	8000806 <GPIO_Init+0x1b2>
 80007d4:	2303      	movs	r3, #3
 80007d6:	e016      	b.n	8000806 <GPIO_Init+0x1b2>
 80007d8:	2302      	movs	r3, #2
 80007da:	e014      	b.n	8000806 <GPIO_Init+0x1b2>
 80007dc:	2301      	movs	r3, #1
 80007de:	e012      	b.n	8000806 <GPIO_Init+0x1b2>
 80007e0:	40013c00 	.word	0x40013c00
 80007e4:	40020000 	.word	0x40020000
 80007e8:	40020400 	.word	0x40020400
 80007ec:	40020800 	.word	0x40020800
 80007f0:	40020c00 	.word	0x40020c00
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40021400 	.word	0x40021400
 80007fc:	40021800 	.word	0x40021800
 8000800:	40021c00 	.word	0x40021c00
 8000804:	2300      	movs	r3, #0
 8000806:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000808:	4b5b      	ldr	r3, [pc, #364]	@ (8000978 <GPIO_Init+0x324>)
 800080a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800080c:	4a5a      	ldr	r2, [pc, #360]	@ (8000978 <GPIO_Init+0x324>)
 800080e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000812:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode<<(temp2*4);
 8000814:	7c7a      	ldrb	r2, [r7, #17]
 8000816:	7cbb      	ldrb	r3, [r7, #18]
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	fa02 f103 	lsl.w	r1, r2, r3
 800081e:	4a57      	ldr	r2, [pc, #348]	@ (800097c <GPIO_Init+0x328>)
 8000820:	7cfb      	ldrb	r3, [r7, #19]
 8000822:	3302      	adds	r3, #2
 8000824:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//enable interrupt delievery in IMR
		EXTI->IMR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000828:	4b55      	ldr	r3, [pc, #340]	@ (8000980 <GPIO_Init+0x32c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	7912      	ldrb	r2, [r2, #4]
 8000830:	4611      	mov	r1, r2
 8000832:	2201      	movs	r2, #1
 8000834:	408a      	lsls	r2, r1
 8000836:	4611      	mov	r1, r2
 8000838:	4a51      	ldr	r2, [pc, #324]	@ (8000980 <GPIO_Init+0x32c>)
 800083a:	430b      	orrs	r3, r1
 800083c:	6013      	str	r3, [r2, #0]
	}

		//2 configure the speed of GPIO pin
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	799b      	ldrb	r3, [r3, #6]
 8000842:	461a      	mov	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	791b      	ldrb	r3, [r3, #4]
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3<<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	689a      	ldr	r2, [r3, #8]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	791b      	ldrb	r3, [r3, #4]
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	2103      	movs	r1, #3
 800085e:	fa01 f303 	lsl.w	r3, r1, r3
 8000862:	43db      	mvns	r3, r3
 8000864:	4619      	mov	r1, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	400a      	ands	r2, r1
 800086c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	6899      	ldr	r1, [r3, #8]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	697a      	ldr	r2, [r7, #20]
 800087a:	430a      	orrs	r2, r1
 800087c:	609a      	str	r2, [r3, #8]
	temp = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]

		//3 configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	79db      	ldrb	r3, [r3, #7]
 8000886:	461a      	mov	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	791b      	ldrb	r3, [r3, #4]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3<<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	68da      	ldr	r2, [r3, #12]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	791b      	ldrb	r3, [r3, #4]
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	2103      	movs	r1, #3
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	43db      	mvns	r3, r3
 80008a8:	4619      	mov	r1, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	400a      	ands	r2, r1
 80008b0:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	68d9      	ldr	r1, [r3, #12]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	697a      	ldr	r2, [r7, #20]
 80008be:	430a      	orrs	r2, r1
 80008c0:	60da      	str	r2, [r3, #12]
	temp = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
		//4 configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	7a1b      	ldrb	r3, [r3, #8]
 80008ca:	461a      	mov	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	791b      	ldrb	r3, [r3, #4]
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1<<(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	685a      	ldr	r2, [r3, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	791b      	ldrb	r3, [r3, #4]
 80008e0:	4619      	mov	r1, r3
 80008e2:	2301      	movs	r3, #1
 80008e4:	408b      	lsls	r3, r1
 80008e6:	43db      	mvns	r3, r3
 80008e8:	4619      	mov	r1, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	400a      	ands	r2, r1
 80008f0:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	6859      	ldr	r1, [r3, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	697a      	ldr	r2, [r7, #20]
 80008fe:	430a      	orrs	r2, r1
 8000900:	605a      	str	r2, [r3, #4]
		//5 configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	795b      	ldrb	r3, [r3, #5]
 8000906:	2b02      	cmp	r3, #2
 8000908:	d131      	bne.n	800096e <GPIO_Init+0x31a>
		uint8_t temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)/8;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	791b      	ldrb	r3, [r3, #4]
 800090e:	08db      	lsrs	r3, r3, #3
 8000910:	743b      	strb	r3, [r7, #16]
		uint8_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%8;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	791b      	ldrb	r3, [r3, #4]
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~((0xF << (4 * temp2)));
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	7c3a      	ldrb	r2, [r7, #16]
 8000922:	3208      	adds	r2, #8
 8000924:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	220f      	movs	r2, #15
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43db      	mvns	r3, r3
 8000934:	4618      	mov	r0, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	7c3a      	ldrb	r2, [r7, #16]
 800093c:	4001      	ands	r1, r0
 800093e:	3208      	adds	r2, #8
 8000940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	7c3a      	ldrb	r2, [r7, #16]
 800094a:	3208      	adds	r2, #8
 800094c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	7a5b      	ldrb	r3, [r3, #9]
 8000954:	461a      	mov	r2, r3
 8000956:	7bfb      	ldrb	r3, [r7, #15]
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	4618      	mov	r0, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	7c3a      	ldrb	r2, [r7, #16]
 8000966:	4301      	orrs	r1, r0
 8000968:	3208      	adds	r2, #8
 800096a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800096e:	bf00      	nop
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800
 800097c:	40013800 	.word	0x40013800
 8000980:	40013c00 	.word	0x40013c00

08000984 <GPIO_PeriClockControl>:
	* @param  *pGPIOx : GPIO peripheral base address
	* @param  EnorDi  : ENABLE(1) or DISABLE(0) macros
	* @param
	* @return None
	*/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi== ENABLE){
 8000990:	78fb      	ldrb	r3, [r7, #3]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d162      	bne.n	8000a5c <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA){
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a64      	ldr	r2, [pc, #400]	@ (8000b2c <GPIO_PeriClockControl+0x1a8>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d106      	bne.n	80009ac <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800099e:	4b64      	ldr	r3, [pc, #400]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a63      	ldr	r2, [pc, #396]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
		else if (pGPIOx == GPIOI){
			GPIOI_PCLK_DI();
		}
	}

}
 80009aa:	e0b9      	b.n	8000b20 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB){
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a61      	ldr	r2, [pc, #388]	@ (8000b34 <GPIO_PeriClockControl+0x1b0>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d106      	bne.n	80009c2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80009b4:	4b5e      	ldr	r3, [pc, #376]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b8:	4a5d      	ldr	r2, [pc, #372]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 80009ba:	f043 0302 	orr.w	r3, r3, #2
 80009be:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80009c0:	e0ae      	b.n	8000b20 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC){
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a5c      	ldr	r2, [pc, #368]	@ (8000b38 <GPIO_PeriClockControl+0x1b4>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d106      	bne.n	80009d8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80009ca:	4b59      	ldr	r3, [pc, #356]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a58      	ldr	r2, [pc, #352]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 80009d0:	f043 0304 	orr.w	r3, r3, #4
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80009d6:	e0a3      	b.n	8000b20 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD){
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a58      	ldr	r2, [pc, #352]	@ (8000b3c <GPIO_PeriClockControl+0x1b8>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d106      	bne.n	80009ee <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80009e0:	4b53      	ldr	r3, [pc, #332]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e4:	4a52      	ldr	r2, [pc, #328]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 80009e6:	f043 0308 	orr.w	r3, r3, #8
 80009ea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80009ec:	e098      	b.n	8000b20 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE){
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a53      	ldr	r2, [pc, #332]	@ (8000b40 <GPIO_PeriClockControl+0x1bc>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d106      	bne.n	8000a04 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80009f6:	4b4e      	ldr	r3, [pc, #312]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a4d      	ldr	r2, [pc, #308]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 80009fc:	f043 0310 	orr.w	r3, r3, #16
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a02:	e08d      	b.n	8000b20 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF){
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a4f      	ldr	r2, [pc, #316]	@ (8000b44 <GPIO_PeriClockControl+0x1c0>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d106      	bne.n	8000a1a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000a0c:	4b48      	ldr	r3, [pc, #288]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a10:	4a47      	ldr	r2, [pc, #284]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000a12:	f043 0320 	orr.w	r3, r3, #32
 8000a16:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a18:	e082      	b.n	8000b20 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG){
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a4a      	ldr	r2, [pc, #296]	@ (8000b48 <GPIO_PeriClockControl+0x1c4>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d106      	bne.n	8000a30 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000a22:	4b43      	ldr	r3, [pc, #268]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a42      	ldr	r2, [pc, #264]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000a28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a2e:	e077      	b.n	8000b20 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH){
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a46      	ldr	r2, [pc, #280]	@ (8000b4c <GPIO_PeriClockControl+0x1c8>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d106      	bne.n	8000a46 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000a38:	4b3d      	ldr	r3, [pc, #244]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3c:	4a3c      	ldr	r2, [pc, #240]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a42:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a44:	e06c      	b.n	8000b20 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI){
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a41      	ldr	r2, [pc, #260]	@ (8000b50 <GPIO_PeriClockControl+0x1cc>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d168      	bne.n	8000b20 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000a4e:	4b38      	ldr	r3, [pc, #224]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a37      	ldr	r2, [pc, #220]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000a54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a5a:	e061      	b.n	8000b20 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA){
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a33      	ldr	r2, [pc, #204]	@ (8000b2c <GPIO_PeriClockControl+0x1a8>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d106      	bne.n	8000a72 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000a64:	4b32      	ldr	r3, [pc, #200]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a68:	4a31      	ldr	r2, [pc, #196]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000a6a:	f023 0301 	bic.w	r3, r3, #1
 8000a6e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a70:	e056      	b.n	8000b20 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB){
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a2f      	ldr	r2, [pc, #188]	@ (8000b34 <GPIO_PeriClockControl+0x1b0>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d106      	bne.n	8000a88 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a2c      	ldr	r2, [pc, #176]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000a80:	f023 0302 	bic.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a86:	e04b      	b.n	8000b20 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC){
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a2b      	ldr	r2, [pc, #172]	@ (8000b38 <GPIO_PeriClockControl+0x1b4>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d106      	bne.n	8000a9e <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000a90:	4b27      	ldr	r3, [pc, #156]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a94:	4a26      	ldr	r2, [pc, #152]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000a96:	f023 0304 	bic.w	r3, r3, #4
 8000a9a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a9c:	e040      	b.n	8000b20 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD){
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a26      	ldr	r2, [pc, #152]	@ (8000b3c <GPIO_PeriClockControl+0x1b8>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d106      	bne.n	8000ab4 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000aa6:	4b22      	ldr	r3, [pc, #136]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a21      	ldr	r2, [pc, #132]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000aac:	f023 0308 	bic.w	r3, r3, #8
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ab2:	e035      	b.n	8000b20 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE){
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a22      	ldr	r2, [pc, #136]	@ (8000b40 <GPIO_PeriClockControl+0x1bc>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d106      	bne.n	8000aca <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000abc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000ac2:	f023 0310 	bic.w	r3, r3, #16
 8000ac6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ac8:	e02a      	b.n	8000b20 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF){
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a1d      	ldr	r2, [pc, #116]	@ (8000b44 <GPIO_PeriClockControl+0x1c0>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d106      	bne.n	8000ae0 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000ad2:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a16      	ldr	r2, [pc, #88]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000ad8:	f023 0320 	bic.w	r3, r3, #32
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ade:	e01f      	b.n	8000b20 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG){
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a19      	ldr	r2, [pc, #100]	@ (8000b48 <GPIO_PeriClockControl+0x1c4>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d106      	bne.n	8000af6 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000ae8:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aec:	4a10      	ldr	r2, [pc, #64]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000aee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000af2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000af4:	e014      	b.n	8000b20 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH){
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a14      	ldr	r2, [pc, #80]	@ (8000b4c <GPIO_PeriClockControl+0x1c8>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d106      	bne.n	8000b0c <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000afe:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a0b      	ldr	r2, [pc, #44]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000b04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b0a:	e009      	b.n	8000b20 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI){
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a10      	ldr	r2, [pc, #64]	@ (8000b50 <GPIO_PeriClockControl+0x1cc>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d105      	bne.n	8000b20 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b18:	4a05      	ldr	r2, [pc, #20]	@ (8000b30 <GPIO_PeriClockControl+0x1ac>)
 8000b1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000b1e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40020000 	.word	0x40020000
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020400 	.word	0x40020400
 8000b38:	40020800 	.word	0x40020800
 8000b3c:	40020c00 	.word	0x40020c00
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40021400 	.word	0x40021400
 8000b48:	40021800 	.word	0x40021800
 8000b4c:	40021c00 	.word	0x40021c00
 8000b50:	40022000 	.word	0x40022000

08000b54 <GPIO_IRQITConfig>:
 * @brief   enable/disable an IRQ in the NVIC for a given GPIO line.
 * @param  IRQNum  : IRQ number corresponding to EXTI line
 * @param  EnorDi  : ENABLE to enable the interrupt; DISABLE to disable it
 * @return None
 */
void GPIO_IRQITConfig(uint8_t IRQNum, uint8_t EnorDi){
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	460a      	mov	r2, r1
 8000b5e:	71fb      	strb	r3, [r7, #7]
 8000b60:	4613      	mov	r3, r2
 8000b62:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE){
 8000b64:	79bb      	ldrb	r3, [r7, #6]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d133      	bne.n	8000bd2 <GPIO_IRQITConfig+0x7e>
		if(IRQNum <=31){
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b1f      	cmp	r3, #31
 8000b6e:	d80a      	bhi.n	8000b86 <GPIO_IRQITConfig+0x32>
			*NVIC_ISER0 |= (1<<IRQNum);
 8000b70:	4b34      	ldr	r3, [pc, #208]	@ (8000c44 <GPIO_IRQITConfig+0xf0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	79fa      	ldrb	r2, [r7, #7]
 8000b76:	2101      	movs	r1, #1
 8000b78:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4a31      	ldr	r2, [pc, #196]	@ (8000c44 <GPIO_IRQITConfig+0xf0>)
 8000b80:	430b      	orrs	r3, r1
 8000b82:	6013      	str	r3, [r2, #0]
		}

	}


}
 8000b84:	e059      	b.n	8000c3a <GPIO_IRQITConfig+0xe6>
		else if(IRQNum >31 && IRQNum<64){
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	2b1f      	cmp	r3, #31
 8000b8a:	d90f      	bls.n	8000bac <GPIO_IRQITConfig+0x58>
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b90:	d80c      	bhi.n	8000bac <GPIO_IRQITConfig+0x58>
			*NVIC_ISER1 |= (1<<(IRQNum%32));
 8000b92:	4b2d      	ldr	r3, [pc, #180]	@ (8000c48 <GPIO_IRQITConfig+0xf4>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	79fa      	ldrb	r2, [r7, #7]
 8000b98:	f002 021f 	and.w	r2, r2, #31
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4a28      	ldr	r2, [pc, #160]	@ (8000c48 <GPIO_IRQITConfig+0xf4>)
 8000ba6:	430b      	orrs	r3, r1
 8000ba8:	6013      	str	r3, [r2, #0]
 8000baa:	e046      	b.n	8000c3a <GPIO_IRQITConfig+0xe6>
		else if(IRQNum>=64 && IRQNum<96){
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bb0:	d943      	bls.n	8000c3a <GPIO_IRQITConfig+0xe6>
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b5f      	cmp	r3, #95	@ 0x5f
 8000bb6:	d840      	bhi.n	8000c3a <GPIO_IRQITConfig+0xe6>
			*NVIC_ISER3 |= (1<<(IRQNum%64));
 8000bb8:	4b24      	ldr	r3, [pc, #144]	@ (8000c4c <GPIO_IRQITConfig+0xf8>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	79fa      	ldrb	r2, [r7, #7]
 8000bbe:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4a20      	ldr	r2, [pc, #128]	@ (8000c4c <GPIO_IRQITConfig+0xf8>)
 8000bcc:	430b      	orrs	r3, r1
 8000bce:	6013      	str	r3, [r2, #0]
}
 8000bd0:	e033      	b.n	8000c3a <GPIO_IRQITConfig+0xe6>
		if(IRQNum <=31){
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b1f      	cmp	r3, #31
 8000bd6:	d80a      	bhi.n	8000bee <GPIO_IRQITConfig+0x9a>
			*NVIC_ICER0 |= (1<<IRQNum);
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <GPIO_IRQITConfig+0xfc>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	79fa      	ldrb	r2, [r7, #7]
 8000bde:	2101      	movs	r1, #1
 8000be0:	fa01 f202 	lsl.w	r2, r1, r2
 8000be4:	4611      	mov	r1, r2
 8000be6:	4a1a      	ldr	r2, [pc, #104]	@ (8000c50 <GPIO_IRQITConfig+0xfc>)
 8000be8:	430b      	orrs	r3, r1
 8000bea:	6013      	str	r3, [r2, #0]
}
 8000bec:	e025      	b.n	8000c3a <GPIO_IRQITConfig+0xe6>
		else if(IRQNum >31 && IRQNum<64){
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b1f      	cmp	r3, #31
 8000bf2:	d90f      	bls.n	8000c14 <GPIO_IRQITConfig+0xc0>
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bf8:	d80c      	bhi.n	8000c14 <GPIO_IRQITConfig+0xc0>
			*NVIC_ICER1 |= (1<<(IRQNum%32));
 8000bfa:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <GPIO_IRQITConfig+0x100>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	79fa      	ldrb	r2, [r7, #7]
 8000c00:	f002 021f 	and.w	r2, r2, #31
 8000c04:	2101      	movs	r1, #1
 8000c06:	fa01 f202 	lsl.w	r2, r1, r2
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	4a11      	ldr	r2, [pc, #68]	@ (8000c54 <GPIO_IRQITConfig+0x100>)
 8000c0e:	430b      	orrs	r3, r1
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	e012      	b.n	8000c3a <GPIO_IRQITConfig+0xe6>
		else if(IRQNum>=64 && IRQNum<96){
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c18:	d90f      	bls.n	8000c3a <GPIO_IRQITConfig+0xe6>
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b5f      	cmp	r3, #95	@ 0x5f
 8000c1e:	d80c      	bhi.n	8000c3a <GPIO_IRQITConfig+0xe6>
			*NVIC_ICER3 |= (1<<(IRQNum%64));
 8000c20:	4b0d      	ldr	r3, [pc, #52]	@ (8000c58 <GPIO_IRQITConfig+0x104>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	79fa      	ldrb	r2, [r7, #7]
 8000c26:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c30:	4611      	mov	r1, r2
 8000c32:	4a09      	ldr	r2, [pc, #36]	@ (8000c58 <GPIO_IRQITConfig+0x104>)
 8000c34:	430b      	orrs	r3, r1
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	e7ff      	b.n	8000c3a <GPIO_IRQITConfig+0xe6>
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000e104 	.word	0xe000e104
 8000c4c:	e000e10c 	.word	0xe000e10c
 8000c50:	e000e180 	.word	0xe000e180
 8000c54:	e000e184 	.word	0xe000e184
 8000c58:	e000e18c 	.word	0xe000e18c

08000c5c <GPIO_IRQPriorityConfig>:

void GPIO_IRQPriorityConfig(uint8_t IRQNum, uint32_t IRQPriority){
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
	uint8_t iprx = IRQNum / 4;
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	089b      	lsrs	r3, r3, #2
 8000c6c:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNum %4;
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	f003 0303 	and.w	r3, r3, #3
 8000c74:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount = (8*iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000c76:	7bbb      	ldrb	r3, [r7, #14]
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASE_ADDR + iprx ) |= IRQPriority << shift_amount;
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000c88:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000c8c:	6819      	ldr	r1, [r3, #0]
 8000c8e:	7b7b      	ldrb	r3, [r7, #13]
 8000c90:	683a      	ldr	r2, [r7, #0]
 8000c92:	409a      	lsls	r2, r3
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000c9c:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	601a      	str	r2, [r3, #0]


}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
	...

08000cb0 <GPIO_IRQHandling>:
 * @brief  Handle the pending EXTI interrupt for a specific GPIO pin.
 *         Clears the interrupt pending bit.
 * @param  PinNum : GPIO pin number for which to clear the EXTI flag
 * @return None
 */
void GPIO_IRQHandling(uint8_t PinNum){
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
	//clear the EXTI PR reg
	if(EXTI->PR & (1<<PinNum)){
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <GPIO_IRQHandling+0x3c>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	79fa      	ldrb	r2, [r7, #7]
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d009      	beq.n	8000ce0 <GPIO_IRQHandling+0x30>
		//clear by writing 1
		EXTI->PR |= (1<<PinNum);
 8000ccc:	4b07      	ldr	r3, [pc, #28]	@ (8000cec <GPIO_IRQHandling+0x3c>)
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	79fa      	ldrb	r2, [r7, #7]
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cd8:	4611      	mov	r1, r2
 8000cda:	4a04      	ldr	r2, [pc, #16]	@ (8000cec <GPIO_IRQHandling+0x3c>)
 8000cdc:	430b      	orrs	r3, r1
 8000cde:	6153      	str	r3, [r2, #20]
	}


}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40013c00 	.word	0x40013c00

08000cf0 <SPI_PeriClockControl>:
	* @param  *pSPIx : pointer to the SPI base address
	* @param  EnorDi : takes either ENABLE(1) or DISABLE(0)to enable or disable clock
	* @param
	* @return None
	*/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	70fb      	strb	r3, [r7, #3]
	if(EnorDi== ENABLE){
 8000cfc:	78fb      	ldrb	r3, [r7, #3]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d120      	bne.n	8000d44 <SPI_PeriClockControl+0x54>
			if(pSPIx == SPI1){
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a22      	ldr	r2, [pc, #136]	@ (8000d90 <SPI_PeriClockControl+0xa0>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d106      	bne.n	8000d18 <SPI_PeriClockControl+0x28>
				SPI1_PCLK_EN();
 8000d0a:	4b22      	ldr	r3, [pc, #136]	@ (8000d94 <SPI_PeriClockControl+0xa4>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0e:	4a21      	ldr	r2, [pc, #132]	@ (8000d94 <SPI_PeriClockControl+0xa4>)
 8000d10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d14:	6453      	str	r3, [r2, #68]	@ 0x44
						else if (pSPIx == SPI3){
							SPI3_PCLK_DI();
						}
		}

}
 8000d16:	e035      	b.n	8000d84 <SPI_PeriClockControl+0x94>
			else if(pSPIx == SPI2){
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8000d98 <SPI_PeriClockControl+0xa8>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d106      	bne.n	8000d2e <SPI_PeriClockControl+0x3e>
				SPI2_PCLK_EN();
 8000d20:	4b1c      	ldr	r3, [pc, #112]	@ (8000d94 <SPI_PeriClockControl+0xa4>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d24:	4a1b      	ldr	r2, [pc, #108]	@ (8000d94 <SPI_PeriClockControl+0xa4>)
 8000d26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d2a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d2c:	e02a      	b.n	8000d84 <SPI_PeriClockControl+0x94>
			else if (pSPIx == SPI3){
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a1a      	ldr	r2, [pc, #104]	@ (8000d9c <SPI_PeriClockControl+0xac>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d126      	bne.n	8000d84 <SPI_PeriClockControl+0x94>
				SPI3_PCLK_EN();
 8000d36:	4b17      	ldr	r3, [pc, #92]	@ (8000d94 <SPI_PeriClockControl+0xa4>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3a:	4a16      	ldr	r2, [pc, #88]	@ (8000d94 <SPI_PeriClockControl+0xa4>)
 8000d3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d40:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d42:	e01f      	b.n	8000d84 <SPI_PeriClockControl+0x94>
			if(pSPIx == SPI1){
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a12      	ldr	r2, [pc, #72]	@ (8000d90 <SPI_PeriClockControl+0xa0>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d106      	bne.n	8000d5a <SPI_PeriClockControl+0x6a>
							SPI1_PCLK_DI();
 8000d4c:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <SPI_PeriClockControl+0xa4>)
 8000d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d50:	4a10      	ldr	r2, [pc, #64]	@ (8000d94 <SPI_PeriClockControl+0xa4>)
 8000d52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d56:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000d58:	e014      	b.n	8000d84 <SPI_PeriClockControl+0x94>
					else if(pSPIx == SPI2){
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a0e      	ldr	r2, [pc, #56]	@ (8000d98 <SPI_PeriClockControl+0xa8>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d106      	bne.n	8000d70 <SPI_PeriClockControl+0x80>
							SPI2_PCLK_DI();
 8000d62:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <SPI_PeriClockControl+0xa4>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d66:	4a0b      	ldr	r2, [pc, #44]	@ (8000d94 <SPI_PeriClockControl+0xa4>)
 8000d68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000d6c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d6e:	e009      	b.n	8000d84 <SPI_PeriClockControl+0x94>
						else if (pSPIx == SPI3){
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <SPI_PeriClockControl+0xac>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d105      	bne.n	8000d84 <SPI_PeriClockControl+0x94>
							SPI3_PCLK_DI();
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <SPI_PeriClockControl+0xa4>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7c:	4a05      	ldr	r2, [pc, #20]	@ (8000d94 <SPI_PeriClockControl+0xa4>)
 8000d7e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000d82:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40013000 	.word	0x40013000
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40003800 	.word	0x40003800
 8000d9c:	40003c00 	.word	0x40003c00

08000da0 <SPI_Init>:
	* @param  *pSPIHandle : pointer to the GPIO handle struct
	* @param
	* @param
	* @return None
	*/
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	//enable SPI clock
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2101      	movs	r1, #1
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ff9e 	bl	8000cf0 <SPI_PeriClockControl>
	//configure SPI_CR1 reg
	uint32_t temp = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
	//1. configure device mode
	temp |= pSPIHandle->SPIConfig.SPI_DeviceMode <<SPI_CR1_MSTR;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	791b      	ldrb	r3, [r3, #4]
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]
	//2. configure bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	795b      	ldrb	r3, [r3, #5]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d104      	bne.n	8000dd6 <SPI_Init+0x36>
		//bidi mode should be cleared
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	e014      	b.n	8000e00 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	795b      	ldrb	r3, [r3, #5]
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d104      	bne.n	8000de8 <SPI_Init+0x48>
		//bidi mode should be set
		temp |= (1<<SPI_CR1_BIDIMODE);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	e00b      	b.n	8000e00 <SPI_Init+0x60>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	795b      	ldrb	r3, [r3, #5]
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	d107      	bne.n	8000e00 <SPI_Init+0x60>
		//BIDI mode should be cleared and Rx_only bit must be set
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000df6:	60fb      	str	r3, [r7, #12]
		temp |= (1<<SPI_CR1_RXONLY);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dfe:	60fb      	str	r3, [r7, #12]
	}
	//configure clk speed
	temp |= pSPIHandle->SPIConfig.SPI_SclkSpeed <<SPI_CR1_BR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	799b      	ldrb	r3, [r3, #6]
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	60fb      	str	r3, [r7, #12]
	//configure DFF
	temp |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	79db      	ldrb	r3, [r3, #7]
 8000e10:	02db      	lsls	r3, r3, #11
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]
	//configure CPOl
	temp |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	7a1b      	ldrb	r3, [r3, #8]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]
	//config CPHA
	temp |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	7a5b      	ldrb	r3, [r3, #9]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]

	temp |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	7a9b      	ldrb	r3, [r3, #10]
 8000e34:	025b      	lsls	r3, r3, #9
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]


	pSPIHandle->pSPIx->CR1 = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	601a      	str	r2, [r3, #0]

}
 8000e44:	bf00      	nop
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <SPI_GetFlagStatus>:

}
/*
 * gets the flag stat
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName){
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689a      	ldr	r2, [r3, #8]
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e000      	b.n	8000e68 <SPI_GetFlagStatus+0x1c>
	}
	else{
		return FLAG_RESET;
 8000e66:	2300      	movs	r3, #0
	}
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
	...

08000e74 <SPI_IRQITConfig>:
 * @brief   enable/disable an IRQ in the NVIC for a given SPI line.
 * @param  IRQNum  : IRQ number
 * @param  EnorDi  : ENABLE to enable the interrupt; DISABLE to disable it
 * @return None
 */
void SPI_IRQITConfig(uint8_t IRQNum, uint8_t EnorDi){
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	460a      	mov	r2, r1
 8000e7e:	71fb      	strb	r3, [r7, #7]
 8000e80:	4613      	mov	r3, r2
 8000e82:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE){
 8000e84:	79bb      	ldrb	r3, [r7, #6]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d133      	bne.n	8000ef2 <SPI_IRQITConfig+0x7e>
		if(IRQNum <=31){
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b1f      	cmp	r3, #31
 8000e8e:	d80a      	bhi.n	8000ea6 <SPI_IRQITConfig+0x32>
			*NVIC_ISER0 |= (1<<IRQNum);
 8000e90:	4b34      	ldr	r3, [pc, #208]	@ (8000f64 <SPI_IRQITConfig+0xf0>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	79fa      	ldrb	r2, [r7, #7]
 8000e96:	2101      	movs	r1, #1
 8000e98:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	4a31      	ldr	r2, [pc, #196]	@ (8000f64 <SPI_IRQITConfig+0xf0>)
 8000ea0:	430b      	orrs	r3, r1
 8000ea2:	6013      	str	r3, [r2, #0]

		}

	}

}
 8000ea4:	e059      	b.n	8000f5a <SPI_IRQITConfig+0xe6>
		else if(IRQNum >31 && IRQNum<64){
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2b1f      	cmp	r3, #31
 8000eaa:	d90f      	bls.n	8000ecc <SPI_IRQITConfig+0x58>
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	2b3f      	cmp	r3, #63	@ 0x3f
 8000eb0:	d80c      	bhi.n	8000ecc <SPI_IRQITConfig+0x58>
			*NVIC_ISER1 |= (1<<(IRQNum%32));
 8000eb2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f68 <SPI_IRQITConfig+0xf4>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	79fa      	ldrb	r2, [r7, #7]
 8000eb8:	f002 021f 	and.w	r2, r2, #31
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4a28      	ldr	r2, [pc, #160]	@ (8000f68 <SPI_IRQITConfig+0xf4>)
 8000ec6:	430b      	orrs	r3, r1
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	e046      	b.n	8000f5a <SPI_IRQITConfig+0xe6>
		else if(IRQNum>=64 && IRQNum<96){
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ed0:	d943      	bls.n	8000f5a <SPI_IRQITConfig+0xe6>
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b5f      	cmp	r3, #95	@ 0x5f
 8000ed6:	d840      	bhi.n	8000f5a <SPI_IRQITConfig+0xe6>
			*NVIC_ISER3 |= (1<<(IRQNum%64));
 8000ed8:	4b24      	ldr	r3, [pc, #144]	@ (8000f6c <SPI_IRQITConfig+0xf8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	79fa      	ldrb	r2, [r7, #7]
 8000ede:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4a20      	ldr	r2, [pc, #128]	@ (8000f6c <SPI_IRQITConfig+0xf8>)
 8000eec:	430b      	orrs	r3, r1
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	e033      	b.n	8000f5a <SPI_IRQITConfig+0xe6>
		if(IRQNum <=31){
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b1f      	cmp	r3, #31
 8000ef6:	d80a      	bhi.n	8000f0e <SPI_IRQITConfig+0x9a>
			*NVIC_ICER0 |= (1<<IRQNum);
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f70 <SPI_IRQITConfig+0xfc>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	79fa      	ldrb	r2, [r7, #7]
 8000efe:	2101      	movs	r1, #1
 8000f00:	fa01 f202 	lsl.w	r2, r1, r2
 8000f04:	4611      	mov	r1, r2
 8000f06:	4a1a      	ldr	r2, [pc, #104]	@ (8000f70 <SPI_IRQITConfig+0xfc>)
 8000f08:	430b      	orrs	r3, r1
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	e025      	b.n	8000f5a <SPI_IRQITConfig+0xe6>
		else if(IRQNum >31 && IRQNum<64){
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b1f      	cmp	r3, #31
 8000f12:	d90f      	bls.n	8000f34 <SPI_IRQITConfig+0xc0>
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f18:	d80c      	bhi.n	8000f34 <SPI_IRQITConfig+0xc0>
			*NVIC_ICER1 |= (1<<(IRQNum%32));
 8000f1a:	4b16      	ldr	r3, [pc, #88]	@ (8000f74 <SPI_IRQITConfig+0x100>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	79fa      	ldrb	r2, [r7, #7]
 8000f20:	f002 021f 	and.w	r2, r2, #31
 8000f24:	2101      	movs	r1, #1
 8000f26:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4a11      	ldr	r2, [pc, #68]	@ (8000f74 <SPI_IRQITConfig+0x100>)
 8000f2e:	430b      	orrs	r3, r1
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	e012      	b.n	8000f5a <SPI_IRQITConfig+0xe6>
		else if(IRQNum>=64 && IRQNum<96){
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f38:	d90f      	bls.n	8000f5a <SPI_IRQITConfig+0xe6>
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b5f      	cmp	r3, #95	@ 0x5f
 8000f3e:	d80c      	bhi.n	8000f5a <SPI_IRQITConfig+0xe6>
			*NVIC_ICER3 |= (1<<(IRQNum%64));
 8000f40:	4b0d      	ldr	r3, [pc, #52]	@ (8000f78 <SPI_IRQITConfig+0x104>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	79fa      	ldrb	r2, [r7, #7]
 8000f46:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f50:	4611      	mov	r1, r2
 8000f52:	4a09      	ldr	r2, [pc, #36]	@ (8000f78 <SPI_IRQITConfig+0x104>)
 8000f54:	430b      	orrs	r3, r1
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	e7ff      	b.n	8000f5a <SPI_IRQITConfig+0xe6>
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr
 8000f64:	e000e100 	.word	0xe000e100
 8000f68:	e000e104 	.word	0xe000e104
 8000f6c:	e000e10c 	.word	0xe000e10c
 8000f70:	e000e180 	.word	0xe000e180
 8000f74:	e000e184 	.word	0xe000e184
 8000f78:	e000e18c 	.word	0xe000e18c

08000f7c <SPI_IRQHandling>:
 * @brief  Handle the pending EXTI interrupt for a specific SPI handle.
 *         Clears the interrupt pending bit.
 * @param  *pHandle : pointer to the SPI handle struct
 * @return None
 */
void SPI_IRQHandling(SPI_Handle_t *pHandle){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	uint8_t temp1,temp2;
	temp1 = pHandle->pSPIx->SR & (1<<1); //TXE flag
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & (1<<7); //TXEIE flag
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000f9e:	73bb      	strb	r3, [r7, #14]
	if (temp1 && temp2){
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d005      	beq.n	8000fb2 <SPI_IRQHandling+0x36>
 8000fa6:	7bbb      	ldrb	r3, [r7, #14]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d002      	beq.n	8000fb2 <SPI_IRQHandling+0x36>
		//handle txe
		spi_txe_interrupt_handle(pHandle);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 f8ae 	bl	800110e <spi_txe_interrupt_handle>
	}
	temp1 = pHandle->pSPIx->SR & (1<<0); //RXNE flag
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & (1<<6); //RXNEIE flag
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fcc:	73bb      	strb	r3, [r7, #14]
	if (temp1 && temp2){
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d005      	beq.n	8000fe0 <SPI_IRQHandling+0x64>
 8000fd4:	7bbb      	ldrb	r3, [r7, #14]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d002      	beq.n	8000fe0 <SPI_IRQHandling+0x64>
		//handle rxe
		spi_rxne_interrupt_handle(pHandle);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 f8d7 	bl	800118e <spi_rxne_interrupt_handle>
	}
	temp1 = pHandle->pSPIx->SR & (1<<6); //OVR flag
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fec:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & (1<<5); //ERRIE
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	f003 0320 	and.w	r3, r3, #32
 8000ffa:	73bb      	strb	r3, [r7, #14]
	if (temp1 && temp2){
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d005      	beq.n	800100e <SPI_IRQHandling+0x92>
 8001002:	7bbb      	ldrb	r3, [r7, #14]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d002      	beq.n	800100e <SPI_IRQHandling+0x92>
		//handle rxe
		spi_ovr_err_interrupt_handle(pHandle);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 f902 	bl	8001212 <spi_ovr_err_interrupt_handle>
	}
	//check
}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <SPI_PeripheralControl>:
	uint8_t iprx_section = IRQNum %4;
	uint8_t shift_amount = (8*iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
	*(NVIC_PR_BASE_ADDR + iprx ) |= IRQPriority << shift_amount;
}

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	460b      	mov	r3, r1
 8001020:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8001022:	78fb      	ldrb	r3, [r7, #3]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d106      	bne.n	8001036 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1<<SPI_CR1_SPE);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	601a      	str	r2, [r3, #0]
	}
	else{
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
	}
}
 8001034:	e005      	b.n	8001042 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	601a      	str	r2, [r3, #0]
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <SPI_SSOEConfig>:
		}
		else{
			pSPIx->CR1 &= ~(1<<SPI_CR1_SSI);
		}
}
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8001058:	78fb      	ldrb	r3, [r7, #3]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d106      	bne.n	800106c <SPI_SSOEConfig+0x20>
		pSPIx->CR2 |= (1<<2);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f043 0204 	orr.w	r2, r3, #4
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	605a      	str	r2, [r3, #4]
	}
	else{
		pSPIx->CR2 &= ~(1<<2);
	}
}
 800106a:	e005      	b.n	8001078 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1<<2);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f023 0204 	bic.w	r2, r3, #4
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	605a      	str	r2, [r3, #4]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr

08001082 <SPI_SendDataIT>:
uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Len){
 8001082:	b480      	push	{r7}
 8001084:	b087      	sub	sp, #28
 8001086:	af00      	add	r7, sp, #0
 8001088:	60f8      	str	r0, [r7, #12]
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
	uint8_t status = pSPIHandle->TxState;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	7f1b      	ldrb	r3, [r3, #28]
 8001092:	75fb      	strb	r3, [r7, #23]
	if(status != SPI_BUSY_IN_TX){
 8001094:	7dfb      	ldrb	r3, [r7, #23]
 8001096:	2b02      	cmp	r3, #2
 8001098:	d010      	beq.n	80010bc <SPI_SendDataIT+0x3a>

		//1. save the Tx buffer addr and Len info in global variable
		pSPIHandle->pTxBuffer = pTxBuffer;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = Len;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	615a      	str	r2, [r3, #20]
		//2. mark SPI state as busy so no other code can take over same SPI peripheral
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2202      	movs	r2, #2
 80010aa:	771a      	strb	r2, [r3, #28]

		//3 enable TXEIE control bit to ge interrupt whenver TXE flag is set in Status Reg
		pSPIHandle->pSPIx->CR2 |= (1<<7);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010ba:	605a      	str	r2, [r3, #4]
	}
	return status;
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	371c      	adds	r7, #28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <SPI_ReceiveDataIT>:
uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len){
 80010c8:	b480      	push	{r7}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
	uint8_t status = pSPIHandle->RxState;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	7f5b      	ldrb	r3, [r3, #29]
 80010d8:	75fb      	strb	r3, [r7, #23]
	if(status != SPI_BUSY_IN_RX){
 80010da:	7dfb      	ldrb	r3, [r7, #23]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d010      	beq.n	8001102 <SPI_ReceiveDataIT+0x3a>

		//1. save the Tx buffer addr and Len info in global variable
		pSPIHandle->pRxBuffer = pRxBuffer;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen = Len;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	619a      	str	r2, [r3, #24]
		//2. mark SPI state as busy so no other code can take over same SPI peripheral
		pSPIHandle->RxState = SPI_BUSY_IN_RX;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2201      	movs	r2, #1
 80010f0:	775a      	strb	r2, [r3, #29]

		//3 enable TXEIE control bit to ge interrupt whenver TXE flag is set in Status Reg
		pSPIHandle->pSPIx->CR2 |= (1<<6);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001100:	605a      	str	r2, [r3, #4]
	}
	return status;
 8001102:	7dfb      	ldrb	r3, [r7, #23]
}
 8001104:	4618      	mov	r0, r3
 8001106:	371c      	adds	r7, #28
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr

0800110e <spi_txe_interrupt_handle>:
//helper functions
void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle){
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
		if(pSPIHandle->pSPIx->CR1 & (1<<SPI_CR1_DFF)){
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001120:	2b00      	cmp	r3, #0
 8001122:	d015      	beq.n	8001150 <spi_txe_interrupt_handle+0x42>
			pSPIHandle->pSPIx->DR = *((uint16_t*)pSPIHandle->pTxBuffer);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	881a      	ldrh	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	60da      	str	r2, [r3, #12]
			pSPIHandle->TxLen--;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	1e5a      	subs	r2, r3, #1
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	615a      	str	r2, [r3, #20]
			pSPIHandle->TxLen--;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	1e5a      	subs	r2, r3, #1
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	615a      	str	r2, [r3, #20]
			(uint16_t*)pSPIHandle->pTxBuffer++;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	e00f      	b.n	8001170 <spi_txe_interrupt_handle+0x62>
		}
		else {
			pSPIHandle->pSPIx->DR = *pSPIHandle->pTxBuffer;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	781a      	ldrb	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	60da      	str	r2, [r3, #12]
			pSPIHandle->TxLen--;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	1e5a      	subs	r2, r3, #1
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	615a      	str	r2, [r3, #20]
			pSPIHandle->pTxBuffer++;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	60da      	str	r2, [r3, #12]
		}
		if(!pSPIHandle->TxLen){
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d106      	bne.n	8001186 <spi_txe_interrupt_handle+0x78>
			//TxLen is 0, close SPI communication
			//Tx is over so clears TXEIE
			SPI_CloseTransmission(pSPIHandle);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 f862 	bl	8001242 <SPI_CloseTransmission>
			SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_TX_CMPLT);
 800117e:	2101      	movs	r1, #1
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff f95b 	bl	800043c <SPI_ApplicationEventCallback>
		}
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <spi_rxne_interrupt_handle>:
void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle){
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
	if(pSPIHandle->pSPIx->CR1 & (1<<SPI_CR1_DFF)){
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d016      	beq.n	80011d2 <spi_rxne_interrupt_handle+0x44>
		*((uint16_t*)pSPIHandle->pRxBuffer) = (uint16_t) pSPIHandle->pSPIx->DR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	b292      	uxth	r2, r2
 80011b0:	801a      	strh	r2, [r3, #0]
		pSPIHandle->RxLen-= 2;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	1e9a      	subs	r2, r3, #2
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	611a      	str	r2, [r3, #16]
		pSPIHandle->pRxBuffer++;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	611a      	str	r2, [r3, #16]
 80011d0:	e010      	b.n	80011f4 <spi_rxne_interrupt_handle+0x66>
	}
	else {
		*(pSPIHandle->pRxBuffer) = (uint8_t)pSPIHandle->pSPIx->DR;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68da      	ldr	r2, [r3, #12]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	701a      	strb	r2, [r3, #0]
		pSPIHandle->RxLen--;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	1e5a      	subs	r2, r3, #1
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	1c5a      	adds	r2, r3, #1
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	611a      	str	r2, [r3, #16]
	}
	if(!pSPIHandle->RxLen){
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d106      	bne.n	800120a <spi_rxne_interrupt_handle+0x7c>
		//RxLen is 0, close SPI communication
		//Rx is over so clears RXNEIE
		SPI_CloseReception(pSPIHandle);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 f83a 	bl	8001276 <SPI_CloseReception>
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_RX_CMPLT);
 8001202:	2102      	movs	r1, #2
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff f919 	bl	800043c <SPI_ApplicationEventCallback>
	}
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <spi_ovr_err_interrupt_handle>:
void spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle){
 8001212:	b580      	push	{r7, lr}
 8001214:	b084      	sub	sp, #16
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
	//clear OVR flag
	uint8_t temp;
	if(pSPIHandle->TxState != SPI_BUSY_IN_TX){
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7f1b      	ldrb	r3, [r3, #28]
 800121e:	2b02      	cmp	r3, #2
 8001220:	d007      	beq.n	8001232 <spi_ovr_err_interrupt_handle+0x20>
		temp = pSPIHandle->pSPIx->DR;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	73fb      	strb	r3, [r7, #15]
	}
	(void)temp;
	SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_OVR_ERR);
 8001232:	2103      	movs	r1, #3
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff f901 	bl	800043c <SPI_ApplicationEventCallback>
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <SPI_CloseTransmission>:
	uint8_t temp;
	temp = pSPIx->DR;
	temp = pSPIx->SR;
	(void)temp;
}
void SPI_CloseTransmission(SPI_Handle_t *pHandle){
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
	pHandle->pSPIx->CR2 &= ~(1<<7);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001258:	605a      	str	r2, [r3, #4]
	pHandle->pTxBuffer = NULL;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
	pHandle->TxLen = 0;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
	pHandle->TxState = SPI_READY;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	771a      	strb	r2, [r3, #28]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr

08001276 <SPI_CloseReception>:
void SPI_CloseReception(SPI_Handle_t *pHandle){
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
	pHandle->pSPIx->CR2 &= ~(1<<6);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800128c:	605a      	str	r2, [r3, #4]
	pHandle->pRxBuffer = NULL;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
	pHandle->RxLen = 0;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
	pHandle->RxState = SPI_READY;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	775a      	strb	r2, [r3, #29]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
	...

080012ac <std>:
 80012ac:	2300      	movs	r3, #0
 80012ae:	b510      	push	{r4, lr}
 80012b0:	4604      	mov	r4, r0
 80012b2:	e9c0 3300 	strd	r3, r3, [r0]
 80012b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80012ba:	6083      	str	r3, [r0, #8]
 80012bc:	8181      	strh	r1, [r0, #12]
 80012be:	6643      	str	r3, [r0, #100]	@ 0x64
 80012c0:	81c2      	strh	r2, [r0, #14]
 80012c2:	6183      	str	r3, [r0, #24]
 80012c4:	4619      	mov	r1, r3
 80012c6:	2208      	movs	r2, #8
 80012c8:	305c      	adds	r0, #92	@ 0x5c
 80012ca:	f000 f906 	bl	80014da <memset>
 80012ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <std+0x58>)
 80012d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80012d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001308 <std+0x5c>)
 80012d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80012d6:	4b0d      	ldr	r3, [pc, #52]	@ (800130c <std+0x60>)
 80012d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80012da:	4b0d      	ldr	r3, [pc, #52]	@ (8001310 <std+0x64>)
 80012dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80012de:	4b0d      	ldr	r3, [pc, #52]	@ (8001314 <std+0x68>)
 80012e0:	6224      	str	r4, [r4, #32]
 80012e2:	429c      	cmp	r4, r3
 80012e4:	d006      	beq.n	80012f4 <std+0x48>
 80012e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80012ea:	4294      	cmp	r4, r2
 80012ec:	d002      	beq.n	80012f4 <std+0x48>
 80012ee:	33d0      	adds	r3, #208	@ 0xd0
 80012f0:	429c      	cmp	r4, r3
 80012f2:	d105      	bne.n	8001300 <std+0x54>
 80012f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80012f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012fc:	f000 b966 	b.w	80015cc <__retarget_lock_init_recursive>
 8001300:	bd10      	pop	{r4, pc}
 8001302:	bf00      	nop
 8001304:	08001455 	.word	0x08001455
 8001308:	08001477 	.word	0x08001477
 800130c:	080014af 	.word	0x080014af
 8001310:	080014d3 	.word	0x080014d3
 8001314:	20000298 	.word	0x20000298

08001318 <stdio_exit_handler>:
 8001318:	4a02      	ldr	r2, [pc, #8]	@ (8001324 <stdio_exit_handler+0xc>)
 800131a:	4903      	ldr	r1, [pc, #12]	@ (8001328 <stdio_exit_handler+0x10>)
 800131c:	4803      	ldr	r0, [pc, #12]	@ (800132c <stdio_exit_handler+0x14>)
 800131e:	f000 b869 	b.w	80013f4 <_fwalk_sglue>
 8001322:	bf00      	nop
 8001324:	20000000 	.word	0x20000000
 8001328:	08001e5d 	.word	0x08001e5d
 800132c:	20000010 	.word	0x20000010

08001330 <cleanup_stdio>:
 8001330:	6841      	ldr	r1, [r0, #4]
 8001332:	4b0c      	ldr	r3, [pc, #48]	@ (8001364 <cleanup_stdio+0x34>)
 8001334:	4299      	cmp	r1, r3
 8001336:	b510      	push	{r4, lr}
 8001338:	4604      	mov	r4, r0
 800133a:	d001      	beq.n	8001340 <cleanup_stdio+0x10>
 800133c:	f000 fd8e 	bl	8001e5c <_fflush_r>
 8001340:	68a1      	ldr	r1, [r4, #8]
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <cleanup_stdio+0x38>)
 8001344:	4299      	cmp	r1, r3
 8001346:	d002      	beq.n	800134e <cleanup_stdio+0x1e>
 8001348:	4620      	mov	r0, r4
 800134a:	f000 fd87 	bl	8001e5c <_fflush_r>
 800134e:	68e1      	ldr	r1, [r4, #12]
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <cleanup_stdio+0x3c>)
 8001352:	4299      	cmp	r1, r3
 8001354:	d004      	beq.n	8001360 <cleanup_stdio+0x30>
 8001356:	4620      	mov	r0, r4
 8001358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800135c:	f000 bd7e 	b.w	8001e5c <_fflush_r>
 8001360:	bd10      	pop	{r4, pc}
 8001362:	bf00      	nop
 8001364:	20000298 	.word	0x20000298
 8001368:	20000300 	.word	0x20000300
 800136c:	20000368 	.word	0x20000368

08001370 <global_stdio_init.part.0>:
 8001370:	b510      	push	{r4, lr}
 8001372:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <global_stdio_init.part.0+0x30>)
 8001374:	4c0b      	ldr	r4, [pc, #44]	@ (80013a4 <global_stdio_init.part.0+0x34>)
 8001376:	4a0c      	ldr	r2, [pc, #48]	@ (80013a8 <global_stdio_init.part.0+0x38>)
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	4620      	mov	r0, r4
 800137c:	2200      	movs	r2, #0
 800137e:	2104      	movs	r1, #4
 8001380:	f7ff ff94 	bl	80012ac <std>
 8001384:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001388:	2201      	movs	r2, #1
 800138a:	2109      	movs	r1, #9
 800138c:	f7ff ff8e 	bl	80012ac <std>
 8001390:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001394:	2202      	movs	r2, #2
 8001396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800139a:	2112      	movs	r1, #18
 800139c:	f7ff bf86 	b.w	80012ac <std>
 80013a0:	200003d0 	.word	0x200003d0
 80013a4:	20000298 	.word	0x20000298
 80013a8:	08001319 	.word	0x08001319

080013ac <__sfp_lock_acquire>:
 80013ac:	4801      	ldr	r0, [pc, #4]	@ (80013b4 <__sfp_lock_acquire+0x8>)
 80013ae:	f000 b90e 	b.w	80015ce <__retarget_lock_acquire_recursive>
 80013b2:	bf00      	nop
 80013b4:	200003d9 	.word	0x200003d9

080013b8 <__sfp_lock_release>:
 80013b8:	4801      	ldr	r0, [pc, #4]	@ (80013c0 <__sfp_lock_release+0x8>)
 80013ba:	f000 b909 	b.w	80015d0 <__retarget_lock_release_recursive>
 80013be:	bf00      	nop
 80013c0:	200003d9 	.word	0x200003d9

080013c4 <__sinit>:
 80013c4:	b510      	push	{r4, lr}
 80013c6:	4604      	mov	r4, r0
 80013c8:	f7ff fff0 	bl	80013ac <__sfp_lock_acquire>
 80013cc:	6a23      	ldr	r3, [r4, #32]
 80013ce:	b11b      	cbz	r3, 80013d8 <__sinit+0x14>
 80013d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013d4:	f7ff bff0 	b.w	80013b8 <__sfp_lock_release>
 80013d8:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <__sinit+0x28>)
 80013da:	6223      	str	r3, [r4, #32]
 80013dc:	4b04      	ldr	r3, [pc, #16]	@ (80013f0 <__sinit+0x2c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1f5      	bne.n	80013d0 <__sinit+0xc>
 80013e4:	f7ff ffc4 	bl	8001370 <global_stdio_init.part.0>
 80013e8:	e7f2      	b.n	80013d0 <__sinit+0xc>
 80013ea:	bf00      	nop
 80013ec:	08001331 	.word	0x08001331
 80013f0:	200003d0 	.word	0x200003d0

080013f4 <_fwalk_sglue>:
 80013f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013f8:	4607      	mov	r7, r0
 80013fa:	4688      	mov	r8, r1
 80013fc:	4614      	mov	r4, r2
 80013fe:	2600      	movs	r6, #0
 8001400:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001404:	f1b9 0901 	subs.w	r9, r9, #1
 8001408:	d505      	bpl.n	8001416 <_fwalk_sglue+0x22>
 800140a:	6824      	ldr	r4, [r4, #0]
 800140c:	2c00      	cmp	r4, #0
 800140e:	d1f7      	bne.n	8001400 <_fwalk_sglue+0xc>
 8001410:	4630      	mov	r0, r6
 8001412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001416:	89ab      	ldrh	r3, [r5, #12]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d907      	bls.n	800142c <_fwalk_sglue+0x38>
 800141c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001420:	3301      	adds	r3, #1
 8001422:	d003      	beq.n	800142c <_fwalk_sglue+0x38>
 8001424:	4629      	mov	r1, r5
 8001426:	4638      	mov	r0, r7
 8001428:	47c0      	blx	r8
 800142a:	4306      	orrs	r6, r0
 800142c:	3568      	adds	r5, #104	@ 0x68
 800142e:	e7e9      	b.n	8001404 <_fwalk_sglue+0x10>

08001430 <iprintf>:
 8001430:	b40f      	push	{r0, r1, r2, r3}
 8001432:	b507      	push	{r0, r1, r2, lr}
 8001434:	4906      	ldr	r1, [pc, #24]	@ (8001450 <iprintf+0x20>)
 8001436:	ab04      	add	r3, sp, #16
 8001438:	6808      	ldr	r0, [r1, #0]
 800143a:	f853 2b04 	ldr.w	r2, [r3], #4
 800143e:	6881      	ldr	r1, [r0, #8]
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	f000 f9e7 	bl	8001814 <_vfiprintf_r>
 8001446:	b003      	add	sp, #12
 8001448:	f85d eb04 	ldr.w	lr, [sp], #4
 800144c:	b004      	add	sp, #16
 800144e:	4770      	bx	lr
 8001450:	2000000c 	.word	0x2000000c

08001454 <__sread>:
 8001454:	b510      	push	{r4, lr}
 8001456:	460c      	mov	r4, r1
 8001458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800145c:	f000 f868 	bl	8001530 <_read_r>
 8001460:	2800      	cmp	r0, #0
 8001462:	bfab      	itete	ge
 8001464:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001466:	89a3      	ldrhlt	r3, [r4, #12]
 8001468:	181b      	addge	r3, r3, r0
 800146a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800146e:	bfac      	ite	ge
 8001470:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001472:	81a3      	strhlt	r3, [r4, #12]
 8001474:	bd10      	pop	{r4, pc}

08001476 <__swrite>:
 8001476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800147a:	461f      	mov	r7, r3
 800147c:	898b      	ldrh	r3, [r1, #12]
 800147e:	05db      	lsls	r3, r3, #23
 8001480:	4605      	mov	r5, r0
 8001482:	460c      	mov	r4, r1
 8001484:	4616      	mov	r6, r2
 8001486:	d505      	bpl.n	8001494 <__swrite+0x1e>
 8001488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800148c:	2302      	movs	r3, #2
 800148e:	2200      	movs	r2, #0
 8001490:	f000 f83c 	bl	800150c <_lseek_r>
 8001494:	89a3      	ldrh	r3, [r4, #12]
 8001496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800149a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800149e:	81a3      	strh	r3, [r4, #12]
 80014a0:	4632      	mov	r2, r6
 80014a2:	463b      	mov	r3, r7
 80014a4:	4628      	mov	r0, r5
 80014a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80014aa:	f000 b853 	b.w	8001554 <_write_r>

080014ae <__sseek>:
 80014ae:	b510      	push	{r4, lr}
 80014b0:	460c      	mov	r4, r1
 80014b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014b6:	f000 f829 	bl	800150c <_lseek_r>
 80014ba:	1c43      	adds	r3, r0, #1
 80014bc:	89a3      	ldrh	r3, [r4, #12]
 80014be:	bf15      	itete	ne
 80014c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80014c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80014c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80014ca:	81a3      	strheq	r3, [r4, #12]
 80014cc:	bf18      	it	ne
 80014ce:	81a3      	strhne	r3, [r4, #12]
 80014d0:	bd10      	pop	{r4, pc}

080014d2 <__sclose>:
 80014d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014d6:	f000 b809 	b.w	80014ec <_close_r>

080014da <memset>:
 80014da:	4402      	add	r2, r0
 80014dc:	4603      	mov	r3, r0
 80014de:	4293      	cmp	r3, r2
 80014e0:	d100      	bne.n	80014e4 <memset+0xa>
 80014e2:	4770      	bx	lr
 80014e4:	f803 1b01 	strb.w	r1, [r3], #1
 80014e8:	e7f9      	b.n	80014de <memset+0x4>
	...

080014ec <_close_r>:
 80014ec:	b538      	push	{r3, r4, r5, lr}
 80014ee:	4d06      	ldr	r5, [pc, #24]	@ (8001508 <_close_r+0x1c>)
 80014f0:	2300      	movs	r3, #0
 80014f2:	4604      	mov	r4, r0
 80014f4:	4608      	mov	r0, r1
 80014f6:	602b      	str	r3, [r5, #0]
 80014f8:	f7ff f81b 	bl	8000532 <_close>
 80014fc:	1c43      	adds	r3, r0, #1
 80014fe:	d102      	bne.n	8001506 <_close_r+0x1a>
 8001500:	682b      	ldr	r3, [r5, #0]
 8001502:	b103      	cbz	r3, 8001506 <_close_r+0x1a>
 8001504:	6023      	str	r3, [r4, #0]
 8001506:	bd38      	pop	{r3, r4, r5, pc}
 8001508:	200003d4 	.word	0x200003d4

0800150c <_lseek_r>:
 800150c:	b538      	push	{r3, r4, r5, lr}
 800150e:	4d07      	ldr	r5, [pc, #28]	@ (800152c <_lseek_r+0x20>)
 8001510:	4604      	mov	r4, r0
 8001512:	4608      	mov	r0, r1
 8001514:	4611      	mov	r1, r2
 8001516:	2200      	movs	r2, #0
 8001518:	602a      	str	r2, [r5, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	f7ff f82d 	bl	800057a <_lseek>
 8001520:	1c43      	adds	r3, r0, #1
 8001522:	d102      	bne.n	800152a <_lseek_r+0x1e>
 8001524:	682b      	ldr	r3, [r5, #0]
 8001526:	b103      	cbz	r3, 800152a <_lseek_r+0x1e>
 8001528:	6023      	str	r3, [r4, #0]
 800152a:	bd38      	pop	{r3, r4, r5, pc}
 800152c:	200003d4 	.word	0x200003d4

08001530 <_read_r>:
 8001530:	b538      	push	{r3, r4, r5, lr}
 8001532:	4d07      	ldr	r5, [pc, #28]	@ (8001550 <_read_r+0x20>)
 8001534:	4604      	mov	r4, r0
 8001536:	4608      	mov	r0, r1
 8001538:	4611      	mov	r1, r2
 800153a:	2200      	movs	r2, #0
 800153c:	602a      	str	r2, [r5, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	f7fe ffbe 	bl	80004c0 <_read>
 8001544:	1c43      	adds	r3, r0, #1
 8001546:	d102      	bne.n	800154e <_read_r+0x1e>
 8001548:	682b      	ldr	r3, [r5, #0]
 800154a:	b103      	cbz	r3, 800154e <_read_r+0x1e>
 800154c:	6023      	str	r3, [r4, #0]
 800154e:	bd38      	pop	{r3, r4, r5, pc}
 8001550:	200003d4 	.word	0x200003d4

08001554 <_write_r>:
 8001554:	b538      	push	{r3, r4, r5, lr}
 8001556:	4d07      	ldr	r5, [pc, #28]	@ (8001574 <_write_r+0x20>)
 8001558:	4604      	mov	r4, r0
 800155a:	4608      	mov	r0, r1
 800155c:	4611      	mov	r1, r2
 800155e:	2200      	movs	r2, #0
 8001560:	602a      	str	r2, [r5, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	f7fe ffc9 	bl	80004fa <_write>
 8001568:	1c43      	adds	r3, r0, #1
 800156a:	d102      	bne.n	8001572 <_write_r+0x1e>
 800156c:	682b      	ldr	r3, [r5, #0]
 800156e:	b103      	cbz	r3, 8001572 <_write_r+0x1e>
 8001570:	6023      	str	r3, [r4, #0]
 8001572:	bd38      	pop	{r3, r4, r5, pc}
 8001574:	200003d4 	.word	0x200003d4

08001578 <__errno>:
 8001578:	4b01      	ldr	r3, [pc, #4]	@ (8001580 <__errno+0x8>)
 800157a:	6818      	ldr	r0, [r3, #0]
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	2000000c 	.word	0x2000000c

08001584 <__libc_init_array>:
 8001584:	b570      	push	{r4, r5, r6, lr}
 8001586:	4d0d      	ldr	r5, [pc, #52]	@ (80015bc <__libc_init_array+0x38>)
 8001588:	4c0d      	ldr	r4, [pc, #52]	@ (80015c0 <__libc_init_array+0x3c>)
 800158a:	1b64      	subs	r4, r4, r5
 800158c:	10a4      	asrs	r4, r4, #2
 800158e:	2600      	movs	r6, #0
 8001590:	42a6      	cmp	r6, r4
 8001592:	d109      	bne.n	80015a8 <__libc_init_array+0x24>
 8001594:	4d0b      	ldr	r5, [pc, #44]	@ (80015c4 <__libc_init_array+0x40>)
 8001596:	4c0c      	ldr	r4, [pc, #48]	@ (80015c8 <__libc_init_array+0x44>)
 8001598:	f000 fdb0 	bl	80020fc <_init>
 800159c:	1b64      	subs	r4, r4, r5
 800159e:	10a4      	asrs	r4, r4, #2
 80015a0:	2600      	movs	r6, #0
 80015a2:	42a6      	cmp	r6, r4
 80015a4:	d105      	bne.n	80015b2 <__libc_init_array+0x2e>
 80015a6:	bd70      	pop	{r4, r5, r6, pc}
 80015a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80015ac:	4798      	blx	r3
 80015ae:	3601      	adds	r6, #1
 80015b0:	e7ee      	b.n	8001590 <__libc_init_array+0xc>
 80015b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80015b6:	4798      	blx	r3
 80015b8:	3601      	adds	r6, #1
 80015ba:	e7f2      	b.n	80015a2 <__libc_init_array+0x1e>
 80015bc:	08002160 	.word	0x08002160
 80015c0:	08002160 	.word	0x08002160
 80015c4:	08002160 	.word	0x08002160
 80015c8:	08002164 	.word	0x08002164

080015cc <__retarget_lock_init_recursive>:
 80015cc:	4770      	bx	lr

080015ce <__retarget_lock_acquire_recursive>:
 80015ce:	4770      	bx	lr

080015d0 <__retarget_lock_release_recursive>:
 80015d0:	4770      	bx	lr
	...

080015d4 <_free_r>:
 80015d4:	b538      	push	{r3, r4, r5, lr}
 80015d6:	4605      	mov	r5, r0
 80015d8:	2900      	cmp	r1, #0
 80015da:	d041      	beq.n	8001660 <_free_r+0x8c>
 80015dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80015e0:	1f0c      	subs	r4, r1, #4
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	bfb8      	it	lt
 80015e6:	18e4      	addlt	r4, r4, r3
 80015e8:	f000 f8e0 	bl	80017ac <__malloc_lock>
 80015ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001664 <_free_r+0x90>)
 80015ee:	6813      	ldr	r3, [r2, #0]
 80015f0:	b933      	cbnz	r3, 8001600 <_free_r+0x2c>
 80015f2:	6063      	str	r3, [r4, #4]
 80015f4:	6014      	str	r4, [r2, #0]
 80015f6:	4628      	mov	r0, r5
 80015f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80015fc:	f000 b8dc 	b.w	80017b8 <__malloc_unlock>
 8001600:	42a3      	cmp	r3, r4
 8001602:	d908      	bls.n	8001616 <_free_r+0x42>
 8001604:	6820      	ldr	r0, [r4, #0]
 8001606:	1821      	adds	r1, r4, r0
 8001608:	428b      	cmp	r3, r1
 800160a:	bf01      	itttt	eq
 800160c:	6819      	ldreq	r1, [r3, #0]
 800160e:	685b      	ldreq	r3, [r3, #4]
 8001610:	1809      	addeq	r1, r1, r0
 8001612:	6021      	streq	r1, [r4, #0]
 8001614:	e7ed      	b.n	80015f2 <_free_r+0x1e>
 8001616:	461a      	mov	r2, r3
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	b10b      	cbz	r3, 8001620 <_free_r+0x4c>
 800161c:	42a3      	cmp	r3, r4
 800161e:	d9fa      	bls.n	8001616 <_free_r+0x42>
 8001620:	6811      	ldr	r1, [r2, #0]
 8001622:	1850      	adds	r0, r2, r1
 8001624:	42a0      	cmp	r0, r4
 8001626:	d10b      	bne.n	8001640 <_free_r+0x6c>
 8001628:	6820      	ldr	r0, [r4, #0]
 800162a:	4401      	add	r1, r0
 800162c:	1850      	adds	r0, r2, r1
 800162e:	4283      	cmp	r3, r0
 8001630:	6011      	str	r1, [r2, #0]
 8001632:	d1e0      	bne.n	80015f6 <_free_r+0x22>
 8001634:	6818      	ldr	r0, [r3, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	6053      	str	r3, [r2, #4]
 800163a:	4408      	add	r0, r1
 800163c:	6010      	str	r0, [r2, #0]
 800163e:	e7da      	b.n	80015f6 <_free_r+0x22>
 8001640:	d902      	bls.n	8001648 <_free_r+0x74>
 8001642:	230c      	movs	r3, #12
 8001644:	602b      	str	r3, [r5, #0]
 8001646:	e7d6      	b.n	80015f6 <_free_r+0x22>
 8001648:	6820      	ldr	r0, [r4, #0]
 800164a:	1821      	adds	r1, r4, r0
 800164c:	428b      	cmp	r3, r1
 800164e:	bf04      	itt	eq
 8001650:	6819      	ldreq	r1, [r3, #0]
 8001652:	685b      	ldreq	r3, [r3, #4]
 8001654:	6063      	str	r3, [r4, #4]
 8001656:	bf04      	itt	eq
 8001658:	1809      	addeq	r1, r1, r0
 800165a:	6021      	streq	r1, [r4, #0]
 800165c:	6054      	str	r4, [r2, #4]
 800165e:	e7ca      	b.n	80015f6 <_free_r+0x22>
 8001660:	bd38      	pop	{r3, r4, r5, pc}
 8001662:	bf00      	nop
 8001664:	200003e0 	.word	0x200003e0

08001668 <sbrk_aligned>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	4e0f      	ldr	r6, [pc, #60]	@ (80016a8 <sbrk_aligned+0x40>)
 800166c:	460c      	mov	r4, r1
 800166e:	6831      	ldr	r1, [r6, #0]
 8001670:	4605      	mov	r5, r0
 8001672:	b911      	cbnz	r1, 800167a <sbrk_aligned+0x12>
 8001674:	f000 fcae 	bl	8001fd4 <_sbrk_r>
 8001678:	6030      	str	r0, [r6, #0]
 800167a:	4621      	mov	r1, r4
 800167c:	4628      	mov	r0, r5
 800167e:	f000 fca9 	bl	8001fd4 <_sbrk_r>
 8001682:	1c43      	adds	r3, r0, #1
 8001684:	d103      	bne.n	800168e <sbrk_aligned+0x26>
 8001686:	f04f 34ff 	mov.w	r4, #4294967295
 800168a:	4620      	mov	r0, r4
 800168c:	bd70      	pop	{r4, r5, r6, pc}
 800168e:	1cc4      	adds	r4, r0, #3
 8001690:	f024 0403 	bic.w	r4, r4, #3
 8001694:	42a0      	cmp	r0, r4
 8001696:	d0f8      	beq.n	800168a <sbrk_aligned+0x22>
 8001698:	1a21      	subs	r1, r4, r0
 800169a:	4628      	mov	r0, r5
 800169c:	f000 fc9a 	bl	8001fd4 <_sbrk_r>
 80016a0:	3001      	adds	r0, #1
 80016a2:	d1f2      	bne.n	800168a <sbrk_aligned+0x22>
 80016a4:	e7ef      	b.n	8001686 <sbrk_aligned+0x1e>
 80016a6:	bf00      	nop
 80016a8:	200003dc 	.word	0x200003dc

080016ac <_malloc_r>:
 80016ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016b0:	1ccd      	adds	r5, r1, #3
 80016b2:	f025 0503 	bic.w	r5, r5, #3
 80016b6:	3508      	adds	r5, #8
 80016b8:	2d0c      	cmp	r5, #12
 80016ba:	bf38      	it	cc
 80016bc:	250c      	movcc	r5, #12
 80016be:	2d00      	cmp	r5, #0
 80016c0:	4606      	mov	r6, r0
 80016c2:	db01      	blt.n	80016c8 <_malloc_r+0x1c>
 80016c4:	42a9      	cmp	r1, r5
 80016c6:	d904      	bls.n	80016d2 <_malloc_r+0x26>
 80016c8:	230c      	movs	r3, #12
 80016ca:	6033      	str	r3, [r6, #0]
 80016cc:	2000      	movs	r0, #0
 80016ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80017a8 <_malloc_r+0xfc>
 80016d6:	f000 f869 	bl	80017ac <__malloc_lock>
 80016da:	f8d8 3000 	ldr.w	r3, [r8]
 80016de:	461c      	mov	r4, r3
 80016e0:	bb44      	cbnz	r4, 8001734 <_malloc_r+0x88>
 80016e2:	4629      	mov	r1, r5
 80016e4:	4630      	mov	r0, r6
 80016e6:	f7ff ffbf 	bl	8001668 <sbrk_aligned>
 80016ea:	1c43      	adds	r3, r0, #1
 80016ec:	4604      	mov	r4, r0
 80016ee:	d158      	bne.n	80017a2 <_malloc_r+0xf6>
 80016f0:	f8d8 4000 	ldr.w	r4, [r8]
 80016f4:	4627      	mov	r7, r4
 80016f6:	2f00      	cmp	r7, #0
 80016f8:	d143      	bne.n	8001782 <_malloc_r+0xd6>
 80016fa:	2c00      	cmp	r4, #0
 80016fc:	d04b      	beq.n	8001796 <_malloc_r+0xea>
 80016fe:	6823      	ldr	r3, [r4, #0]
 8001700:	4639      	mov	r1, r7
 8001702:	4630      	mov	r0, r6
 8001704:	eb04 0903 	add.w	r9, r4, r3
 8001708:	f000 fc64 	bl	8001fd4 <_sbrk_r>
 800170c:	4581      	cmp	r9, r0
 800170e:	d142      	bne.n	8001796 <_malloc_r+0xea>
 8001710:	6821      	ldr	r1, [r4, #0]
 8001712:	1a6d      	subs	r5, r5, r1
 8001714:	4629      	mov	r1, r5
 8001716:	4630      	mov	r0, r6
 8001718:	f7ff ffa6 	bl	8001668 <sbrk_aligned>
 800171c:	3001      	adds	r0, #1
 800171e:	d03a      	beq.n	8001796 <_malloc_r+0xea>
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	442b      	add	r3, r5
 8001724:	6023      	str	r3, [r4, #0]
 8001726:	f8d8 3000 	ldr.w	r3, [r8]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	bb62      	cbnz	r2, 8001788 <_malloc_r+0xdc>
 800172e:	f8c8 7000 	str.w	r7, [r8]
 8001732:	e00f      	b.n	8001754 <_malloc_r+0xa8>
 8001734:	6822      	ldr	r2, [r4, #0]
 8001736:	1b52      	subs	r2, r2, r5
 8001738:	d420      	bmi.n	800177c <_malloc_r+0xd0>
 800173a:	2a0b      	cmp	r2, #11
 800173c:	d917      	bls.n	800176e <_malloc_r+0xc2>
 800173e:	1961      	adds	r1, r4, r5
 8001740:	42a3      	cmp	r3, r4
 8001742:	6025      	str	r5, [r4, #0]
 8001744:	bf18      	it	ne
 8001746:	6059      	strne	r1, [r3, #4]
 8001748:	6863      	ldr	r3, [r4, #4]
 800174a:	bf08      	it	eq
 800174c:	f8c8 1000 	streq.w	r1, [r8]
 8001750:	5162      	str	r2, [r4, r5]
 8001752:	604b      	str	r3, [r1, #4]
 8001754:	4630      	mov	r0, r6
 8001756:	f000 f82f 	bl	80017b8 <__malloc_unlock>
 800175a:	f104 000b 	add.w	r0, r4, #11
 800175e:	1d23      	adds	r3, r4, #4
 8001760:	f020 0007 	bic.w	r0, r0, #7
 8001764:	1ac2      	subs	r2, r0, r3
 8001766:	bf1c      	itt	ne
 8001768:	1a1b      	subne	r3, r3, r0
 800176a:	50a3      	strne	r3, [r4, r2]
 800176c:	e7af      	b.n	80016ce <_malloc_r+0x22>
 800176e:	6862      	ldr	r2, [r4, #4]
 8001770:	42a3      	cmp	r3, r4
 8001772:	bf0c      	ite	eq
 8001774:	f8c8 2000 	streq.w	r2, [r8]
 8001778:	605a      	strne	r2, [r3, #4]
 800177a:	e7eb      	b.n	8001754 <_malloc_r+0xa8>
 800177c:	4623      	mov	r3, r4
 800177e:	6864      	ldr	r4, [r4, #4]
 8001780:	e7ae      	b.n	80016e0 <_malloc_r+0x34>
 8001782:	463c      	mov	r4, r7
 8001784:	687f      	ldr	r7, [r7, #4]
 8001786:	e7b6      	b.n	80016f6 <_malloc_r+0x4a>
 8001788:	461a      	mov	r2, r3
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	42a3      	cmp	r3, r4
 800178e:	d1fb      	bne.n	8001788 <_malloc_r+0xdc>
 8001790:	2300      	movs	r3, #0
 8001792:	6053      	str	r3, [r2, #4]
 8001794:	e7de      	b.n	8001754 <_malloc_r+0xa8>
 8001796:	230c      	movs	r3, #12
 8001798:	6033      	str	r3, [r6, #0]
 800179a:	4630      	mov	r0, r6
 800179c:	f000 f80c 	bl	80017b8 <__malloc_unlock>
 80017a0:	e794      	b.n	80016cc <_malloc_r+0x20>
 80017a2:	6005      	str	r5, [r0, #0]
 80017a4:	e7d6      	b.n	8001754 <_malloc_r+0xa8>
 80017a6:	bf00      	nop
 80017a8:	200003e0 	.word	0x200003e0

080017ac <__malloc_lock>:
 80017ac:	4801      	ldr	r0, [pc, #4]	@ (80017b4 <__malloc_lock+0x8>)
 80017ae:	f7ff bf0e 	b.w	80015ce <__retarget_lock_acquire_recursive>
 80017b2:	bf00      	nop
 80017b4:	200003d8 	.word	0x200003d8

080017b8 <__malloc_unlock>:
 80017b8:	4801      	ldr	r0, [pc, #4]	@ (80017c0 <__malloc_unlock+0x8>)
 80017ba:	f7ff bf09 	b.w	80015d0 <__retarget_lock_release_recursive>
 80017be:	bf00      	nop
 80017c0:	200003d8 	.word	0x200003d8

080017c4 <__sfputc_r>:
 80017c4:	6893      	ldr	r3, [r2, #8]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	b410      	push	{r4}
 80017cc:	6093      	str	r3, [r2, #8]
 80017ce:	da07      	bge.n	80017e0 <__sfputc_r+0x1c>
 80017d0:	6994      	ldr	r4, [r2, #24]
 80017d2:	42a3      	cmp	r3, r4
 80017d4:	db01      	blt.n	80017da <__sfputc_r+0x16>
 80017d6:	290a      	cmp	r1, #10
 80017d8:	d102      	bne.n	80017e0 <__sfputc_r+0x1c>
 80017da:	bc10      	pop	{r4}
 80017dc:	f000 bb66 	b.w	8001eac <__swbuf_r>
 80017e0:	6813      	ldr	r3, [r2, #0]
 80017e2:	1c58      	adds	r0, r3, #1
 80017e4:	6010      	str	r0, [r2, #0]
 80017e6:	7019      	strb	r1, [r3, #0]
 80017e8:	4608      	mov	r0, r1
 80017ea:	bc10      	pop	{r4}
 80017ec:	4770      	bx	lr

080017ee <__sfputs_r>:
 80017ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f0:	4606      	mov	r6, r0
 80017f2:	460f      	mov	r7, r1
 80017f4:	4614      	mov	r4, r2
 80017f6:	18d5      	adds	r5, r2, r3
 80017f8:	42ac      	cmp	r4, r5
 80017fa:	d101      	bne.n	8001800 <__sfputs_r+0x12>
 80017fc:	2000      	movs	r0, #0
 80017fe:	e007      	b.n	8001810 <__sfputs_r+0x22>
 8001800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001804:	463a      	mov	r2, r7
 8001806:	4630      	mov	r0, r6
 8001808:	f7ff ffdc 	bl	80017c4 <__sfputc_r>
 800180c:	1c43      	adds	r3, r0, #1
 800180e:	d1f3      	bne.n	80017f8 <__sfputs_r+0xa>
 8001810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001814 <_vfiprintf_r>:
 8001814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001818:	460d      	mov	r5, r1
 800181a:	b09d      	sub	sp, #116	@ 0x74
 800181c:	4614      	mov	r4, r2
 800181e:	4698      	mov	r8, r3
 8001820:	4606      	mov	r6, r0
 8001822:	b118      	cbz	r0, 800182c <_vfiprintf_r+0x18>
 8001824:	6a03      	ldr	r3, [r0, #32]
 8001826:	b90b      	cbnz	r3, 800182c <_vfiprintf_r+0x18>
 8001828:	f7ff fdcc 	bl	80013c4 <__sinit>
 800182c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800182e:	07d9      	lsls	r1, r3, #31
 8001830:	d405      	bmi.n	800183e <_vfiprintf_r+0x2a>
 8001832:	89ab      	ldrh	r3, [r5, #12]
 8001834:	059a      	lsls	r2, r3, #22
 8001836:	d402      	bmi.n	800183e <_vfiprintf_r+0x2a>
 8001838:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800183a:	f7ff fec8 	bl	80015ce <__retarget_lock_acquire_recursive>
 800183e:	89ab      	ldrh	r3, [r5, #12]
 8001840:	071b      	lsls	r3, r3, #28
 8001842:	d501      	bpl.n	8001848 <_vfiprintf_r+0x34>
 8001844:	692b      	ldr	r3, [r5, #16]
 8001846:	b99b      	cbnz	r3, 8001870 <_vfiprintf_r+0x5c>
 8001848:	4629      	mov	r1, r5
 800184a:	4630      	mov	r0, r6
 800184c:	f000 fb6c 	bl	8001f28 <__swsetup_r>
 8001850:	b170      	cbz	r0, 8001870 <_vfiprintf_r+0x5c>
 8001852:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001854:	07dc      	lsls	r4, r3, #31
 8001856:	d504      	bpl.n	8001862 <_vfiprintf_r+0x4e>
 8001858:	f04f 30ff 	mov.w	r0, #4294967295
 800185c:	b01d      	add	sp, #116	@ 0x74
 800185e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001862:	89ab      	ldrh	r3, [r5, #12]
 8001864:	0598      	lsls	r0, r3, #22
 8001866:	d4f7      	bmi.n	8001858 <_vfiprintf_r+0x44>
 8001868:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800186a:	f7ff feb1 	bl	80015d0 <__retarget_lock_release_recursive>
 800186e:	e7f3      	b.n	8001858 <_vfiprintf_r+0x44>
 8001870:	2300      	movs	r3, #0
 8001872:	9309      	str	r3, [sp, #36]	@ 0x24
 8001874:	2320      	movs	r3, #32
 8001876:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800187a:	f8cd 800c 	str.w	r8, [sp, #12]
 800187e:	2330      	movs	r3, #48	@ 0x30
 8001880:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001a30 <_vfiprintf_r+0x21c>
 8001884:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001888:	f04f 0901 	mov.w	r9, #1
 800188c:	4623      	mov	r3, r4
 800188e:	469a      	mov	sl, r3
 8001890:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001894:	b10a      	cbz	r2, 800189a <_vfiprintf_r+0x86>
 8001896:	2a25      	cmp	r2, #37	@ 0x25
 8001898:	d1f9      	bne.n	800188e <_vfiprintf_r+0x7a>
 800189a:	ebba 0b04 	subs.w	fp, sl, r4
 800189e:	d00b      	beq.n	80018b8 <_vfiprintf_r+0xa4>
 80018a0:	465b      	mov	r3, fp
 80018a2:	4622      	mov	r2, r4
 80018a4:	4629      	mov	r1, r5
 80018a6:	4630      	mov	r0, r6
 80018a8:	f7ff ffa1 	bl	80017ee <__sfputs_r>
 80018ac:	3001      	adds	r0, #1
 80018ae:	f000 80a7 	beq.w	8001a00 <_vfiprintf_r+0x1ec>
 80018b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80018b4:	445a      	add	r2, fp
 80018b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80018b8:	f89a 3000 	ldrb.w	r3, [sl]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 809f 	beq.w	8001a00 <_vfiprintf_r+0x1ec>
 80018c2:	2300      	movs	r3, #0
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295
 80018c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80018cc:	f10a 0a01 	add.w	sl, sl, #1
 80018d0:	9304      	str	r3, [sp, #16]
 80018d2:	9307      	str	r3, [sp, #28]
 80018d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80018d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80018da:	4654      	mov	r4, sl
 80018dc:	2205      	movs	r2, #5
 80018de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018e2:	4853      	ldr	r0, [pc, #332]	@ (8001a30 <_vfiprintf_r+0x21c>)
 80018e4:	f7fe fc74 	bl	80001d0 <memchr>
 80018e8:	9a04      	ldr	r2, [sp, #16]
 80018ea:	b9d8      	cbnz	r0, 8001924 <_vfiprintf_r+0x110>
 80018ec:	06d1      	lsls	r1, r2, #27
 80018ee:	bf44      	itt	mi
 80018f0:	2320      	movmi	r3, #32
 80018f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80018f6:	0713      	lsls	r3, r2, #28
 80018f8:	bf44      	itt	mi
 80018fa:	232b      	movmi	r3, #43	@ 0x2b
 80018fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001900:	f89a 3000 	ldrb.w	r3, [sl]
 8001904:	2b2a      	cmp	r3, #42	@ 0x2a
 8001906:	d015      	beq.n	8001934 <_vfiprintf_r+0x120>
 8001908:	9a07      	ldr	r2, [sp, #28]
 800190a:	4654      	mov	r4, sl
 800190c:	2000      	movs	r0, #0
 800190e:	f04f 0c0a 	mov.w	ip, #10
 8001912:	4621      	mov	r1, r4
 8001914:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001918:	3b30      	subs	r3, #48	@ 0x30
 800191a:	2b09      	cmp	r3, #9
 800191c:	d94b      	bls.n	80019b6 <_vfiprintf_r+0x1a2>
 800191e:	b1b0      	cbz	r0, 800194e <_vfiprintf_r+0x13a>
 8001920:	9207      	str	r2, [sp, #28]
 8001922:	e014      	b.n	800194e <_vfiprintf_r+0x13a>
 8001924:	eba0 0308 	sub.w	r3, r0, r8
 8001928:	fa09 f303 	lsl.w	r3, r9, r3
 800192c:	4313      	orrs	r3, r2
 800192e:	9304      	str	r3, [sp, #16]
 8001930:	46a2      	mov	sl, r4
 8001932:	e7d2      	b.n	80018da <_vfiprintf_r+0xc6>
 8001934:	9b03      	ldr	r3, [sp, #12]
 8001936:	1d19      	adds	r1, r3, #4
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	9103      	str	r1, [sp, #12]
 800193c:	2b00      	cmp	r3, #0
 800193e:	bfbb      	ittet	lt
 8001940:	425b      	neglt	r3, r3
 8001942:	f042 0202 	orrlt.w	r2, r2, #2
 8001946:	9307      	strge	r3, [sp, #28]
 8001948:	9307      	strlt	r3, [sp, #28]
 800194a:	bfb8      	it	lt
 800194c:	9204      	strlt	r2, [sp, #16]
 800194e:	7823      	ldrb	r3, [r4, #0]
 8001950:	2b2e      	cmp	r3, #46	@ 0x2e
 8001952:	d10a      	bne.n	800196a <_vfiprintf_r+0x156>
 8001954:	7863      	ldrb	r3, [r4, #1]
 8001956:	2b2a      	cmp	r3, #42	@ 0x2a
 8001958:	d132      	bne.n	80019c0 <_vfiprintf_r+0x1ac>
 800195a:	9b03      	ldr	r3, [sp, #12]
 800195c:	1d1a      	adds	r2, r3, #4
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	9203      	str	r2, [sp, #12]
 8001962:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001966:	3402      	adds	r4, #2
 8001968:	9305      	str	r3, [sp, #20]
 800196a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001a34 <_vfiprintf_r+0x220>
 800196e:	7821      	ldrb	r1, [r4, #0]
 8001970:	2203      	movs	r2, #3
 8001972:	4650      	mov	r0, sl
 8001974:	f7fe fc2c 	bl	80001d0 <memchr>
 8001978:	b138      	cbz	r0, 800198a <_vfiprintf_r+0x176>
 800197a:	9b04      	ldr	r3, [sp, #16]
 800197c:	eba0 000a 	sub.w	r0, r0, sl
 8001980:	2240      	movs	r2, #64	@ 0x40
 8001982:	4082      	lsls	r2, r0
 8001984:	4313      	orrs	r3, r2
 8001986:	3401      	adds	r4, #1
 8001988:	9304      	str	r3, [sp, #16]
 800198a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800198e:	482a      	ldr	r0, [pc, #168]	@ (8001a38 <_vfiprintf_r+0x224>)
 8001990:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001994:	2206      	movs	r2, #6
 8001996:	f7fe fc1b 	bl	80001d0 <memchr>
 800199a:	2800      	cmp	r0, #0
 800199c:	d03f      	beq.n	8001a1e <_vfiprintf_r+0x20a>
 800199e:	4b27      	ldr	r3, [pc, #156]	@ (8001a3c <_vfiprintf_r+0x228>)
 80019a0:	bb1b      	cbnz	r3, 80019ea <_vfiprintf_r+0x1d6>
 80019a2:	9b03      	ldr	r3, [sp, #12]
 80019a4:	3307      	adds	r3, #7
 80019a6:	f023 0307 	bic.w	r3, r3, #7
 80019aa:	3308      	adds	r3, #8
 80019ac:	9303      	str	r3, [sp, #12]
 80019ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80019b0:	443b      	add	r3, r7
 80019b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80019b4:	e76a      	b.n	800188c <_vfiprintf_r+0x78>
 80019b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80019ba:	460c      	mov	r4, r1
 80019bc:	2001      	movs	r0, #1
 80019be:	e7a8      	b.n	8001912 <_vfiprintf_r+0xfe>
 80019c0:	2300      	movs	r3, #0
 80019c2:	3401      	adds	r4, #1
 80019c4:	9305      	str	r3, [sp, #20]
 80019c6:	4619      	mov	r1, r3
 80019c8:	f04f 0c0a 	mov.w	ip, #10
 80019cc:	4620      	mov	r0, r4
 80019ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80019d2:	3a30      	subs	r2, #48	@ 0x30
 80019d4:	2a09      	cmp	r2, #9
 80019d6:	d903      	bls.n	80019e0 <_vfiprintf_r+0x1cc>
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0c6      	beq.n	800196a <_vfiprintf_r+0x156>
 80019dc:	9105      	str	r1, [sp, #20]
 80019de:	e7c4      	b.n	800196a <_vfiprintf_r+0x156>
 80019e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80019e4:	4604      	mov	r4, r0
 80019e6:	2301      	movs	r3, #1
 80019e8:	e7f0      	b.n	80019cc <_vfiprintf_r+0x1b8>
 80019ea:	ab03      	add	r3, sp, #12
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	462a      	mov	r2, r5
 80019f0:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <_vfiprintf_r+0x22c>)
 80019f2:	a904      	add	r1, sp, #16
 80019f4:	4630      	mov	r0, r6
 80019f6:	f3af 8000 	nop.w
 80019fa:	4607      	mov	r7, r0
 80019fc:	1c78      	adds	r0, r7, #1
 80019fe:	d1d6      	bne.n	80019ae <_vfiprintf_r+0x19a>
 8001a00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001a02:	07d9      	lsls	r1, r3, #31
 8001a04:	d405      	bmi.n	8001a12 <_vfiprintf_r+0x1fe>
 8001a06:	89ab      	ldrh	r3, [r5, #12]
 8001a08:	059a      	lsls	r2, r3, #22
 8001a0a:	d402      	bmi.n	8001a12 <_vfiprintf_r+0x1fe>
 8001a0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001a0e:	f7ff fddf 	bl	80015d0 <__retarget_lock_release_recursive>
 8001a12:	89ab      	ldrh	r3, [r5, #12]
 8001a14:	065b      	lsls	r3, r3, #25
 8001a16:	f53f af1f 	bmi.w	8001858 <_vfiprintf_r+0x44>
 8001a1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001a1c:	e71e      	b.n	800185c <_vfiprintf_r+0x48>
 8001a1e:	ab03      	add	r3, sp, #12
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	462a      	mov	r2, r5
 8001a24:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <_vfiprintf_r+0x22c>)
 8001a26:	a904      	add	r1, sp, #16
 8001a28:	4630      	mov	r0, r6
 8001a2a:	f000 f879 	bl	8001b20 <_printf_i>
 8001a2e:	e7e4      	b.n	80019fa <_vfiprintf_r+0x1e6>
 8001a30:	08002124 	.word	0x08002124
 8001a34:	0800212a 	.word	0x0800212a
 8001a38:	0800212e 	.word	0x0800212e
 8001a3c:	00000000 	.word	0x00000000
 8001a40:	080017ef 	.word	0x080017ef

08001a44 <_printf_common>:
 8001a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a48:	4616      	mov	r6, r2
 8001a4a:	4698      	mov	r8, r3
 8001a4c:	688a      	ldr	r2, [r1, #8]
 8001a4e:	690b      	ldr	r3, [r1, #16]
 8001a50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001a54:	4293      	cmp	r3, r2
 8001a56:	bfb8      	it	lt
 8001a58:	4613      	movlt	r3, r2
 8001a5a:	6033      	str	r3, [r6, #0]
 8001a5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001a60:	4607      	mov	r7, r0
 8001a62:	460c      	mov	r4, r1
 8001a64:	b10a      	cbz	r2, 8001a6a <_printf_common+0x26>
 8001a66:	3301      	adds	r3, #1
 8001a68:	6033      	str	r3, [r6, #0]
 8001a6a:	6823      	ldr	r3, [r4, #0]
 8001a6c:	0699      	lsls	r1, r3, #26
 8001a6e:	bf42      	ittt	mi
 8001a70:	6833      	ldrmi	r3, [r6, #0]
 8001a72:	3302      	addmi	r3, #2
 8001a74:	6033      	strmi	r3, [r6, #0]
 8001a76:	6825      	ldr	r5, [r4, #0]
 8001a78:	f015 0506 	ands.w	r5, r5, #6
 8001a7c:	d106      	bne.n	8001a8c <_printf_common+0x48>
 8001a7e:	f104 0a19 	add.w	sl, r4, #25
 8001a82:	68e3      	ldr	r3, [r4, #12]
 8001a84:	6832      	ldr	r2, [r6, #0]
 8001a86:	1a9b      	subs	r3, r3, r2
 8001a88:	42ab      	cmp	r3, r5
 8001a8a:	dc26      	bgt.n	8001ada <_printf_common+0x96>
 8001a8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001a90:	6822      	ldr	r2, [r4, #0]
 8001a92:	3b00      	subs	r3, #0
 8001a94:	bf18      	it	ne
 8001a96:	2301      	movne	r3, #1
 8001a98:	0692      	lsls	r2, r2, #26
 8001a9a:	d42b      	bmi.n	8001af4 <_printf_common+0xb0>
 8001a9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001aa0:	4641      	mov	r1, r8
 8001aa2:	4638      	mov	r0, r7
 8001aa4:	47c8      	blx	r9
 8001aa6:	3001      	adds	r0, #1
 8001aa8:	d01e      	beq.n	8001ae8 <_printf_common+0xa4>
 8001aaa:	6823      	ldr	r3, [r4, #0]
 8001aac:	6922      	ldr	r2, [r4, #16]
 8001aae:	f003 0306 	and.w	r3, r3, #6
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	bf02      	ittt	eq
 8001ab6:	68e5      	ldreq	r5, [r4, #12]
 8001ab8:	6833      	ldreq	r3, [r6, #0]
 8001aba:	1aed      	subeq	r5, r5, r3
 8001abc:	68a3      	ldr	r3, [r4, #8]
 8001abe:	bf0c      	ite	eq
 8001ac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ac4:	2500      	movne	r5, #0
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	bfc4      	itt	gt
 8001aca:	1a9b      	subgt	r3, r3, r2
 8001acc:	18ed      	addgt	r5, r5, r3
 8001ace:	2600      	movs	r6, #0
 8001ad0:	341a      	adds	r4, #26
 8001ad2:	42b5      	cmp	r5, r6
 8001ad4:	d11a      	bne.n	8001b0c <_printf_common+0xc8>
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	e008      	b.n	8001aec <_printf_common+0xa8>
 8001ada:	2301      	movs	r3, #1
 8001adc:	4652      	mov	r2, sl
 8001ade:	4641      	mov	r1, r8
 8001ae0:	4638      	mov	r0, r7
 8001ae2:	47c8      	blx	r9
 8001ae4:	3001      	adds	r0, #1
 8001ae6:	d103      	bne.n	8001af0 <_printf_common+0xac>
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001af0:	3501      	adds	r5, #1
 8001af2:	e7c6      	b.n	8001a82 <_printf_common+0x3e>
 8001af4:	18e1      	adds	r1, r4, r3
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	2030      	movs	r0, #48	@ 0x30
 8001afa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001afe:	4422      	add	r2, r4
 8001b00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001b04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001b08:	3302      	adds	r3, #2
 8001b0a:	e7c7      	b.n	8001a9c <_printf_common+0x58>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	4622      	mov	r2, r4
 8001b10:	4641      	mov	r1, r8
 8001b12:	4638      	mov	r0, r7
 8001b14:	47c8      	blx	r9
 8001b16:	3001      	adds	r0, #1
 8001b18:	d0e6      	beq.n	8001ae8 <_printf_common+0xa4>
 8001b1a:	3601      	adds	r6, #1
 8001b1c:	e7d9      	b.n	8001ad2 <_printf_common+0x8e>
	...

08001b20 <_printf_i>:
 8001b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b24:	7e0f      	ldrb	r7, [r1, #24]
 8001b26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001b28:	2f78      	cmp	r7, #120	@ 0x78
 8001b2a:	4691      	mov	r9, r2
 8001b2c:	4680      	mov	r8, r0
 8001b2e:	460c      	mov	r4, r1
 8001b30:	469a      	mov	sl, r3
 8001b32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001b36:	d807      	bhi.n	8001b48 <_printf_i+0x28>
 8001b38:	2f62      	cmp	r7, #98	@ 0x62
 8001b3a:	d80a      	bhi.n	8001b52 <_printf_i+0x32>
 8001b3c:	2f00      	cmp	r7, #0
 8001b3e:	f000 80d1 	beq.w	8001ce4 <_printf_i+0x1c4>
 8001b42:	2f58      	cmp	r7, #88	@ 0x58
 8001b44:	f000 80b8 	beq.w	8001cb8 <_printf_i+0x198>
 8001b48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001b4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001b50:	e03a      	b.n	8001bc8 <_printf_i+0xa8>
 8001b52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001b56:	2b15      	cmp	r3, #21
 8001b58:	d8f6      	bhi.n	8001b48 <_printf_i+0x28>
 8001b5a:	a101      	add	r1, pc, #4	@ (adr r1, 8001b60 <_printf_i+0x40>)
 8001b5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001b60:	08001bb9 	.word	0x08001bb9
 8001b64:	08001bcd 	.word	0x08001bcd
 8001b68:	08001b49 	.word	0x08001b49
 8001b6c:	08001b49 	.word	0x08001b49
 8001b70:	08001b49 	.word	0x08001b49
 8001b74:	08001b49 	.word	0x08001b49
 8001b78:	08001bcd 	.word	0x08001bcd
 8001b7c:	08001b49 	.word	0x08001b49
 8001b80:	08001b49 	.word	0x08001b49
 8001b84:	08001b49 	.word	0x08001b49
 8001b88:	08001b49 	.word	0x08001b49
 8001b8c:	08001ccb 	.word	0x08001ccb
 8001b90:	08001bf7 	.word	0x08001bf7
 8001b94:	08001c85 	.word	0x08001c85
 8001b98:	08001b49 	.word	0x08001b49
 8001b9c:	08001b49 	.word	0x08001b49
 8001ba0:	08001ced 	.word	0x08001ced
 8001ba4:	08001b49 	.word	0x08001b49
 8001ba8:	08001bf7 	.word	0x08001bf7
 8001bac:	08001b49 	.word	0x08001b49
 8001bb0:	08001b49 	.word	0x08001b49
 8001bb4:	08001c8d 	.word	0x08001c8d
 8001bb8:	6833      	ldr	r3, [r6, #0]
 8001bba:	1d1a      	adds	r2, r3, #4
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6032      	str	r2, [r6, #0]
 8001bc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001bc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e09c      	b.n	8001d06 <_printf_i+0x1e6>
 8001bcc:	6833      	ldr	r3, [r6, #0]
 8001bce:	6820      	ldr	r0, [r4, #0]
 8001bd0:	1d19      	adds	r1, r3, #4
 8001bd2:	6031      	str	r1, [r6, #0]
 8001bd4:	0606      	lsls	r6, r0, #24
 8001bd6:	d501      	bpl.n	8001bdc <_printf_i+0xbc>
 8001bd8:	681d      	ldr	r5, [r3, #0]
 8001bda:	e003      	b.n	8001be4 <_printf_i+0xc4>
 8001bdc:	0645      	lsls	r5, r0, #25
 8001bde:	d5fb      	bpl.n	8001bd8 <_printf_i+0xb8>
 8001be0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001be4:	2d00      	cmp	r5, #0
 8001be6:	da03      	bge.n	8001bf0 <_printf_i+0xd0>
 8001be8:	232d      	movs	r3, #45	@ 0x2d
 8001bea:	426d      	negs	r5, r5
 8001bec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001bf0:	4858      	ldr	r0, [pc, #352]	@ (8001d54 <_printf_i+0x234>)
 8001bf2:	230a      	movs	r3, #10
 8001bf4:	e011      	b.n	8001c1a <_printf_i+0xfa>
 8001bf6:	6821      	ldr	r1, [r4, #0]
 8001bf8:	6833      	ldr	r3, [r6, #0]
 8001bfa:	0608      	lsls	r0, r1, #24
 8001bfc:	f853 5b04 	ldr.w	r5, [r3], #4
 8001c00:	d402      	bmi.n	8001c08 <_printf_i+0xe8>
 8001c02:	0649      	lsls	r1, r1, #25
 8001c04:	bf48      	it	mi
 8001c06:	b2ad      	uxthmi	r5, r5
 8001c08:	2f6f      	cmp	r7, #111	@ 0x6f
 8001c0a:	4852      	ldr	r0, [pc, #328]	@ (8001d54 <_printf_i+0x234>)
 8001c0c:	6033      	str	r3, [r6, #0]
 8001c0e:	bf14      	ite	ne
 8001c10:	230a      	movne	r3, #10
 8001c12:	2308      	moveq	r3, #8
 8001c14:	2100      	movs	r1, #0
 8001c16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001c1a:	6866      	ldr	r6, [r4, #4]
 8001c1c:	60a6      	str	r6, [r4, #8]
 8001c1e:	2e00      	cmp	r6, #0
 8001c20:	db05      	blt.n	8001c2e <_printf_i+0x10e>
 8001c22:	6821      	ldr	r1, [r4, #0]
 8001c24:	432e      	orrs	r6, r5
 8001c26:	f021 0104 	bic.w	r1, r1, #4
 8001c2a:	6021      	str	r1, [r4, #0]
 8001c2c:	d04b      	beq.n	8001cc6 <_printf_i+0x1a6>
 8001c2e:	4616      	mov	r6, r2
 8001c30:	fbb5 f1f3 	udiv	r1, r5, r3
 8001c34:	fb03 5711 	mls	r7, r3, r1, r5
 8001c38:	5dc7      	ldrb	r7, [r0, r7]
 8001c3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001c3e:	462f      	mov	r7, r5
 8001c40:	42bb      	cmp	r3, r7
 8001c42:	460d      	mov	r5, r1
 8001c44:	d9f4      	bls.n	8001c30 <_printf_i+0x110>
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d10b      	bne.n	8001c62 <_printf_i+0x142>
 8001c4a:	6823      	ldr	r3, [r4, #0]
 8001c4c:	07df      	lsls	r7, r3, #31
 8001c4e:	d508      	bpl.n	8001c62 <_printf_i+0x142>
 8001c50:	6923      	ldr	r3, [r4, #16]
 8001c52:	6861      	ldr	r1, [r4, #4]
 8001c54:	4299      	cmp	r1, r3
 8001c56:	bfde      	ittt	le
 8001c58:	2330      	movle	r3, #48	@ 0x30
 8001c5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001c5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001c62:	1b92      	subs	r2, r2, r6
 8001c64:	6122      	str	r2, [r4, #16]
 8001c66:	f8cd a000 	str.w	sl, [sp]
 8001c6a:	464b      	mov	r3, r9
 8001c6c:	aa03      	add	r2, sp, #12
 8001c6e:	4621      	mov	r1, r4
 8001c70:	4640      	mov	r0, r8
 8001c72:	f7ff fee7 	bl	8001a44 <_printf_common>
 8001c76:	3001      	adds	r0, #1
 8001c78:	d14a      	bne.n	8001d10 <_printf_i+0x1f0>
 8001c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7e:	b004      	add	sp, #16
 8001c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	f043 0320 	orr.w	r3, r3, #32
 8001c8a:	6023      	str	r3, [r4, #0]
 8001c8c:	4832      	ldr	r0, [pc, #200]	@ (8001d58 <_printf_i+0x238>)
 8001c8e:	2778      	movs	r7, #120	@ 0x78
 8001c90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001c94:	6823      	ldr	r3, [r4, #0]
 8001c96:	6831      	ldr	r1, [r6, #0]
 8001c98:	061f      	lsls	r7, r3, #24
 8001c9a:	f851 5b04 	ldr.w	r5, [r1], #4
 8001c9e:	d402      	bmi.n	8001ca6 <_printf_i+0x186>
 8001ca0:	065f      	lsls	r7, r3, #25
 8001ca2:	bf48      	it	mi
 8001ca4:	b2ad      	uxthmi	r5, r5
 8001ca6:	6031      	str	r1, [r6, #0]
 8001ca8:	07d9      	lsls	r1, r3, #31
 8001caa:	bf44      	itt	mi
 8001cac:	f043 0320 	orrmi.w	r3, r3, #32
 8001cb0:	6023      	strmi	r3, [r4, #0]
 8001cb2:	b11d      	cbz	r5, 8001cbc <_printf_i+0x19c>
 8001cb4:	2310      	movs	r3, #16
 8001cb6:	e7ad      	b.n	8001c14 <_printf_i+0xf4>
 8001cb8:	4826      	ldr	r0, [pc, #152]	@ (8001d54 <_printf_i+0x234>)
 8001cba:	e7e9      	b.n	8001c90 <_printf_i+0x170>
 8001cbc:	6823      	ldr	r3, [r4, #0]
 8001cbe:	f023 0320 	bic.w	r3, r3, #32
 8001cc2:	6023      	str	r3, [r4, #0]
 8001cc4:	e7f6      	b.n	8001cb4 <_printf_i+0x194>
 8001cc6:	4616      	mov	r6, r2
 8001cc8:	e7bd      	b.n	8001c46 <_printf_i+0x126>
 8001cca:	6833      	ldr	r3, [r6, #0]
 8001ccc:	6825      	ldr	r5, [r4, #0]
 8001cce:	6961      	ldr	r1, [r4, #20]
 8001cd0:	1d18      	adds	r0, r3, #4
 8001cd2:	6030      	str	r0, [r6, #0]
 8001cd4:	062e      	lsls	r6, r5, #24
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	d501      	bpl.n	8001cde <_printf_i+0x1be>
 8001cda:	6019      	str	r1, [r3, #0]
 8001cdc:	e002      	b.n	8001ce4 <_printf_i+0x1c4>
 8001cde:	0668      	lsls	r0, r5, #25
 8001ce0:	d5fb      	bpl.n	8001cda <_printf_i+0x1ba>
 8001ce2:	8019      	strh	r1, [r3, #0]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	6123      	str	r3, [r4, #16]
 8001ce8:	4616      	mov	r6, r2
 8001cea:	e7bc      	b.n	8001c66 <_printf_i+0x146>
 8001cec:	6833      	ldr	r3, [r6, #0]
 8001cee:	1d1a      	adds	r2, r3, #4
 8001cf0:	6032      	str	r2, [r6, #0]
 8001cf2:	681e      	ldr	r6, [r3, #0]
 8001cf4:	6862      	ldr	r2, [r4, #4]
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4630      	mov	r0, r6
 8001cfa:	f7fe fa69 	bl	80001d0 <memchr>
 8001cfe:	b108      	cbz	r0, 8001d04 <_printf_i+0x1e4>
 8001d00:	1b80      	subs	r0, r0, r6
 8001d02:	6060      	str	r0, [r4, #4]
 8001d04:	6863      	ldr	r3, [r4, #4]
 8001d06:	6123      	str	r3, [r4, #16]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d0e:	e7aa      	b.n	8001c66 <_printf_i+0x146>
 8001d10:	6923      	ldr	r3, [r4, #16]
 8001d12:	4632      	mov	r2, r6
 8001d14:	4649      	mov	r1, r9
 8001d16:	4640      	mov	r0, r8
 8001d18:	47d0      	blx	sl
 8001d1a:	3001      	adds	r0, #1
 8001d1c:	d0ad      	beq.n	8001c7a <_printf_i+0x15a>
 8001d1e:	6823      	ldr	r3, [r4, #0]
 8001d20:	079b      	lsls	r3, r3, #30
 8001d22:	d413      	bmi.n	8001d4c <_printf_i+0x22c>
 8001d24:	68e0      	ldr	r0, [r4, #12]
 8001d26:	9b03      	ldr	r3, [sp, #12]
 8001d28:	4298      	cmp	r0, r3
 8001d2a:	bfb8      	it	lt
 8001d2c:	4618      	movlt	r0, r3
 8001d2e:	e7a6      	b.n	8001c7e <_printf_i+0x15e>
 8001d30:	2301      	movs	r3, #1
 8001d32:	4632      	mov	r2, r6
 8001d34:	4649      	mov	r1, r9
 8001d36:	4640      	mov	r0, r8
 8001d38:	47d0      	blx	sl
 8001d3a:	3001      	adds	r0, #1
 8001d3c:	d09d      	beq.n	8001c7a <_printf_i+0x15a>
 8001d3e:	3501      	adds	r5, #1
 8001d40:	68e3      	ldr	r3, [r4, #12]
 8001d42:	9903      	ldr	r1, [sp, #12]
 8001d44:	1a5b      	subs	r3, r3, r1
 8001d46:	42ab      	cmp	r3, r5
 8001d48:	dcf2      	bgt.n	8001d30 <_printf_i+0x210>
 8001d4a:	e7eb      	b.n	8001d24 <_printf_i+0x204>
 8001d4c:	2500      	movs	r5, #0
 8001d4e:	f104 0619 	add.w	r6, r4, #25
 8001d52:	e7f5      	b.n	8001d40 <_printf_i+0x220>
 8001d54:	08002135 	.word	0x08002135
 8001d58:	08002146 	.word	0x08002146

08001d5c <__sflush_r>:
 8001d5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d62:	0716      	lsls	r6, r2, #28
 8001d64:	4605      	mov	r5, r0
 8001d66:	460c      	mov	r4, r1
 8001d68:	d454      	bmi.n	8001e14 <__sflush_r+0xb8>
 8001d6a:	684b      	ldr	r3, [r1, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	dc02      	bgt.n	8001d76 <__sflush_r+0x1a>
 8001d70:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	dd48      	ble.n	8001e08 <__sflush_r+0xac>
 8001d76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001d78:	2e00      	cmp	r6, #0
 8001d7a:	d045      	beq.n	8001e08 <__sflush_r+0xac>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001d82:	682f      	ldr	r7, [r5, #0]
 8001d84:	6a21      	ldr	r1, [r4, #32]
 8001d86:	602b      	str	r3, [r5, #0]
 8001d88:	d030      	beq.n	8001dec <__sflush_r+0x90>
 8001d8a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001d8c:	89a3      	ldrh	r3, [r4, #12]
 8001d8e:	0759      	lsls	r1, r3, #29
 8001d90:	d505      	bpl.n	8001d9e <__sflush_r+0x42>
 8001d92:	6863      	ldr	r3, [r4, #4]
 8001d94:	1ad2      	subs	r2, r2, r3
 8001d96:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001d98:	b10b      	cbz	r3, 8001d9e <__sflush_r+0x42>
 8001d9a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001d9c:	1ad2      	subs	r2, r2, r3
 8001d9e:	2300      	movs	r3, #0
 8001da0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001da2:	6a21      	ldr	r1, [r4, #32]
 8001da4:	4628      	mov	r0, r5
 8001da6:	47b0      	blx	r6
 8001da8:	1c43      	adds	r3, r0, #1
 8001daa:	89a3      	ldrh	r3, [r4, #12]
 8001dac:	d106      	bne.n	8001dbc <__sflush_r+0x60>
 8001dae:	6829      	ldr	r1, [r5, #0]
 8001db0:	291d      	cmp	r1, #29
 8001db2:	d82b      	bhi.n	8001e0c <__sflush_r+0xb0>
 8001db4:	4a28      	ldr	r2, [pc, #160]	@ (8001e58 <__sflush_r+0xfc>)
 8001db6:	40ca      	lsrs	r2, r1
 8001db8:	07d6      	lsls	r6, r2, #31
 8001dba:	d527      	bpl.n	8001e0c <__sflush_r+0xb0>
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	6062      	str	r2, [r4, #4]
 8001dc0:	04d9      	lsls	r1, r3, #19
 8001dc2:	6922      	ldr	r2, [r4, #16]
 8001dc4:	6022      	str	r2, [r4, #0]
 8001dc6:	d504      	bpl.n	8001dd2 <__sflush_r+0x76>
 8001dc8:	1c42      	adds	r2, r0, #1
 8001dca:	d101      	bne.n	8001dd0 <__sflush_r+0x74>
 8001dcc:	682b      	ldr	r3, [r5, #0]
 8001dce:	b903      	cbnz	r3, 8001dd2 <__sflush_r+0x76>
 8001dd0:	6560      	str	r0, [r4, #84]	@ 0x54
 8001dd2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001dd4:	602f      	str	r7, [r5, #0]
 8001dd6:	b1b9      	cbz	r1, 8001e08 <__sflush_r+0xac>
 8001dd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001ddc:	4299      	cmp	r1, r3
 8001dde:	d002      	beq.n	8001de6 <__sflush_r+0x8a>
 8001de0:	4628      	mov	r0, r5
 8001de2:	f7ff fbf7 	bl	80015d4 <_free_r>
 8001de6:	2300      	movs	r3, #0
 8001de8:	6363      	str	r3, [r4, #52]	@ 0x34
 8001dea:	e00d      	b.n	8001e08 <__sflush_r+0xac>
 8001dec:	2301      	movs	r3, #1
 8001dee:	4628      	mov	r0, r5
 8001df0:	47b0      	blx	r6
 8001df2:	4602      	mov	r2, r0
 8001df4:	1c50      	adds	r0, r2, #1
 8001df6:	d1c9      	bne.n	8001d8c <__sflush_r+0x30>
 8001df8:	682b      	ldr	r3, [r5, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0c6      	beq.n	8001d8c <__sflush_r+0x30>
 8001dfe:	2b1d      	cmp	r3, #29
 8001e00:	d001      	beq.n	8001e06 <__sflush_r+0xaa>
 8001e02:	2b16      	cmp	r3, #22
 8001e04:	d11d      	bne.n	8001e42 <__sflush_r+0xe6>
 8001e06:	602f      	str	r7, [r5, #0]
 8001e08:	2000      	movs	r0, #0
 8001e0a:	e021      	b.n	8001e50 <__sflush_r+0xf4>
 8001e0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e10:	b21b      	sxth	r3, r3
 8001e12:	e01a      	b.n	8001e4a <__sflush_r+0xee>
 8001e14:	690f      	ldr	r7, [r1, #16]
 8001e16:	2f00      	cmp	r7, #0
 8001e18:	d0f6      	beq.n	8001e08 <__sflush_r+0xac>
 8001e1a:	0793      	lsls	r3, r2, #30
 8001e1c:	680e      	ldr	r6, [r1, #0]
 8001e1e:	bf08      	it	eq
 8001e20:	694b      	ldreq	r3, [r1, #20]
 8001e22:	600f      	str	r7, [r1, #0]
 8001e24:	bf18      	it	ne
 8001e26:	2300      	movne	r3, #0
 8001e28:	1bf6      	subs	r6, r6, r7
 8001e2a:	608b      	str	r3, [r1, #8]
 8001e2c:	2e00      	cmp	r6, #0
 8001e2e:	ddeb      	ble.n	8001e08 <__sflush_r+0xac>
 8001e30:	6a21      	ldr	r1, [r4, #32]
 8001e32:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001e36:	4633      	mov	r3, r6
 8001e38:	463a      	mov	r2, r7
 8001e3a:	4628      	mov	r0, r5
 8001e3c:	47e0      	blx	ip
 8001e3e:	2800      	cmp	r0, #0
 8001e40:	dc07      	bgt.n	8001e52 <__sflush_r+0xf6>
 8001e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e4a:	81a3      	strh	r3, [r4, #12]
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e52:	4407      	add	r7, r0
 8001e54:	1a36      	subs	r6, r6, r0
 8001e56:	e7e9      	b.n	8001e2c <__sflush_r+0xd0>
 8001e58:	20400001 	.word	0x20400001

08001e5c <_fflush_r>:
 8001e5c:	b538      	push	{r3, r4, r5, lr}
 8001e5e:	690b      	ldr	r3, [r1, #16]
 8001e60:	4605      	mov	r5, r0
 8001e62:	460c      	mov	r4, r1
 8001e64:	b913      	cbnz	r3, 8001e6c <_fflush_r+0x10>
 8001e66:	2500      	movs	r5, #0
 8001e68:	4628      	mov	r0, r5
 8001e6a:	bd38      	pop	{r3, r4, r5, pc}
 8001e6c:	b118      	cbz	r0, 8001e76 <_fflush_r+0x1a>
 8001e6e:	6a03      	ldr	r3, [r0, #32]
 8001e70:	b90b      	cbnz	r3, 8001e76 <_fflush_r+0x1a>
 8001e72:	f7ff faa7 	bl	80013c4 <__sinit>
 8001e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f3      	beq.n	8001e66 <_fflush_r+0xa>
 8001e7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001e80:	07d0      	lsls	r0, r2, #31
 8001e82:	d404      	bmi.n	8001e8e <_fflush_r+0x32>
 8001e84:	0599      	lsls	r1, r3, #22
 8001e86:	d402      	bmi.n	8001e8e <_fflush_r+0x32>
 8001e88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001e8a:	f7ff fba0 	bl	80015ce <__retarget_lock_acquire_recursive>
 8001e8e:	4628      	mov	r0, r5
 8001e90:	4621      	mov	r1, r4
 8001e92:	f7ff ff63 	bl	8001d5c <__sflush_r>
 8001e96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001e98:	07da      	lsls	r2, r3, #31
 8001e9a:	4605      	mov	r5, r0
 8001e9c:	d4e4      	bmi.n	8001e68 <_fflush_r+0xc>
 8001e9e:	89a3      	ldrh	r3, [r4, #12]
 8001ea0:	059b      	lsls	r3, r3, #22
 8001ea2:	d4e1      	bmi.n	8001e68 <_fflush_r+0xc>
 8001ea4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001ea6:	f7ff fb93 	bl	80015d0 <__retarget_lock_release_recursive>
 8001eaa:	e7dd      	b.n	8001e68 <_fflush_r+0xc>

08001eac <__swbuf_r>:
 8001eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eae:	460e      	mov	r6, r1
 8001eb0:	4614      	mov	r4, r2
 8001eb2:	4605      	mov	r5, r0
 8001eb4:	b118      	cbz	r0, 8001ebe <__swbuf_r+0x12>
 8001eb6:	6a03      	ldr	r3, [r0, #32]
 8001eb8:	b90b      	cbnz	r3, 8001ebe <__swbuf_r+0x12>
 8001eba:	f7ff fa83 	bl	80013c4 <__sinit>
 8001ebe:	69a3      	ldr	r3, [r4, #24]
 8001ec0:	60a3      	str	r3, [r4, #8]
 8001ec2:	89a3      	ldrh	r3, [r4, #12]
 8001ec4:	071a      	lsls	r2, r3, #28
 8001ec6:	d501      	bpl.n	8001ecc <__swbuf_r+0x20>
 8001ec8:	6923      	ldr	r3, [r4, #16]
 8001eca:	b943      	cbnz	r3, 8001ede <__swbuf_r+0x32>
 8001ecc:	4621      	mov	r1, r4
 8001ece:	4628      	mov	r0, r5
 8001ed0:	f000 f82a 	bl	8001f28 <__swsetup_r>
 8001ed4:	b118      	cbz	r0, 8001ede <__swbuf_r+0x32>
 8001ed6:	f04f 37ff 	mov.w	r7, #4294967295
 8001eda:	4638      	mov	r0, r7
 8001edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	6922      	ldr	r2, [r4, #16]
 8001ee2:	1a98      	subs	r0, r3, r2
 8001ee4:	6963      	ldr	r3, [r4, #20]
 8001ee6:	b2f6      	uxtb	r6, r6
 8001ee8:	4283      	cmp	r3, r0
 8001eea:	4637      	mov	r7, r6
 8001eec:	dc05      	bgt.n	8001efa <__swbuf_r+0x4e>
 8001eee:	4621      	mov	r1, r4
 8001ef0:	4628      	mov	r0, r5
 8001ef2:	f7ff ffb3 	bl	8001e5c <_fflush_r>
 8001ef6:	2800      	cmp	r0, #0
 8001ef8:	d1ed      	bne.n	8001ed6 <__swbuf_r+0x2a>
 8001efa:	68a3      	ldr	r3, [r4, #8]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	60a3      	str	r3, [r4, #8]
 8001f00:	6823      	ldr	r3, [r4, #0]
 8001f02:	1c5a      	adds	r2, r3, #1
 8001f04:	6022      	str	r2, [r4, #0]
 8001f06:	701e      	strb	r6, [r3, #0]
 8001f08:	6962      	ldr	r2, [r4, #20]
 8001f0a:	1c43      	adds	r3, r0, #1
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d004      	beq.n	8001f1a <__swbuf_r+0x6e>
 8001f10:	89a3      	ldrh	r3, [r4, #12]
 8001f12:	07db      	lsls	r3, r3, #31
 8001f14:	d5e1      	bpl.n	8001eda <__swbuf_r+0x2e>
 8001f16:	2e0a      	cmp	r6, #10
 8001f18:	d1df      	bne.n	8001eda <__swbuf_r+0x2e>
 8001f1a:	4621      	mov	r1, r4
 8001f1c:	4628      	mov	r0, r5
 8001f1e:	f7ff ff9d 	bl	8001e5c <_fflush_r>
 8001f22:	2800      	cmp	r0, #0
 8001f24:	d0d9      	beq.n	8001eda <__swbuf_r+0x2e>
 8001f26:	e7d6      	b.n	8001ed6 <__swbuf_r+0x2a>

08001f28 <__swsetup_r>:
 8001f28:	b538      	push	{r3, r4, r5, lr}
 8001f2a:	4b29      	ldr	r3, [pc, #164]	@ (8001fd0 <__swsetup_r+0xa8>)
 8001f2c:	4605      	mov	r5, r0
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	460c      	mov	r4, r1
 8001f32:	b118      	cbz	r0, 8001f3c <__swsetup_r+0x14>
 8001f34:	6a03      	ldr	r3, [r0, #32]
 8001f36:	b90b      	cbnz	r3, 8001f3c <__swsetup_r+0x14>
 8001f38:	f7ff fa44 	bl	80013c4 <__sinit>
 8001f3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f40:	0719      	lsls	r1, r3, #28
 8001f42:	d422      	bmi.n	8001f8a <__swsetup_r+0x62>
 8001f44:	06da      	lsls	r2, r3, #27
 8001f46:	d407      	bmi.n	8001f58 <__swsetup_r+0x30>
 8001f48:	2209      	movs	r2, #9
 8001f4a:	602a      	str	r2, [r5, #0]
 8001f4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f50:	81a3      	strh	r3, [r4, #12]
 8001f52:	f04f 30ff 	mov.w	r0, #4294967295
 8001f56:	e033      	b.n	8001fc0 <__swsetup_r+0x98>
 8001f58:	0758      	lsls	r0, r3, #29
 8001f5a:	d512      	bpl.n	8001f82 <__swsetup_r+0x5a>
 8001f5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001f5e:	b141      	cbz	r1, 8001f72 <__swsetup_r+0x4a>
 8001f60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001f64:	4299      	cmp	r1, r3
 8001f66:	d002      	beq.n	8001f6e <__swsetup_r+0x46>
 8001f68:	4628      	mov	r0, r5
 8001f6a:	f7ff fb33 	bl	80015d4 <_free_r>
 8001f6e:	2300      	movs	r3, #0
 8001f70:	6363      	str	r3, [r4, #52]	@ 0x34
 8001f72:	89a3      	ldrh	r3, [r4, #12]
 8001f74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001f78:	81a3      	strh	r3, [r4, #12]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	6063      	str	r3, [r4, #4]
 8001f7e:	6923      	ldr	r3, [r4, #16]
 8001f80:	6023      	str	r3, [r4, #0]
 8001f82:	89a3      	ldrh	r3, [r4, #12]
 8001f84:	f043 0308 	orr.w	r3, r3, #8
 8001f88:	81a3      	strh	r3, [r4, #12]
 8001f8a:	6923      	ldr	r3, [r4, #16]
 8001f8c:	b94b      	cbnz	r3, 8001fa2 <__swsetup_r+0x7a>
 8001f8e:	89a3      	ldrh	r3, [r4, #12]
 8001f90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f98:	d003      	beq.n	8001fa2 <__swsetup_r+0x7a>
 8001f9a:	4621      	mov	r1, r4
 8001f9c:	4628      	mov	r0, r5
 8001f9e:	f000 f84f 	bl	8002040 <__smakebuf_r>
 8001fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fa6:	f013 0201 	ands.w	r2, r3, #1
 8001faa:	d00a      	beq.n	8001fc2 <__swsetup_r+0x9a>
 8001fac:	2200      	movs	r2, #0
 8001fae:	60a2      	str	r2, [r4, #8]
 8001fb0:	6962      	ldr	r2, [r4, #20]
 8001fb2:	4252      	negs	r2, r2
 8001fb4:	61a2      	str	r2, [r4, #24]
 8001fb6:	6922      	ldr	r2, [r4, #16]
 8001fb8:	b942      	cbnz	r2, 8001fcc <__swsetup_r+0xa4>
 8001fba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001fbe:	d1c5      	bne.n	8001f4c <__swsetup_r+0x24>
 8001fc0:	bd38      	pop	{r3, r4, r5, pc}
 8001fc2:	0799      	lsls	r1, r3, #30
 8001fc4:	bf58      	it	pl
 8001fc6:	6962      	ldrpl	r2, [r4, #20]
 8001fc8:	60a2      	str	r2, [r4, #8]
 8001fca:	e7f4      	b.n	8001fb6 <__swsetup_r+0x8e>
 8001fcc:	2000      	movs	r0, #0
 8001fce:	e7f7      	b.n	8001fc0 <__swsetup_r+0x98>
 8001fd0:	2000000c 	.word	0x2000000c

08001fd4 <_sbrk_r>:
 8001fd4:	b538      	push	{r3, r4, r5, lr}
 8001fd6:	4d06      	ldr	r5, [pc, #24]	@ (8001ff0 <_sbrk_r+0x1c>)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	4604      	mov	r4, r0
 8001fdc:	4608      	mov	r0, r1
 8001fde:	602b      	str	r3, [r5, #0]
 8001fe0:	f7fe fad8 	bl	8000594 <_sbrk>
 8001fe4:	1c43      	adds	r3, r0, #1
 8001fe6:	d102      	bne.n	8001fee <_sbrk_r+0x1a>
 8001fe8:	682b      	ldr	r3, [r5, #0]
 8001fea:	b103      	cbz	r3, 8001fee <_sbrk_r+0x1a>
 8001fec:	6023      	str	r3, [r4, #0]
 8001fee:	bd38      	pop	{r3, r4, r5, pc}
 8001ff0:	200003d4 	.word	0x200003d4

08001ff4 <__swhatbuf_r>:
 8001ff4:	b570      	push	{r4, r5, r6, lr}
 8001ff6:	460c      	mov	r4, r1
 8001ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ffc:	2900      	cmp	r1, #0
 8001ffe:	b096      	sub	sp, #88	@ 0x58
 8002000:	4615      	mov	r5, r2
 8002002:	461e      	mov	r6, r3
 8002004:	da0d      	bge.n	8002022 <__swhatbuf_r+0x2e>
 8002006:	89a3      	ldrh	r3, [r4, #12]
 8002008:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800200c:	f04f 0100 	mov.w	r1, #0
 8002010:	bf14      	ite	ne
 8002012:	2340      	movne	r3, #64	@ 0x40
 8002014:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002018:	2000      	movs	r0, #0
 800201a:	6031      	str	r1, [r6, #0]
 800201c:	602b      	str	r3, [r5, #0]
 800201e:	b016      	add	sp, #88	@ 0x58
 8002020:	bd70      	pop	{r4, r5, r6, pc}
 8002022:	466a      	mov	r2, sp
 8002024:	f000 f848 	bl	80020b8 <_fstat_r>
 8002028:	2800      	cmp	r0, #0
 800202a:	dbec      	blt.n	8002006 <__swhatbuf_r+0x12>
 800202c:	9901      	ldr	r1, [sp, #4]
 800202e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002032:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002036:	4259      	negs	r1, r3
 8002038:	4159      	adcs	r1, r3
 800203a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800203e:	e7eb      	b.n	8002018 <__swhatbuf_r+0x24>

08002040 <__smakebuf_r>:
 8002040:	898b      	ldrh	r3, [r1, #12]
 8002042:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002044:	079d      	lsls	r5, r3, #30
 8002046:	4606      	mov	r6, r0
 8002048:	460c      	mov	r4, r1
 800204a:	d507      	bpl.n	800205c <__smakebuf_r+0x1c>
 800204c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002050:	6023      	str	r3, [r4, #0]
 8002052:	6123      	str	r3, [r4, #16]
 8002054:	2301      	movs	r3, #1
 8002056:	6163      	str	r3, [r4, #20]
 8002058:	b003      	add	sp, #12
 800205a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800205c:	ab01      	add	r3, sp, #4
 800205e:	466a      	mov	r2, sp
 8002060:	f7ff ffc8 	bl	8001ff4 <__swhatbuf_r>
 8002064:	9f00      	ldr	r7, [sp, #0]
 8002066:	4605      	mov	r5, r0
 8002068:	4639      	mov	r1, r7
 800206a:	4630      	mov	r0, r6
 800206c:	f7ff fb1e 	bl	80016ac <_malloc_r>
 8002070:	b948      	cbnz	r0, 8002086 <__smakebuf_r+0x46>
 8002072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002076:	059a      	lsls	r2, r3, #22
 8002078:	d4ee      	bmi.n	8002058 <__smakebuf_r+0x18>
 800207a:	f023 0303 	bic.w	r3, r3, #3
 800207e:	f043 0302 	orr.w	r3, r3, #2
 8002082:	81a3      	strh	r3, [r4, #12]
 8002084:	e7e2      	b.n	800204c <__smakebuf_r+0xc>
 8002086:	89a3      	ldrh	r3, [r4, #12]
 8002088:	6020      	str	r0, [r4, #0]
 800208a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800208e:	81a3      	strh	r3, [r4, #12]
 8002090:	9b01      	ldr	r3, [sp, #4]
 8002092:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002096:	b15b      	cbz	r3, 80020b0 <__smakebuf_r+0x70>
 8002098:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800209c:	4630      	mov	r0, r6
 800209e:	f000 f81d 	bl	80020dc <_isatty_r>
 80020a2:	b128      	cbz	r0, 80020b0 <__smakebuf_r+0x70>
 80020a4:	89a3      	ldrh	r3, [r4, #12]
 80020a6:	f023 0303 	bic.w	r3, r3, #3
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	81a3      	strh	r3, [r4, #12]
 80020b0:	89a3      	ldrh	r3, [r4, #12]
 80020b2:	431d      	orrs	r5, r3
 80020b4:	81a5      	strh	r5, [r4, #12]
 80020b6:	e7cf      	b.n	8002058 <__smakebuf_r+0x18>

080020b8 <_fstat_r>:
 80020b8:	b538      	push	{r3, r4, r5, lr}
 80020ba:	4d07      	ldr	r5, [pc, #28]	@ (80020d8 <_fstat_r+0x20>)
 80020bc:	2300      	movs	r3, #0
 80020be:	4604      	mov	r4, r0
 80020c0:	4608      	mov	r0, r1
 80020c2:	4611      	mov	r1, r2
 80020c4:	602b      	str	r3, [r5, #0]
 80020c6:	f7fe fa3f 	bl	8000548 <_fstat>
 80020ca:	1c43      	adds	r3, r0, #1
 80020cc:	d102      	bne.n	80020d4 <_fstat_r+0x1c>
 80020ce:	682b      	ldr	r3, [r5, #0]
 80020d0:	b103      	cbz	r3, 80020d4 <_fstat_r+0x1c>
 80020d2:	6023      	str	r3, [r4, #0]
 80020d4:	bd38      	pop	{r3, r4, r5, pc}
 80020d6:	bf00      	nop
 80020d8:	200003d4 	.word	0x200003d4

080020dc <_isatty_r>:
 80020dc:	b538      	push	{r3, r4, r5, lr}
 80020de:	4d06      	ldr	r5, [pc, #24]	@ (80020f8 <_isatty_r+0x1c>)
 80020e0:	2300      	movs	r3, #0
 80020e2:	4604      	mov	r4, r0
 80020e4:	4608      	mov	r0, r1
 80020e6:	602b      	str	r3, [r5, #0]
 80020e8:	f7fe fa3d 	bl	8000566 <_isatty>
 80020ec:	1c43      	adds	r3, r0, #1
 80020ee:	d102      	bne.n	80020f6 <_isatty_r+0x1a>
 80020f0:	682b      	ldr	r3, [r5, #0]
 80020f2:	b103      	cbz	r3, 80020f6 <_isatty_r+0x1a>
 80020f4:	6023      	str	r3, [r4, #0]
 80020f6:	bd38      	pop	{r3, r4, r5, pc}
 80020f8:	200003d4 	.word	0x200003d4

080020fc <_init>:
 80020fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fe:	bf00      	nop
 8002100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002102:	bc08      	pop	{r3}
 8002104:	469e      	mov	lr, r3
 8002106:	4770      	bx	lr

08002108 <_fini>:
 8002108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800210a:	bf00      	nop
 800210c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800210e:	bc08      	pop	{r3}
 8002110:	469e      	mov	lr, r3
 8002112:	4770      	bx	lr
